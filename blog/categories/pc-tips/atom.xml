<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pc_tips | mk-mode BLOG]]></title>
  <link href="http://komasaru.github.io/blog/categories/pc-tips/atom.xml" rel="self"/>
  <link href="http://komasaru.github.io/"/>
  <updated>2016-03-01T00:11:43+09:00</updated>
  <id>http://komasaru.github.io/</id>
  <author>
    <name><![CDATA[mk-mode.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Pandoc で Markdown 文書を PDF に変換！]]></title>
    <link href="http://komasaru.github.io/blog/2016/01/22/pandoc-md2pdf-conversion/"/>
    <updated>2016-01-22T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/01/22/pandoc-md2pdf-conversion</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Pandoc（あるマークアップ形式で書かれた文書を別の形式へ変換するためのコマンドラインツール）を使用して Markdown 文書を PDF に変換する方法についての記録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>組版処理ソフト<script type="math/tex">\LaTeX</script>が必要なので、<script type="math/tex">\TeX Live</script>がインストール済みであること。（以下を参照）

<ul>
<li><a href="/2016/01/18/texlive-installation-on-linux-mint/" title="Linux Mint - TeX Live 2015 インストール！">Linux Mint - TeX Live 2015 インストール！</a></li>
<li><a href="https://oku.edu.mie-u.ac.jp/~okumura/texwiki/?TeX%20Live#w628bee6" title="TeX Live - TeX Wiki">TeX Live - TeX Wiki</a></li>
</ul>
</li>
<li>Apt パッケージ版をインストールする。</li>
<li>今回は使用しないが、最新版をインストールしたければ Cabal（Haskell ライブラリやプログラムをビルド・パッケージングするシステム）を使用してソースからインストールする。（但し、パッケージ依存性の問題が発生しやすいとされているため、利用には注意）</li>
<li>Pandoc では様々な変換が可能だが、今回は Markdown から PDF への変換を行う。</li>
</ul>


<h3>1. Pandoc のインストール</h3>

<p>これだけ。</p>

<pre><code class="text">$ sudo apt-get install pandoc
</code></pre>

<p>ちなみに、 RedHat 系ディストリビューションなら <code>yum install pandoc</code> でインストールできる。（但し、 EPEL リポジトリからインストールするので導入済みであること）</p>

<h3>2. Pandoc インストールの確認</h3>

<pre><code class="text">$ pandoc --version
pandoc 1.12.2.1
Compiled with texmath 0.6.5.2, highlighting-kate 0.5.5.1.
Syntax highlighting is supported for the following languages:
    actionscript, ada, apache, asn1, asp, awk, bash, bibtex, boo, c, changelog,
    clojure, cmake, coffee, coldfusion, commonlisp, cpp, cs, css, curry, d,
    diff, djangotemplate, doxygen, doxygenlua, dtd, eiffel, email, erlang,
    fortran, fsharp, gnuassembler, go, haskell, haxe, html, ini, java, javadoc,
    javascript, json, jsp, julia, latex, lex, literatecurry, literatehaskell,
    lua, makefile, mandoc, markdown, matlab, maxima, metafont, mips, modelines,
    modula2, modula3, monobasic, nasm, noweb, objectivec, objectivecpp, ocaml,
    octave, pascal, perl, php, pike, postscript, prolog, python, r,
    relaxngcompact, rhtml, roff, ruby, rust, scala, scheme, sci, sed, sgml, sql,
    sqlmysql, sqlpostgresql, tcl, texinfo, verilog, vhdl, xml, xorg, xslt, xul,
    yacc, yaml
Default user data directory: /home/masaru/.pandoc
Copyright (C) 2006-2013 John MacFarlane
Web:  http://johnmacfarlane.net/pandoc
This is free software; see the source for copying conditions.  There is no
warranty, not even for merchantability or fitness for a particular purpose.
</code></pre>

<h3>3. テスト用 Markdown 文書の作成</h3>

<pre><code class="text pandoc_test.md">Pandoc 変換テスト
=================

はじめに
--------

### はじめにー１

これは `Pandoc` の変換テストです。これは `Pandoc` の変換テストです。

### はじめにー２

これは `Pandoc` の変換テストです。これは `Pandoc` の変換テストです。

概要
----

#### 概要ー１

Markdown 文書を PDF に変換します。Markdown 文書を PDF に変換します。

#### 概要ー２

Markdown 文書を PDF に変換します。Markdown 文書を PDF に変換します。

参考
----

* [Pandoc - About pandoc](http://pandoc.org/ "Pandoc - About pandoc")
* [Pandoc ユーザーズガイド 日本語版 - Japanese Pandoc User's Association](http://sky-y.github.io/site-pandoc-jp/users-guide/ "Pandoc ユーザーズガイド 日本語版 - Japanese Pandoc User's Association")

｀｀｀
class Test
  def initialize
    @name = "Pandoc"
  end

  def hello
    puts "Hello #{@name}."
  end
end

a = Test.new
a.hello
｀｀｀
</code></pre>

<p>（上記コード内の最後の <code>｀｀｀</code> は、実際は半角（1バイト）文字）</p>

<h3>4. Markdown から PDF への変換</h3>

<pre><code class="text">$ pandoc pandoc_test.md -V documentclass=ltjarticle --latex-engine=lualatex -o pandoc_test.pdf
</code></pre>

<ul>
<li><code>-V documentclass=ltjarticle</code> は、日本語フォントを使用するためのオプション。<br/>
（<script type="math/tex">\LaTeX</script>文書の <code>documentclass</code> を <code>ltjarticle</code> に設定するオプション）</li>
<li><code>--latex-engine=lualatex</code> は、<script type="math/tex">\LaTeX</script>エンジンを <code>lualatex</code>（日本語を扱う場合の推奨値）に設定するオプション。<br/>
（指定しない場合は、デフォルトの <code>pdflatex</code> となる）</li>
<li><code>-o pandoc_test.pdf</code> は、出力ファイルを指定するオプション。<br/>
（指定しない場合は、標準出力に HTML 出力される）</li>
<li>その他、各種オプションあり。

<ul>
<li>A4 用紙に設定したければ <code>-V geometry:a4paper</code> オプションを指定する。</li>
<li>余白を 2cm に設定したければ <code>-V geometry:margin=2cm</code> オプションを指定する。</li>
</ul>
</li>
</ul>


<p>（想像していたより変換に時間がかかる）</p>

<h3>5. PDF の確認</h3>

<p>作成された PDF 文書を確認してみる。（以下は、公開の都合上 PNG 画像としてキャプチャしたもの）</p>

<p><img src="/images/2016/01/22/PANDOC_TEST.png" title="PANDOC_TEST" alt="PANDOC_TEST" /></p>

<h3>6. 参考サイト</h3>

<ul>
<li><a href="http://pandoc.org/" title="Pandoc - About pandoc">Pandoc - About pandoc</a></li>
<li><a href="http://sky-y.github.io/site-pandoc-jp/users-guide/" title="Pandoc ユーザーズガイド 日本語版 - Japanese Pandoc User's Association">Pandoc ユーザーズガイド 日本語版 - Japanese Pandoc User&rsquo;s Association</a></li>
</ul>


<hr />

<p>普段 Markdown でテキストを保存することが多いので、何かと重宝しそうです。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint - TeX Live 2015 インストール！]]></title>
    <link href="http://komasaru.github.io/blog/2016/01/18/texlive-installation-on-linux-mint/"/>
    <updated>2016-01-18T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/01/18/texlive-installation-on-linux-mint</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>以前、組版処理ソフトの<script type="math/tex">\TeX Live 2015</script> を CentOS にインストールする方法については記事にしました。</p>

<ul>
<li><a href="/2012/09/15/15002016/" title="CentOS - TeX Live 2012 インストール！ - mk-mode BLOG">CentOS - TeX Live 2012 インストール！ - mk-mode BLOG</a></li>
</ul>


<p>今回は、Linux Mint へインストールする方法についてです。（実際のところ、ほぼ同じですが）</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>パッケージ管理システムを使用したインストールではなく、アーカイブを取得してのインストール。（パッケージ管理システムを使用したインストールがうまく行かなかったため）</li>
</ul>


<h3>1. アーカイブの取得</h3>

<p>アーカイブファイルを取得して展開する。</p>

<pre><code class="text">$ wget http://ftp.jaist.ac.jp/pub/CTAN/systems/texlive/tlnet/install-tl-unx.tar.gz
$ tar zxvf install-tl-unx.tar.gz
</code></pre>

<h3>2. インストールの開始</h3>

<p>ディレクトリを移動後、<a href="https://oku.edu.mie-u.ac.jp/~okumura/texwiki/?TeX%20Live#tlnet" title="ミラーサイト一覧">ミラーサイト一覧</a>から接続先を選んでインストールを開始する。（途中の問いには <code>I</code> で応答）</p>

<pre><code class="text">$ cd install-tl-*/
$ sudo ./install-tl --repository http://ftp.jaist.ac.jp/pub/CTAN/systems/texlive/tlnet/

====&lt; 途中省略 &gt;====

Actions:
 &lt;I&gt; start installation to hard disk
 &lt;H&gt; help
 &lt;Q&gt; quit

Enter command: I

====&lt; 途中省略 &gt;====
</code></pre>

<p>サーバの接続エラーが発生する場合は<a href="https://oku.edu.mie-u.ac.jp/~okumura/texwiki/?TeX%20Live#tlnet" title="ミラーサイト一覧">接続先</a>を変更してみる。</p>

<h3>3. 環境変数 PATH の設定</h3>

<p>環境変数 PATH を設定する。（当方は <code>~/.bashrc</code> を編集）</p>

<p><code>bash ~/.bashrc
PATH="/usr/local/texlive/2015/bin/x86_64-linux:$PATH"
MANPATH="/usr/local/texlive/2015/texmf-dist/doc/man:$MANPATH"
</code></p>

<p>そして、即時反映。</p>

<pre><code class="text">$ source ~/.bashrc
</code></pre>

<h3>4. TeX Live インストールの確認</h3>

<p><code>tex</code> や <code>platex</code> 等のバージョンを確認してみる。</p>

<pre><code class="text">$ tex --version
TeX 3.14159265 (TeX Live 2015)
kpathsea version 6.2.1
Copyright 2015 D.E. Knuth.
There is NO warranty.  Redistribution of this software is
covered by the terms of both the TeX copyright and
the Lesser GNU General Public License.
For more information about these matters, see the file
named COPYING and the TeX source.
Primary author of TeX: D.E. Knuth.

$ platex --version
e-pTeX 3.14159265-p3.6-141210-2.6 (utf8.euc) (TeX Live 2015)
kpathsea version 6.2.1
ptexenc version 1.3.3
Copyright 2015 D.E. Knuth.
There is NO warranty.  Redistribution of this software is
covered by the terms of both the e-pTeX copyright and
the Lesser GNU General Public License.
For more information about these matters, see the file
named COPYING and the e-pTeX source.
Primary author of e-pTeX: Peter Breitenlohner.
</code></pre>

<h3>5. 動作確認用 tex ファイルの作成</h3>

<pre><code class="text test.tex">\documentclass[14pt,a4j]{jsarticle}
%--余白の設定 ( A4サイズ: 290 * 210 ) の半分
\setlength{\voffset}{10mm}               %用紙上部の余白
\addtolength{\voffset}{-1in}             %はじめからある余白を消す
\setlength{\hoffset}{15mm}               %用紙左部の余白
\addtolength{\hoffset}{-1in}             %はじめからある余白を消す
\setlength{\topmargin}{0mm}              %上部余白からヘッダーまでの長さ
\setlength{\oddsidemargin}{0mm}          %左部余白から本文までの長さ
\setlength{\headheight}{0mm}             %ヘッダーの高さ
\setlength{\headsep}{0mm}                %ヘッダーから本文までの長さ
\setlength{\textheight}{29\baselineskip} %本文の高さ
\setlength{\textwidth}{270pt}            %本文の幅
\setlength{\marginparwidth}{0mm}         %注釈の幅
\setlength{\topskip}{0mm}                %本文の上部から一行目までの長さ
\setlength{\baselineskip}{11pt}          %行の高さ
%--PageStyle設定
\pagestyle{empty}

\begin{document}

\noindent
\section*{標準偏差}
【不偏分散】
\begin{eqnarray*}
単純移動平均 \ \ \overline{x} &amp; = &amp; \frac{1}{n}{\displaystyle\sum_{i=0}^{n-1} x_{i}}\\
標準偏差 \ \ \sigma &amp; = &amp; \sqrt{ \frac{1}{n-1}{\displaystyle\sum_{i=0}^{n-1} \left( x_{i} - \overline{x} \right)^{2}} } \\
&amp; = &amp; \sqrt{ \frac{1}{n\left(n-1\right)}\Biggl\{n\displaystyle\sum_{i=0}^{n-1}x_{i}^{2} - \left( \displaystyle\sum_{i=0}^{n-1}x_{i} \right)^{2}\Biggl\} }
\end{eqnarray*}\par
【標本分散】
\begin{eqnarray*}
単純移動平均 \ \ \overline{x} &amp; = &amp; \frac{1}{n}{\displaystyle\sum_{i=0}^{n-1} x_{i}}\\
標準偏差 \ \ \sigma &amp; = &amp; \sqrt{ \frac{1}{n}{\displaystyle\sum_{i=0}^{n-1} \left( x_{i} - \overline{x} \right)^{2}} } \\
&amp; = &amp; \sqrt{ \frac{1}{n^{2}}\Biggl\{n\displaystyle\sum_{i=0}^{n-1}x_{i}^{2} - \left( \displaystyle\sum_{i=0}^{n-1}x_{i} \right)^{2}\Biggl\} }
\end{eqnarray*}

\end{document}
</code></pre>

<h3>6. PDF の作成</h3>

<p>以下のようにして、PDF ファイル作成まで実行する。<br/>
&ldquo;test.tex&rdquo; に間違いがなければ <code>platex</code> コマンドで &ldquo;test.dvi&rdquo; ファイルが作成され、<code>dvipdfmx</code> コマンドで &ldquo;test.pdf&rdquo; が作成されるはずです。</p>

<pre><code class="text">$ platex test.tex
This is e-pTeX, Version 3.14159265-p3.6-141210-2.6 (utf8.euc) (TeX Live 2015) (preloaded format=platex)
 restricted \write18 enabled.
entering extended mode
(./test.tex
pLaTeX2e &lt;2006/11/10&gt; (based on LaTeX2e &lt;2015/10/01&gt; patch level 2)
Babel &lt;3.9m&gt; and hyphenation patterns for 79 languages loaded.
(/usr/local/texlive/2015/texmf-dist/tex/platex/jsclasses/jsarticle.cls
Document Class: jsarticle 2014/02/07 okumura
) (./test.aux) [1] (./test.aux) )
Output written on test.dvi (1 page, 2304 bytes).
Transcript written on test.log.

$ dvipdfmx test.dvi
test.dvi -&gt; test.pdf
[1]
8137 bytes written
</code></pre>

<h3>7. PDF の確認</h3>

<p>作成された PDF ファイルを確認してみる。（以下は公開の都合上 PNG 画像として切り取ったもの）</p>

<p><img src="/images/2016/01/18/TEXLIVE_2015_TEST.png" title="TEXLIVE_2015_TEST" alt="TEXLIVE_2015_TEST" /></p>

<h3>8. その他</h3>

<p>GUI ツールの <script type="math/tex">\TeX Works</script> を導入するとより扱いやすいでしょう。</p>

<h3>9. 参考サイト</h3>

<ul>
<li><a href="https://oku.edu.mie-u.ac.jp/~okumura/texwiki/?Linux#texlive" title="Linux - TeX Wiki">Linux - TeX Wiki</a></li>
</ul>


<hr />

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - マシン起動時にディレクトリ・ファイルを自動作成！]]></title>
    <link href="http://komasaru.github.io/blog/2015/12/08/linux-dir-file-automatic-creation-on-boot/"/>
    <updated>2015-12-08T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/12/08/linux-dir-file-automatic-creation-on-boot</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux で、マシン起動時に自動でディレクトリやファイルを作成する方法についての備忘録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>CentOS 6.7(i386) での作業を想定。（他の Linux ディストリビューションでも同様のはず）</li>
</ul>


<h3>1. はじめに</h3>

<ul>
<li>今回の作業は、 <code>/etc/tmpfiles.d/*.conf</code> ファイルを作成することで実現する。
（環境によっては、 <code>/run/tmpfiles.d/*.conf</code>, <code>/usr/lib/tmpfiles.d/*.conf</code> ファイル）</li>
<li><code>/etc/tmpfiles.d/*.conf</code> ファイル内の書式は以下のとおり。（詳細は「<a href="http://www.unix.com/man-page/centos/5/tmpfiles.d/" title="CentOS 7.0 - man page for tmpfiles.d (centos section 5) - Unix &amp; Linux Commands">参考サイト</a>」参照<br/>
<code>Type Path Mode UID GID Age Argument</code></li>
</ul>


<h3>2. 作成例</h3>

<p>当方が使用する頻度が高いもののみについて、作成例を挙げる。</p>

<h4>2-1. ディレクトリが存在しなければ作成する例</h4>

<p>「ディレクトリ：/tmp/test_dir, パーミッション：1777, 所有者：root, グループ：root, 有効期限：５日」でディレクトリを作成する例。</p>

<pre><code class="bash /etc/tmpfiles.d/test_1.conf">d /tmp/test_dir 1777 root root 5d
</code></pre>

<h4>2-2. ディレクトリが存在しなければ作成し、存在していれば空にする例</h4>

<p>「ディレクトリ：/home/foo/test_dir, パーミッション：0755, 所有者：root, グループ：root, 有効期限：無限」でディレクトリを作成する例。</p>

<pre><code class="bash /etc/tmpfiles.d/test_2.conf">D /home/foo/test_dir 0755 root root -
</code></pre>

<h4>2-3. ファイルが存在しなければ作成する例</h4>

<p>「ファイル：/home/foo/test.txt, パーミッション：0777, 所有者：root, グループ：root, 有効期限：無限、ファイル内容：空」でファイルを作成する例。</p>

<pre><code class="bash /etc/tmpfiles.d/test_3.conf">f /home/foo/test.txt 0777 root root -
</code></pre>

<h4>2-4. ファイルが存在しなければ作成し、存在していれば空にする例</h4>

<p>「ファイル：/home/foo/test.txt, パーミッション：0777, 所有者：root, グループ：root, 有効期限：無限、ファイル内容："This is a tmpfiles.d test!&ldquo;」でファイルを作成する例。</p>

<pre><code class="bash /etc/tmpfiles.d/test_4.conf">F /home/foo/test.txt 0777 root root - "This is a tmpfiles.d test!"
</code></pre>

<h3>3. 参考サイト</h3>

<ul>
<li><a href="http://www.unix.com/man-page/centos/5/tmpfiles.d/" title="CentOS 7.0 - man page for tmpfiles.d (centos section 5) - Unix &amp; Linux Commands">CentOS 7.0 - man page for tmpfiles.d (centos section 5) - Unix &amp; Linux Commands</a></li>
</ul>


<hr />

<p>意外とよく使用する機能だけど、使用方法について説明しているサイトがあまりないので、備忘録として残しておいた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - MTU 最適値の導出！]]></title>
    <link href="http://komasaru.github.io/blog/2015/11/26/linux-mtu-best-effort/"/>
    <updated>2015-11-26T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/11/26/linux-mtu-best-effort</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux で最適な MTU 値を導出する方法についての備忘録です。</p>

<!--more-->


<h3>1. MTU について</h3>

<p>MTU とは Maximum Transmission Unit の略で、ネットワーク上において１フレーム（１回の転送）で送信可能な IP パケットの最大サイズのこと。<br/>
（このサイズは IP ヘッダ ＋ ICMP ヘッダ ＋ データのサイズ）</p>

<h3>2. MTU 現在値の確認</h3>

<pre><code class="text">$ ifconfig
ifconfig
eth0      Link encap:イーサネット  ハードウェアアドレス XX:XX:XX:XX:XX:XX
          inetアドレス:192.168.XXX.XXX  ブロードキャスト:192.168.XXX.255  マスク:255.255.255.0
          UP BROADCAST RUNNING MULTICAST  MTU:1500  メトリック:1
          RXパケット:49793411 エラー:0 損失:0 オーバラン:0 フレーム:0
          TXパケット:30012458 エラー:0 損失:0 オーバラン:0 キャリア:0
          衝突(Collisions):0 TXキュー長:1000
          RXバイト:23207684202 (23.2 GB)  TXバイト:21221894153 (21.2 GB)
          割り込み:17

lo        Link encap:ローカルループバック
          inetアドレス:127.0.0.1  マスク:255.0.0.0
          UP LOOPBACK RUNNING  MTU:65536  メトリック:1
          RXパケット:27117491 エラー:0 損失:0 オーバラン:0 フレーム:0
          TXパケット:27117491 エラー:0 損失:0 オーバラン:0 キャリア:0
          衝突(Collisions):0 TXキュー長:0
          RXバイト:32672340989 (32.6 GB)  TXバイト:32672340989 (32.6 GB)
</code></pre>

<p>eth0 の MTU 値が <code>1500</code> となっている。</p>

<h3>3. MTU 最適値の導出</h3>

<p>要は、様々なサイズのパケット（データ）を断片化せずに送信してみてロスしない最大値を求めればよい。<br/>
但し、「IP ヘッダ ＋ ICMP ヘッダ」が「28 バイト」あるので、 MTU に設定する値は +28 したものになる。
（送信先は存在する URL ならどこでもよい）</p>

<p>では、実際に導出作業を行なってみる。（大体の目星をつけて作業を行うとよいだろう）</p>

<p>以下では <code>ping</code> コマンドを使用するがオプションは次のとおり。</p>

<ul>
<li><code>-c 1</code> は、リクエスト回数を１回に設定するオプション</li>
<li><code>-s 9999</code> は、送信パケットサイズを 9999 に設定するオプション</li>
<li><code>-M do</code> は、パケットの断片化を行わないオプション</li>
</ul>


<p>まず、パケットサイズ 1400 バイトで送信してみる。</p>

<pre><code class="text"># ping -c 1 -s 1400 -M do www.linuxmint.com
PING www.linuxmint.com (213.175.215.218) 1400(1428) bytes of data.
1408 bytes from forums.linuxmint.com (213.175.215.218): icmp_seq=1 ttl=49 time=308 ms

--- www.linuxmint.com ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 308.674/308.674/308.674/0.000 ms
</code></pre>

<p><code>1 received, 0% packet loss</code> なので、正常に送信できているということ。</p>

<p>次に、パケットサイズ 1500 バイトで送信してみる。</p>

<pre><code class="text">$ ping -c 1 -s 1500 -M do www.linuxmint.com
PING www.linuxmint.com (213.175.215.218) 1500(1528) bytes of data.
ping: local error: Message too long, mtu=1454

--- www.linuxmint.com ping statistics ---
1 packets transmitted, 0 received, +1 errors, 100% packet loss, time 0ms
</code></pre>

<p><code>0 received, +1 errors, 100% packet loss</code> なので、送信に失敗しているということ。</p>

<p>このように、パケットサイズを変更しながら絞り込んでいく。</p>

<p>今回の当方の環境の場合、パケットサイズ「1426 バイト」が正常に送信できる最大値であった。</p>

<p>よって、 MTU 値は IP ヘッダ ＋ ICMP ヘッダの 28 バイトをプラスした「1454 バイト」となる。<br/>
（ちなみに、この値は今回の当方の環境ではよく知られている最適な MTU 値）</p>

<h3>4. MTU 値の変更</h3>

<p>後は、MTU 値を前項で導出した値に変更すればよい。</p>

<pre><code class="text">$ ifconfig eth0 mtu 1454
</code></pre>

<p>但し、この設定は一時的なものなのでマシンを再起動すると元に戻ってしまう。</p>

<p>恒久的に変更するには、ネットワーク接続の編集の画面で MTU 値を「自動（もしくは、何らかの数値）」から変更、もしくは設定ファイル &ldquo;/etc/NetworkManager/system-connections/Wired\ connection\ 1&rdquo; 等を編集し、再起動（ネットワーク再接続）する。（Linux Mint 等の場合）</p>

<p>ちなみに、 CentOS の CUI ベースなら &ldquo;/etc/sysconfig/network-scripts/ifcfg-eth0&rdquo; 等を編集して再起動する。</p>

<hr />

<p>それほどネットワーク周りが改善されたと体感できないかもしれませんが、最適化しないよりはした方がよいでしょう。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint - Apt パッケージリストアップデートで GPG 公開鍵の期限切れエラー！]]></title>
    <link href="http://komasaru.github.io/blog/2015/11/21/linux-mint-apt-gpg-pubkey-expired-error/"/>
    <updated>2015-11-21T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/11/21/linux-mint-apt-gpg-pubkey-expired-error</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux Mint で <code>apt-get update</code> すると公開鍵期限切れのエラーが発生するようになりました。</p>

<p>（以前「<a href="/2015/10/14/linux-mint-apt-gpg-pubkey-error/" title="Linux Mint - apt-get update で GPG 公開鍵エラー！">Linux Mint - apt-get update で GPG 公開鍵エラー！</a>」という記事も公開しています。参考までに）</p>

<p>以下、現象・原因・対策についての記録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
</ul>


<h3>1. 現象</h3>

<p><code>sudo apt-get update</code> を実行すると以下のようなエラーが発生する。（アップデートマネージャでも同様）</p>

<pre><code class="text">W: GPG エラー: http://cran.ism.ac.jp trusty/ Release: 以下の署名が無効です: KEYEXPIRED 1445181253 KEYEXPIRED 1445181253 KEYEXPIRED 1445181253,
</code></pre>

<p>（ちなみに、今回の現象は統計解析用プログラミング言語 R のパッケージにに関するもの）</p>

<h3>2. 原因</h3>

<p>エラーメッセージに記載されているとおり、 <code>1445181253</code> というキーが <code>KEYEXPIRED</code>（期限切れ）になっているため。</p>

<h3>3. 対策</h3>

<p>まず、キーの状態を確認してみる。</p>

<pre><code class="text">$ apt-key list

pub   2048R/E084DAB9 2010-10-19 [満了: 2015-10-18]
uid                  Michael Rutter &lt;marutter@gmail.com&gt;
</code></pre>

<p>確かに期限が切れている。</p>

<p>従って、キーサーバに問い合わせて、公開鍵を再取得すればよい。</p>

<pre><code class="text">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
Executing: gpg --ignore-time-conflict --no-options --no-default-keyring --homedir /tmp/tmp.UCCHrlWZQw --no-auto-check-trustdb --trust-model always --keyring /etc/apt/trusted.gpg --primary-keyring /etc/apt/trusted.gpg --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
gpg: 鍵E084DAB9をhkpからサーバーkeyserver.ubuntu.comに要求
gpg: 鍵E084DAB9:“Michael Rutter &lt;marutter@gmail.com&gt;”新しい署名を2個
gpg: 処理数の合計: 1
gpg:         新しい署名: 2
</code></pre>

<p>再度、キーの状態を確認してみる。</p>

<pre><code class="text">$ apt-key list

pub   2048R/E084DAB9 2010-10-19 [満了: 2020-10-16]
uid                  Michael Rutter &lt;marutter@gmail.com&gt;
sub   2048R/1CFF3E8F 2010-10-19 [満了: 2020-10-16]
</code></pre>

<p>満了日が延長された。</p>

<p>これで、正常に <code>sudo apt-get update</code> が実行できるはず。</p>

<hr />

<p>めったに遭遇しない事象なので、後学のために記録として残しておいた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
