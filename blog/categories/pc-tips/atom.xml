<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: pc_tips | mk-mode BLOG]]></title>
  <link href="http://komasaru.github.io/blog/categories/pc-tips/atom.xml" rel="self"/>
  <link href="http://komasaru.github.io/"/>
  <updated>2015-11-21T00:17:30+09:00</updated>
  <id>http://komasaru.github.io/</id>
  <author>
    <name><![CDATA[mk-mode.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux Mint - Apt パッケージリストアップデートで GPG 公開鍵の期限切れエラー！]]></title>
    <link href="http://komasaru.github.io/blog/2015/11/21/linux-mint-apt-gpg-pubkey-expired-error/"/>
    <updated>2015-11-21T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/11/21/linux-mint-apt-gpg-pubkey-expired-error</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux Mint で <code>apt-get update</code> すると公開鍵期限切れのエラーが発生するようになりました。</p>

<p>（以前「<a href="/2015/10/14/linux-mint-apt-gpg-pubkey-error/" title="Linux Mint - apt-get update で GPG 公開鍵エラー！">Linux Mint - apt-get update で GPG 公開鍵エラー！</a>」という記事も公開しています。参考までに）</p>

<p>以下、現象・原因・対策についての記録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
</ul>


<h3>1. 現象</h3>

<p><code>sudo apt-get update</code> を実行すると以下のようなエラーが発生する。（アップデートマネージャでも同様）</p>

<pre><code class="text">W: GPG エラー: http://cran.ism.ac.jp trusty/ Release: 以下の署名が無効です: KEYEXPIRED 1445181253 KEYEXPIRED 1445181253 KEYEXPIRED 1445181253,
</code></pre>

<p>（ちなみに、今回の現象は統計解析用プログラミング言語 R のパッケージにに関するもの）</p>

<h3>2. 原因</h3>

<p>エラーメッセージに記載されているとおり、 <code>1445181253</code> というキーが <code>KEYEXPIRED</code>（期限切れ）になっているため。</p>

<h3>3. 対策</h3>

<p>まず、キーの状態を確認してみる。</p>

<pre><code class="text">$ apt-key list

pub   2048R/E084DAB9 2010-10-19 [満了: 2015-10-18]
uid                  Michael Rutter &lt;marutter@gmail.com&gt;
</code></pre>

<p>確かに期限が切れている。</p>

<p>従って、キーサーバに問い合わせて、公開鍵を再取得すればよい。</p>

<pre><code class="text">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
Executing: gpg --ignore-time-conflict --no-options --no-default-keyring --homedir /tmp/tmp.UCCHrlWZQw --no-auto-check-trustdb --trust-model always --keyring /etc/apt/trusted.gpg --primary-keyring /etc/apt/trusted.gpg --keyserver keyserver.ubuntu.com --recv-keys E084DAB9
gpg: 鍵E084DAB9をhkpからサーバーkeyserver.ubuntu.comに要求
gpg: 鍵E084DAB9:“Michael Rutter &lt;marutter@gmail.com&gt;”新しい署名を2個
gpg: 処理数の合計: 1
gpg:         新しい署名: 2
</code></pre>

<p>再度、キーの状態を確認してみる。</p>

<pre><code class="text">$ apt-key list

pub   2048R/E084DAB9 2010-10-19 [満了: 2020-10-16]
uid                  Michael Rutter &lt;marutter@gmail.com&gt;
sub   2048R/1CFF3E8F 2010-10-19 [満了: 2020-10-16]
</code></pre>

<p>満了日が延長された。</p>

<p>これで、正常に <code>sudo apt-get update</code> が実行できるはず。</p>

<hr />

<p>めったに遭遇しない事象なので、後学のために記録として残しておいた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint - apt-get update で GPG 公開鍵エラー！]]></title>
    <link href="http://komasaru.github.io/blog/2015/10/14/linux-mint-apt-gpg-pubkey-error/"/>
    <updated>2015-10-14T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/10/14/linux-mint-apt-gpg-pubkey-error</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux Mint で、いつしか Apt パッケージの一覧を更新しようとすると GPG 公開鍵エラーが発生するようになりました。</p>

<p>以下、現象・原因・対策についての備忘録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) を想定。</li>
</ul>


<h3>1. 現象</h3>

<p>Apt パッケージ一覧をアップデートした際に以下のようなエラーが発生する。（<code>W</code> なので分類としては「警告」でしょうが）<br/>
（以下は QGIS というパッケージの部分で発生した例で、実際のメッセージは１行）</p>

<pre><code class="text">$ sudo apt-get update

====&lt; 途中省略 &gt;====

W: GPG エラー: http://qgis.org trusty InRelease: 
公開鍵を利用できないため、以下の署名は検証できませんでした: NO_PUBKEY 3FF5FFCAD71472C4

====&lt; 以下省略 &gt;====
</code></pre>

<p>当然ながら、アップデートマネージャでも同じエラーが発生する。</p>

<h3>2. 原因</h3>

<p>メッセージのとおり、GPG 署名の検証に必要な公開鍵が存在しないため。</p>

<h3>3. 対策</h3>

<p>キーサーバに問い合わせればよい。（<code>--recv-keys</code> の値は、エラーメッセージ中 <code>NO_PUBKEY</code> の後ろの値）</p>

<pre><code class="text">$ sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3FF5FFCAD71472C4
Executing: gpg --ignore-time-conflict --no-options --no-default-keyring --homedir /tmp/tmp.Wv6W1dQY2n --no-auto-check-trustdb --trust-model always --keyring /etc/apt/trusted.gpg --primary-keyring /etc/apt/trusted.gpg --keyserver keyserver.ubuntu.com --recv-keys 3FF5FFCAD71472C4
gpg: 鍵D71472C4をhkpからサーバーkeyserver.ubuntu.comに要求
gpg: 鍵D71472C4: 公開鍵“QGIS Archive Automatic Signing Key (2015) &lt;qgis-developer@lists.osgeo.org&gt;”を読み込みました
gpg: 処理数の合計: 1
gpg:               読込み: 1  (RSA: 1)
</code></pre>

<p>再度 <code>apt-get update</code> でエラーが発生しないことを確認する。</p>

<hr />

<p>稀に遭遇するエラーなので備忘録として残しておいた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - メモリキャッシュのクリア！]]></title>
    <link href="http://komasaru.github.io/blog/2015/10/09/linux-release-memory-caches/"/>
    <updated>2015-10-09T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/10/09/linux-release-memory-caches</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux でメモリキャッシュをクリアすることについての備忘録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Kernel 2.6.16 以降であること。</li>
<li>当方は Linux Mint 17.2(64bit), 搭載メモリ:4GB の環境で動作確認。</li>
</ul>


<h3>1. キャッシュの削除方法</h3>

<p>以下のコマンドは、 root になって実行するか <code>sudo</code> を使用して実行する。</p>

<h4>1-1. ページキャッシュの解放</h4>

<pre><code class="text"># sysctl -w vm.drop_caches=1
</code></pre>

<p>もしくは、</p>

<pre><code class="text"># echo 1 &gt; /proc/sys/vm/drop_caches
</code></pre>

<h4>1-2. Slab キャッシュの解放</h4>

<p>（Slab キャッシュとは、ディレクトリやファイルのメタデータ情報を格納する dentry や inode のこと）</p>

<pre><code class="text"># sysctl -w vm.drop_caches=2
</code></pre>

<p>もしくは、</p>

<pre><code class="text"># echo 2 &gt; /proc/sys/vm/drop_caches
</code></pre>

<h4>1-3. ページキャッシュと Slab キャッシュの解放</h4>

<pre><code class="text"># sysctl -w vm.drop_caches=3
</code></pre>

<p>もしくは、</p>

<pre><code class="text"># echo 3 &gt; /proc/sys/vm/drop_caches
</code></pre>

<h4>1-4. 初期状態について</h4>

<p>あらゆる Web サイト等で「初期状態に戻すには <code>0</code> を設定する」旨の紹介がされている。<br/>
しかし、 RedHat 系では機能するが Debian 系では機能しない。（<code>sysctl</code> も <code>echo</code> も）</p>

<p><code>vm.drop_caches</code> についての説明は <code>man proc</code> で確認できるが、 Debian 系も RedHat 系も <code>0</code> についての説明がされていない。</p>

<p>従って、初期状態には戻す必要はないという結論に至った。（あくまで、個人の判断）<br/>
（とは言え、 <code>cat /proc/sys/vm/drop_caches</code> の値が、マシンを再起動するまでずっと <code>0</code> 以外の状態でいることに疑問を感じる）</p>

<h3>2. 作業の実際</h3>

<p>実際の作業手順は以下のようになる。</p>

<ol>
<li>キャッシュクリア前のメモリ状態を確認。</li>
<li>バッファの内容をディスクに書き込む。</li>
<li>キャッシュをクリア。</li>
<li>キャッシュクリア後のメモリ状態を確認。</li>
</ol>


<p>以下は、ページキャッシュと Slab キャッシュを解放する例。</p>

<pre><code class="text"># free
             total       used       free     shared    buffers     cached
Mem:       4047488    3887116     160372     155764     247452    1104336
-/+ buffers/cache:    2535328    1512160
Swap:      8000508     557132    7443376

# sync

# sysctl -w vm.drop_caches=3
vm.drop_caches = 3

# free
             total       used       free     shared    buffers     cached
Mem:       4047488    2415508    1631980     155764       9856     324056
-/+ buffers/cache:    2081596    1965892
Swap:      8000508     557124    7443384
</code></pre>

<p>物理メモリの空き容量(Mem - free の値）が増えたことを確認する。</p>

<h3>3. 参考サイト</h3>

<ul>
<li><a href="http://linuxjm.osdn.jp/html/LDP_man-pages/man5/proc.5.html" title="Man page of PROC">Man page of PROC</a></li>
</ul>


<hr />

<p>物理メモリの空き容量の減りが気になったら試してみるといいでしょう。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - マルチコア CPU で高速圧縮！]]></title>
    <link href="http://komasaru.github.io/blog/2015/10/03/linux-archive-speed-up-on-multi-core-cpu/"/>
    <updated>2015-10-03T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/10/03/linux-archive-speed-up-on-multi-core-cpu</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>通常、 Linux の <code>tar</code> コマンドでファイル等の圧縮を行う場合、 CPU コアを１つしか使用しません。</p>

<p>２つ以上 CPU コアを搭載していることの多い昨今、 CPU コアを全て使用して圧縮を行うと時間の節約になります。</p>

<p>今回、圧縮・解凍をマルチコアで並列に処理してくれる <code>pigz</code> を使用してみました。</p>

<!--more-->


<h3>0.前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>Intel Core2Duo CPU E8500 (3.16GHz x 2) での作業を想定。</li>
</ul>


<h3>1. pigz のインストール</h3>

<p>Apt パッケージを使用する（但し、最新版ではない可能性が高い）</p>

<pre><code class="text">$ sudo apt-get install pigz
</code></pre>

<p>もしくは、最新版アーカイブを取得＆展開後、 <code>make</code> して適当な位置に配置してもよい。（但し、当方の環境ではビルドエラーになった）</p>

<pre><code class="text">$ wget http://zlib.net/pigz/pigz-2.3.3.tar.gz
$ tar zxvf pigz-2.3.3.tar.gz
$ cd pigz-2.3.3
$ make
$ sudo mv ./pigz /usr/local/bin/pigz
$ sudo mv ./unpigz /usr/local/bin/unpigz
</code></pre>

<h3>2. pigz インストールの確認</h3>

<pre><code class="text">$ pigz --version
pigz 2.3
</code></pre>

<h3>3. 圧縮</h3>

<p>比較のため、まず <code>tar</code> コマンドで圧縮してみる。<br/>
（圧縮対象は、サブディレクトリ：2層、ファイル数：121,653個、容量：約100MB の &ldquo;test&rdquo; という名称のディレクトリ）</p>

<pre><code class="text">$ time tar zcf test.tar.gz test

real    0m4.711s
user    0m4.402s
sys     0m0.938s
</code></pre>

<p>次に、 pigz 圧縮してみる。<br/>
ディレクトリを再帰的に圧縮できる <code>-r</code> もあるが、これはファイルそれぞれが圧縮されてしまうので、 <code>tar</code> コマンドで一旦ファイルをまとめてから <code>pigz</code> コマンドで圧縮する。また、デフォルトでは全てのプロセッサを使用するが、同時実行スレッド数を指定する <code>-p</code> オプション等もある。</p>

<pre><code class="text">$ time tar c test | pigz &gt; test.tar.gz

real    0m2.987s
user    0m4.624s
sys     0m0.682s
</code></pre>

<p>ちなみに、単純に１つのファイルを圧縮するだけなら <code>pigz -k test.tar.gz</code> でよい（<code>-k</code> は元のファイルを残すオプション）。</p>

<p>さらに、 <code>pigz</code> コマンドを <code>tar</code> コマンドのオプションで使用して圧縮してみる。</p>

<pre><code class="text">$ time tar cf test.tar.gz test --use-compress-program=pigz

real    0m2.970s
user    0m4.542s
sys     0m0.632s
</code></pre>

<h3>4. 解凍</h3>

<p>まず、単純に <code>tar</code> コマンドで圧縮したファイルを解凍してみる。</p>

<pre><code class="text">$ time tar zxf test.tar.gz

real    0m18.441s
user    0m1.813s
sys     0m3.022s
</code></pre>

<p>次に、 <code>pigz</code> で圧縮したファイルを <code>tar</code> コマンドで解凍してみる。</p>

<pre><code class="text">$ time tar xf test.tar.gz --use-compress-program=pigz

real    0m17.526s
user    0m1.193s
sys     0m3.310s
</code></pre>

<h3>5. 所感</h3>

<ul>
<li>コア数 2 の非力な環境でも約 2/3 の速度で圧縮することができたのだが、場合によっては pigz を使用する方が遅くなることもある。</li>
<li>今回、解凍についてはそれほど差が認められなかった。</li>
<li>当然、環境によって結果は異なるだろう。</li>
</ul>


<p>従って、当方は明らかに圧縮の高速化が見込める場合のみ pigz を使用することとした。</p>

<h3>6. 参考サイト</h3>

<ul>
<li><a href="http://zlib.net/pigz/" title="pigz - Parallel gzip">pigz - Parallel gzip</a></li>
</ul>


<hr />

<p>非力な環境では、それほど積極的に使用したいと思うようなコマンドでもありませんでした。</p>

<p>しかし、コアを複数使用して圧縮・解凍ができる、といういことを認識できたことに若干の喜びを感じた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - XML に XSLT を適用して HTML 生成！]]></title>
    <link href="http://komasaru.github.io/blog/2015/09/07/linux-apply-xslt-to-xml-by-xsltproc/"/>
    <updated>2015-09-07T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/09/07/linux-apply-xslt-to-xml-by-xsltproc</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>以前、 Ruby で XML ファイルに XSL テンプレートを適用して HTML を生成する方法を紹介しました。</p>

<ul>
<li><a href="/2013/12/04/ruby-apply-xslt-to-xml/" title="Ruby - XML に XSLT を適用して HTML 生成！">Ruby - XML に XSLT を適用して HTML 生成！</a></li>
</ul>


<p>ただ、 Linux ディストリビューションによってはデフォルトで XML に XSL テンプレートを適用するコマンドがインストールされています。<br/>
わざわざ Ruby を使用しなくてもよいということです。</p>

<p>以下、その使用方法についての備忘録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>XML に XSL テンプレート適用して HTML ファイルを生成するのに <code>xsltproc</code> コマンドを使用する。</li>
</ul>


<h3>1. xsltproc コマンドのインストール</h3>

<p><code>xsltproc</code> コマンドが未インストールならインストールしておく。</p>

<pre><code class="text">$ sudo apt-get install xsltproc
</code></pre>

<h3>2. XML ファイルの準備</h3>

<p>試験的に使用する XML ファイルを以下のように作成する。（あくまで一例）</p>

<pre><code class="xml test.xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;?xml-stylesheet type="text/xsl" href="test.xsl" ?&gt;

&lt;Office&gt;
  &lt;People&gt;
    &lt;Person&gt;
      &lt;No&gt;1234&lt;/No&gt;
      &lt;Name&gt;Ruby 太郎&lt;/Name&gt;
      &lt;Birthday&gt;1980-01-01&lt;/Birthday&gt;
      &lt;Age&gt;33&lt;/Age&gt;
    &lt;/Person&gt;
    &lt;Person&gt;
      &lt;No&gt;2345&lt;/No&gt;
      &lt;Name&gt;XML 二郎&lt;/Name&gt;
      &lt;Birthday&gt;1985-04-15&lt;/Birthday&gt;
      &lt;Age&gt;28&lt;/Age&gt;
    &lt;/Person&gt;
    &lt;Person&gt;
      &lt;No&gt;3456&lt;/No&gt;
      &lt;Name&gt;XSL 花子&lt;/Name&gt;
      &lt;Birthday&gt;1990-09-30&lt;/Birthday&gt;
      &lt;Age&gt;23&lt;/Age&gt;
    &lt;/Person&gt;
  &lt;/People&gt;
&lt;/Office&gt;
</code></pre>

<h3>3. XSL テンプレートファイルの準備</h3>

<p>試験的に使用する XSL テンプレートファイルを以下のように作成する。（あくまで一例）</p>

<pre><code class="xml test.xsl">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;

&lt;xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"&gt;
   &lt;xsl:output method="html" encoding="UTF-8"/&gt;

  &lt;xsl:template match="/"&gt;
    &lt;xsl:apply-templates/&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="Office"&gt;
    &lt;html lang="ja"&gt;
    &lt;body&gt;
    &lt;xsl:apply-templates/&gt;
    &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="People"&gt;
    &lt;table&gt;
    &lt;xsl:apply-templates/&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="Person"&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;xsl:value-of select="No"/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="Name"/&gt;&lt;/td&gt;
      &lt;td&gt;&lt;xsl:value-of select="Birthday"/&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/xsl:template&gt;
&lt;/xsl:stylesheet&gt;
</code></pre>

<h3>4. HTML ファイルの生成</h3>

<p>準備しておいた XML ファイルに XSL テンプレートを適用して HTML ファイルを生成する。</p>

<pre><code class="text">$ xsltproc --output test.html test.xsl test.xml
</code></pre>

<p>※オプションは他にも多数あるので、 <code>xsltproc --help</code> や <code>man xsltproc</code> で確認する。</p>

<h3>5. HTML ファイルの確認</h3>

<p>&ldquo;test.html&rdquo; というファイルが作成されているはずなので、確認してみる。</p>

<pre><code class="html test.html">&lt;html lang="ja"&gt;&lt;body&gt;
  &lt;table&gt;
    &lt;tr&gt;
&lt;td&gt;1234&lt;/td&gt;
&lt;td&gt;Ruby 太郎&lt;/td&gt;
&lt;td&gt;1980-01-01&lt;/td&gt;
&lt;/tr&gt;
    &lt;tr&gt;
&lt;td&gt;2345&lt;/td&gt;
&lt;td&gt;XML 二郎&lt;/td&gt;
&lt;td&gt;1985-04-15&lt;/td&gt;
&lt;/tr&gt;
    &lt;tr&gt;
&lt;td&gt;3456&lt;/td&gt;
&lt;td&gt;XSL 花子&lt;/td&gt;
&lt;td&gt;1990-09-30&lt;/td&gt;
&lt;/tr&gt;
  &lt;/table&gt;
&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>さらに、この HTML ファイルをブラウザで開いて確認してみる。</p>

<p><img src="/images/2015/09/07/XSLTPROC.png" title="XSLTPROC" alt="XSLTPROC" /></p>

<hr />

<p>単に XML ファイルに XSL テンプレートを適用して HTML ファイルを作成するだけなら、今回の方法が楽でいいかもしれませんね。</p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
