<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: プログラミング | mk-mode BLOG]]></title>
  <link href="http://komasaru.github.io/blog/categories/プログラミング/atom.xml" rel="self"/>
  <link href="http://komasaru.github.io/"/>
  <updated>2016-02-06T00:08:25+09:00</updated>
  <id>http://komasaru.github.io/</id>
  <author>
    <name><![CDATA[mk-mode.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - Flightradar24 から空港情報一覧取得！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/06/ruby-getting-airport-list-from-fr24/"/>
    <updated>2016-02-06T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/06/ruby-getting-airport-list-from-fr24</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>航空機の運行状況をリアルタイムで確認できる Web サイト <a href="http://www.flightradar24.com" title="Flightradar24.com - Live flight tracker!">Flightradar24.com</a> に登録されている空港情報の一覧を Ruby で取得してみました。（と言っても、 JSON データを取得しているだけですが）</p>

<p>（<strong>当ページ内の Flightradar24.com のリンクはうまく接続できないかもしれません。その場合は URL をブラウザにコピペしてみてください。</strong>）</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Ruby 2.2.4-p230 での作業を想定。</li>
<li>世界中の全空港を網羅している訳ではない。（例えば、島根県の隠岐空港や萩・石見空港のような規模の小さい(?)空港の情報は登録されていない）</li>
</ul>


<h3>1. Ruby スクリプトの作成</h3>

<p>難しいことはしていないので、説明は省略する。<br/>
ただ、悪質な Bot でないことを主張するために連絡先を User Agent に設定している。（伏字は適宜置き換えること）</p>

<pre><code class="ruby fr24_airports.rb">#! /usr/local/bin/ruby
# coding: utf-8
#---------------------------------------------------------------------------------
#= Flightradar24 空港情報取得
#
# date          name            version
# 2015.12.20    mk-mode.com     1.00 新規作成
#
# Copyright(C) 2015 mk-mode.com All Rights Reserved.
#---------------------------------------------------------------------------------
#++
require 'json'
require 'open-uri'
require 'timeout'

class Fr24Airports
  URL        = "http://www.flightradar24.com/_json/airports.php"  # 接続先 URL
  TIMEOUT    = 10                                                 # OpenURI 接続時のタイムアウト
  USER_AGENT = "xxxxxxx Bot (by Ruby/#{RUBY_VERSION}, Administrator: xxxxxxxx@yyyyyyy.zzz)"
                                                                  # OpenURI 接続時の User-Agent, Mail Address
  FILE_PATH  = "./data/airports"                                  # 保存ファイル

  def exec
    get_json        # JSON 取得
    save_file       # ファイル保存 (見やすく整形したものがよければこちら)
    #save_file_csv  # ファイル保存（CSV 形式がよければこちら）
  rescue =&gt; e
    $stderr.puts "[#{e.class}] #{e.message}"
    e.backtrace.each { |tr| $stderr.puts "\t#{tr}" }
    exit 1
  end

private

  # JSON 取得
  def get_json
    str = nil
    timeout(TIMEOUT) do
      str = open(URL, {"User-Agent" =&gt; USER_AGENT}) { |f| f.read }
    end
    @json = JSON.parse(str)["rows"].sort_by { |j| [j["country"], j["iata"]] }
  rescue =&gt; e
    raise
  end

  # ファイル保存
  # * 最大文字数（country: 32, name: 63）
  # * name の末尾に改行コードが含まれていることがあるので chomp している
  def save_file
    File.open("#{FILE_PATH}.txt", "w") do |f|
      str =  "COUNTRY" + " " * 27 + "IATA  ICAO  NAME" + " " * 68
      str &lt;&lt; "LAT          LON    ALT"
      f.puts str
      @json.each do |j|
        str =  sprintf("%-32s  %3s   %4s", j["country"], j["iata"], j["icao"])
        str &lt;&lt; sprintf("  %-63s", j["name"].chomp)
        str &lt;&lt; sprintf("  %10.6f", j["lat"].to_f)
        str &lt;&lt; sprintf("  %11.6f", j["lon"].to_f)
        str &lt;&lt; sprintf("  %5d", j["alt"].to_i)
        f.puts str
      end
    end
  rescue =&gt; e
    raise
  end

  # ファイル保存（CSV 形式）
  # * 最大文字数（country: 32, name: 63）
  # * name の末尾に改行コードが含まれていることがあるので chomp している
  # * カンマが含まれる可能性のある country, name のみ "" でくくっている
  def save_file_csv
    File.open("#{FILE_PATH}.csv", "w") do |f|
      f.puts "COUNTRY,IATA,ICAO,NAME,LAT,LON,ALT"
      @json.each do |j|
        str =  "\"#{j["country"]}\",#{j["iata"]},#{j["icao"]},\"#{j["name"].chomp}\","
        str &lt;&lt; "#{j["lat"]},#{j["lon"]},#{j["alt"]}"
        f.puts str
      end
    end
  rescue =&gt; e
    raise
  end
end

Fr24Airports.new.exec
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/75bd0abfbe95814c50bb" title="Gist - Ruby script to get a airport list from Flightradar24.">Gist - Ruby script to get a airport list from Flightradar24.</a></li>
</ul>


<h3>2. Ruby スクリプトの実行</h3>

<p>Ruby スクリプトと同じディレクトリ内に &ldquo;data&rdquo; ディレクトリを作成後、以下を実行。</p>

<pre><code class="text">$ ./fr24_airports.rb
</code></pre>

<h3>3. データの確認</h3>

<p>&ldquo;data&rdquo; ディレクトリ内に &ldquo;airports.txt&rdquo; が作成されるので確認してみる。</p>

<pre><code class="text data/airports.txt">COUNTRY                           IATA  ICAO  NAME                                                                    LAT          LON    ALT
Afghanistan                       KBL   OAKB  Kabul International Airport                                       34.565842    69.212410   5871
Afghanistan                       MZR   OAMS  Mazar-I-Sharif International Airport                              36.706909    67.209671   1284
Albania                           TIA   LATI  Tirana International Airport                                      41.414742    19.720560    126
Algeria                           AAE   DABB  Annaba Rabah Bitat Airport                                        36.822220     7.809167     16
Algeria                           ALG   DAAG  Algiers Houari Boumediene Airport                                 36.691010     3.215408     82
Algeria                           BJA   DAAE  Bejaia Soummam Airport                                            36.711990     5.069922     20
Algeria                           CFK   DAOI  Chlef International Airport                                       36.212223     1.331667    469
Algeria                           CZL   DABC  Constantine Mohamed Boudiaf International Airport                 36.276020     6.620386   2316
Algeria                           GJL   DAAV  Jijel Ferhat Abbas Airport                                        36.795132     5.873608     36
Algeria                           ORN   DAOO  Oran Es Senia Airport                                             35.623852    -0.621180    299
         :
====&lt; 以下省略 &gt;====
         :
</code></pre>

<p>CSV 形式で出力した場合は &ldquo;airports.csv&rdquo; を確認してみる。</p>

<pre><code class="text data/airports.csv">COUNTRY,IATA,ICAO,NAME,LAT,LON,ALT
"Afghanistan",KBL,OAKB,"Kabul International Airport",34.565842,69.212410,5871
"Afghanistan",MZR,OAMS,"Mazar-I-Sharif International Airport",36.706909,67.209671,1284
"Albania",TIA,LATI,"Tirana International Airport",41.414742,19.720560,126
"Algeria",AAE,DABB,"Annaba Rabah Bitat Airport",36.822220,7.809167,16
"Algeria",ALG,DAAG,"Algiers Houari Boumediene Airport",36.691010,3.215408,82
"Algeria",BJA,DAAE,"Bejaia Soummam Airport",36.711990,5.069922,20
"Algeria",CFK,DAOI,"Chlef International Airport",36.212223,1.331667,469
"Algeria",CZL,DABC,"Constantine Mohamed Boudiaf International Airport",36.276020,6.620386,2316
"Algeria",GJL,DAAV,"Jijel Ferhat Abbas Airport",36.795132,5.873608,36
"Algeria",ORN,DAOO,"Oran Es Senia Airport",35.623852,-0.621180,299
         :
====&lt; 以下省略 &gt;====
         :
</code></pre>

<h3>4. 関係のある過去の記事</h3>

<ul>
<li><a href="/2014/03/27/ruby-noaa-weather-stations/" title="Ruby - NOAA（アメリカ海洋大気庁）気象観測所一覧！">Ruby - NOAA（アメリカ海洋大気庁）気象観測所一覧！</a></li>
<li><a href="/2014/03/28/bash-getting-a-weather-station-noaa/" title="Bash - NOAA 気象観測所検索！">Bash - NOAA 気象観測所検索！</a></li>
<li><a href="/2014/03/30/bash-getting-a-metar/" title="Bash - METAR 気象情報取得！">Bash - METAR 気象情報取得！</a></li>
</ul>


<h3>5. その他</h3>

<p>&ldquo;<a href="http://www.flightradar24.com" title="Flightradar24.com - Live flight tracker!">Flightradar24.com</a>&rdquo; が提供するリアルタイムの航空機の飛行情報も、調査に調査を重ねて取得できるようになりました。（後日紹介）</p>

<p>ちなみに、Web 検索するとリアルタイム飛行情報を取得する方法についてある程度はヒットしますが、その９割くらいは情報が古いです。</p>

<hr />

<p>全ての空港が網羅されていればうれしいのですが。。。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - ３次スプライン補間！]]></title>
    <link href="http://komasaru.github.io/blog/2016/01/12/ruby-spline-interpolation/"/>
    <updated>2016-01-12T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/01/12/ruby-spline-interpolation</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>過去に「ラグランジュ補間」や「ニュートン補間」を C++ や Ruby で実装したことがありました。</p>

<ul>
<li><a href="/2013/03/10/cpp-interpolate-lagrange/" title="C++ - ラグランジュ補間！ - mk-mode BLOG">C++ - ラグランジュ補間！ - mk-mode BLOG</a></li>
<li><a href="/2013/03/11/ruby-interpolate-lagrange/" title="Ruby - ラグランジュ補間！ - mk-mode BLOG">Ruby - ラグランジュ補間！ - mk-mode BLOG</a></li>
<li><a href="/2013/03/13/cpp-interpolate-newton/" title="C++ - ニュートン補間！ - mk-mode BLOG">C++ - ニュートン補間！ - mk-mode BLOG</a></li>
<li><a href="/2013/03/14/ruby-interpolate-newton/" title="Ruby - ニュートン補間！ - mk-mode BLOG">Ruby - ニュートン補間！ - mk-mode BLOG</a></li>
</ul>


<p>今回は「３次スプライン補間」を Ruby で実装してみました。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Ruby 2.2.3-p173 での作業を想定。</li>
<li>グラフも描画するので、RubyGems ライブラリの gnuplot をインストールしておく。</li>
</ul>


<h3>1. ３次スプライン補間について</h3>

<p><a href="http://akita-nct.jp/yamamoto/lecture/2007/5E_comp_app/interpolation/interpolation_html/node3.html" title="3 スプライン補間">こちらの内容</a>を自分なりに理解して以下のようにまとめた。</p>

<p>（数式が多いので別途 <script type="math/tex">\LaTeX</script> で記載した文書を貼り付け）</p>

<p><img src="/images/2016/01/12/SPLINE_INTERPOLATION_1.png" title="SPLINE_INTERPOLATION_1" alt="SPLINE_INTERPOLATION_1" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_2.png" title="SPLINE_INTERPOLATION_2" alt="SPLINE_INTERPOLATION_2" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_3.png" title="SPLINE_INTERPOLATION_3" alt="SPLINE_INTERPOLATION_3" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_4.png" title="SPLINE_INTERPOLATION_4" alt="SPLINE_INTERPOLATION_4" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_5.png" title="SPLINE_INTERPOLATION_5" alt="SPLINE_INTERPOLATION_5" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_6.png" title="SPLINE_INTERPOLATION_6" alt="SPLINE_INTERPOLATION_6" /></p>

<p>（上記文書の PDF は<a href="http://www.mk-mode.com/rails/docs/INTERPOLATION_SPLINE.pdf" title="３次スプライン補間.pdf（Ａ４・４ページ）">こちら</a>）</p>

<h3>2. Ruby スクリプトの作成</h3>

<p>以下のような Ruby スクリプトを作成する。<br/>
ロジックは前項の説明（アルゴリズム）どおりなので説明しない。（ただ、連立一次方程式の解法には「<a href="/2013/09/21/ruby-simultaneous-equation-by-gauss-jorden/" title="Ruby - 連立方程式解法（ガウス・ジョルダン法）！">ガウス・ジョルダン法</a>」を使用した）</p>

<pre><code class="ruby spline_interpolation.rb">#!/usr/local/bin/ruby
# coding: utf-8
#*********************************************
# ３次スプライン補間
# （gnuplot によるグラフ描画付き）
#*********************************************
#
require 'gnuplot'

# N + 1 個の点
X = [0.0, 2.0, 3.0, 5.0, 7.0, 8.0]
Y = [0.8, 3.2, 2.8, 4.5, 2.5, 1.9]

class SplineInterpolation
  def initialize
    @x, @y = X, Y
    @n = @x.size - 1
    h = calc_h
    w = calc_w(h)
    matrix = gen_matrix(h, w)
    v = [0, gauss_jordan(matrix), 0].flatten
    @b = calc_b(v)
    @a = calc_a(v)
    @d = calc_d(v)
    @c = calc_c(v)
  end

  def interpolate(t)
    i = search_i(t)
    s  = @a[i] * (t - @x[i]) ** 3
    s += @b[i] * (t - @x[i]) ** 2
    s += @c[i] * (t - @x[i])
    s += @d[i]
    return s
  rescue =&gt; e
    $stderr.puts "[#{e.class}] #{e.message}"
    exit 1
  end

  private

  def calc_h
    h = Array.new
    0.upto(@n - 1) { |i| h &lt;&lt; @x[i + 1] - @x[i] }
    return h
  end

  def calc_w(h)
    w = Array.new
    1.upto(@n - 1) do |i|
      w &lt;&lt; 6 * ((@y[i + 1] - @y[i]) / h[i] - (@y[i] - @y[i - 1]) / h[i - 1])
    end
    return w
  end

  def gen_matrix(h, w)
    matrix = Array.new(@n - 1).map { Array.new(@n, 0) }
    0.upto(@n - 2) do |i|
      matrix[i][i]     = 2 * (h[i] + h[i + 1])
      matrix[i][-1]    = w[i]
      next if i == 0
      matrix[i - 1][i] = h[i]
      matrix[i][i - 1] = h[i]
      matrix[i][i - 1] = h[i]
    end
    return matrix
  end

  def gauss_jordan(matrix)
    v = Array.new
    n = @n - 1
    0.upto(n - 1) do |k|
      p = matrix[k][k]
      k.upto(n) { |j| matrix[k][j] = matrix[k][j] / p.to_f }
      0.upto(n - 1) do |i|
        unless i == k
          d = matrix[i][k]
          k.upto(n) { |j| matrix[i][j] = matrix[i][j] - d * matrix[k][j] }
        end
      end
    end
    matrix.each { |row| v &lt;&lt; row[-1] }
    return v
  end

  def calc_a(v)
    a = Array.new
    0.upto(@n - 1) { |i| a &lt;&lt; (v[i + 1] - v[i]) / (6 * (@x[i + 1] - @x[i])) }
    return a
  end

  def calc_b(v)
    b = Array.new
    0.upto(@n - 1) { |i| b &lt;&lt; v[i] / 2.0 }
    return b
  end

  def calc_c(v)
    c = Array.new
    0.upto(@n - 1) do |i|
      c &lt;&lt; (@y[i + 1] - @y[i]) / (@x[i + 1] - @x[i]) \
         - (@x[i + 1] - @x[i]) * (2 * v[i] + v[i + 1]) / 6
    end
    return c
  end

  def calc_d(v)
    return @y[0..-1]
  end

  def search_i(t)
    i, j = 0, j = @x.size - 1
    while i &lt; j
      k = (i + j) / 2
      if @x[k] &lt; t
        i = k + 1
      else
        j = k
      end
    end
    i -= 1 if i &gt; 0
    return i
  end
end

class Graph
  def initialize(x_g, y_g)
    @x_g, @y_g, @x, @y = x_g, y_g, X, Y
  end

  def plot
    Gnuplot.open do |gp|
      Gnuplot::Plot.new(gp) do |plot|
        plot.terminal "png enhanced font 'IPA P ゴシック' fontscale 1.2"
        plot.output   "spline_interpolation.png"
        plot.title    "スプライン補間"
        plot.xlabel   "x"
        plot.ylabel   "y"
        plot.grid

        # 計算によって得られた点
        plot.data &lt;&lt; Gnuplot::DataSet.new([@x_g, @y_g]) do |ds|
          ds.with      = "points"
          ds.linewidth = 2
          ds.linecolor = 3
          ds.notitle
        end

        # 予め与えらた点
        plot.data &lt;&lt; Gnuplot::DataSet.new([@x, @y]) do |ds|
          ds.with      = "points"
          ds.linewidth = 2
          ds.linecolor = 1
          ds.notitle
        end
      end
    end
  rescue =&gt; e
    $stderr.puts "[#{e.class}] #{e.message}"
    exit 1
  end
end

# グラフ用配列
x_g, y_g = Array.new, Array.new

# ３次スプライン補間
obj = SplineInterpolation.new
X[0].step(X[-1], 0.1) do |x|
  y = obj.interpolate(x)
  printf("%8.4f, %8.4f\r\n", x, y)
  x_g &lt;&lt; x
  y_g &lt;&lt; y
end

# グラフ描画
Graph.new(x_g, y_g).plot
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/01b9a98af2a6cae0a5df" title="Gist - Ruby script to calc 3D-Spline-Interpolation.">Gist - Ruby script to calc 3D-Spline-Interpolation.</a></li>
</ul>


<h3>3. Ruby スクリプトの実行</h3>

<pre><code class="text">$ ./spline_interpolation.rb
  0.0000,   0.8000
  0.1000,   0.9861
  0.2000,   1.1713
  0.3000,   1.3544
  0.4000,   1.5346
  0.5000,   1.7108
  0.6000,   1.8820
  0.7000,   2.0473
  0.8000,   2.2056
  0.9000,   2.3559
  1.0000,   2.4973
  1.1000,   2.6287
  1.2000,   2.7492
  1.3000,   2.8578
  1.4000,   2.9534
  1.5000,   3.0351
  1.6000,   3.1019
  1.7000,   3.1528
  1.8000,   3.1868
  1.9000,   3.2028
  2.0000,   3.2000
  2.1000,   3.1782
     :         :
====&lt; 途中省略&gt;====
     :         :
  7.5000,   2.1279
  7.6000,   2.0754
  7.7000,   2.0275
  7.8000,   1.9831
  7.9000,   1.9410
  8.0000,   1.9000
</code></pre>

<h3>4. グラフ確認</h3>

<p>Ruby スクリプトと同じディレクトリ内に &ldquo;spline_interpolation.png&rdquo; という画像ファイルが存在するはずなので、確認してみる。<br/>
（赤色の <code>x</code> が予め与えられた点、水色の <code>+</code> が補間された点）</p>

<p><img src="/images/2016/01/12/spline_interpolation.png" title="SPLINE_INTERPOLATION" alt="SPLINE_INTERPOLATION" /></p>

<h3>5. 参考サイト</h3>

<ul>
<li><a href="http://akita-nct.jp/yamamoto/lecture/2007/5E_comp_app/interpolation/interpolation_html/node3.html" title="3 スプライン補間">スプライン補間</a></li>
<li><a href="/2013/09/21/ruby-simultaneous-equation-by-gauss-jorden/" title="Ruby - 連立方程式解法（ガウス・ジョルダン法）！">ガウス・ジョルダン法</a></li>
</ul>


<hr />

<p>スプライン補間ができないと先に進めない（私的な）事案があったために今回まとめてみた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - Nokogiri による XML 解析の速度検証！]]></title>
    <link href="http://komasaru.github.io/blog/2015/09/22/ruby-verify-xml-parsing-by-nokogiri/"/>
    <updated>2015-09-22T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/09/22/ruby-verify-xml-parsing-by-nokogiri</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Ruby で HTML/XML パーサの Nokogiri を使用して XML を解析する際、名前空間(Namespace)が宣言されている場合は厳密に指定する必要があるものだと考えております。</p>

<p>しかし、実際は名前空間を指定せずに解析することも可能です。<br/>
（実際、 XML 内の名前空間を削除するメソッドも用意されています。しかし、そのメソッドは名前空間について理解していない人のためのものであり、一般的には使用すべきではありません）</p>

<p>今回は、各種方法で解析し、どの方法が高速であるかを検証してみました。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Ruby 2.2.3-p173 での作業を想定。</li>
<li>以下で紹介する検証結果は、使用する XML の構造等により若干異なることもあるかもしれない、ということに留意。</li>
</ul>


<h3>1. 検証に使用する XML ファイル</h3>

<p>以下のような XML を使用する。（実際の「気象庁防災情報 XML」通知用 Atom フィードを流用。情報の内容は24時間以内に <code>link</code> タグ内の URL にアクセスして得ることになっている）</p>

<pre><code class="xml test_nokogiri.xml">&lt;?xml version="1.0" encoding="utf-8"?&gt;
&lt;feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ja"&gt;
&lt;title&gt;JMAXML publishing feed&lt;/title&gt;
&lt;subtitle&gt;this feed is published by JMA&lt;/subtitle&gt;
&lt;updated&gt;2015-08-27T17:28:02+09:00&lt;/updated&gt;
&lt;id&gt;urn:uuid:d38e0e80-12ba-3236-b10f-256b78a08995&lt;/id&gt;
&lt;link href="http://www.jma.go.jp/" rel="related"/&gt;
&lt;link href="http://xml.kishou.go.jp/feed/other.xml" rel="self"/&gt;
&lt;rights&gt;Published by Japan Meteorological Agency&lt;/rights&gt;

&lt;entry&gt;
&lt;title&gt;地方海上警報&lt;/title&gt;
&lt;id&gt;urn:uuid:ac97395c-e388-33a9-922f-ab2a32e61bb1&lt;/id&gt;
&lt;updated&gt;2015-08-27T08:27:18Z&lt;/updated&gt;
&lt;author&gt;&lt;name&gt;新潟地方気象台&lt;/name&gt;&lt;/author&gt;
&lt;link href="http://xml.kishou.go.jp/data/ac97395c-e388-33a9-922f-ab2a32e61bb1.xml" type="application/xml"/&gt;
&lt;content type="text"&gt;【新潟海上気象】&lt;/content&gt;
&lt;/entry&gt;
&lt;entry&gt;
&lt;title&gt;地方海上警報&lt;/title&gt;
&lt;id&gt;urn:uuid:b42a06f2-a6f0-351a-a8c4-3619a847f66d&lt;/id&gt;
&lt;updated&gt;2015-08-27T08:27:02Z&lt;/updated&gt;
&lt;author&gt;&lt;name&gt;仙台管区気象台&lt;/name&gt;&lt;/author&gt;
&lt;link href="http://xml.kishou.go.jp/data/b42a06f2-a6f0-351a-a8c4-3619a847f66d.xml" type="application/xml"/&gt;
&lt;content type="text"&gt;【仙台海上気象】&lt;/content&gt;
&lt;/entry&gt;
&lt;entry&gt;
&lt;title&gt;紫外線観測データ&lt;/title&gt;
&lt;id&gt;urn:uuid:f27e93c8-ff97-376d-b3b0-5307d07e4a24&lt;/id&gt;
&lt;updated&gt;2015-08-27T08:27:10Z&lt;/updated&gt;
&lt;author&gt;&lt;name&gt;気象庁地球環境・海洋部&lt;/name&gt;&lt;/author&gt;
&lt;link href="http://xml.kishou.go.jp/data/f27e93c8-ff97-376d-b3b0-5307d07e4a24.xml" type="application/xml"/&gt;
&lt;content type="text"&gt;【紫外線観測データ】&lt;/content&gt;
&lt;/entry&gt;
&lt;/feed&gt;
</code></pre>

<h3>2. 検証用 Ruby スクリプトの作成</h3>

<ul>
<li>以下のスクリプト内で指定する名前空間は、 &ldquo;text_nokogiri.xml&rdquo; 内で宣言されているものと同じ。</li>
<li><code>entry</code> ノードをループし、各 <code>title</code> ノードのテキストを取得するだけの簡単な処理を 10,000 回繰り返す。</li>
<li>今回は７種類（スクリプト内コメント参照）の解析方法で検証する。</li>
<li>以下のスクリプト内の XPath での「Namespace 指定なし」とは、 Nokogiri での厳密な指定をしないという意味。</li>
</ul>


<pre><code class="ruby test_nokogiri_xml.rb">#! /usr/local/bin/ruby
# coding: utf-8
#
# Ruby script to verify the speed of xml parsing by Nokogiri.
#
#++
require 'benchmark'
require 'nokogiri'

class TestNokogiriXml
  def initialize
    @xml  = Nokogiri::XML(File.read("test_nokogiri.xml"))
    @secs = 10000
    @ns   = {"a" =&gt; "http://www.w3.org/2005/Atom"}
  end

  def exec
    # 1. css メソッド(CSS セレクタ)による解析
    printf("CASE-1: %.4f secs.\n", case_1)

    # 2. search メソッド(CSS セレクタ)による解析
    printf("CASE-2: %.4f secs.\n", case_2)

    # 3. search メソッド(XPath, Namespace 指定なし)による解析
    printf("CASE-3: %.4f secs.\n", case_3)

    # 4. / メソッド(CSS セレクタ)による解析
    printf("CASE-4: %.4f secs.\n", case_4)

    # 5. / メソッド(XPath, Namespace 指定なし)による解析
    printf("CASE-5: %.4f secs.\n", case_5)

    # 6. xpath メソッド(XPath, Namespace 指定なし)による解析
    printf("CASE-6: %.4f secs.\n", case_6)

    # 7. xpath メソッド(XPath, Namespace 指定あり)による解析
    printf("CASE-7: %.4f secs.\n", case_7)
  rescue =&gt; e
    $stderr.puts "[#{self.class.name}.#{__method__}] #{e}"
    e.backtrace.each{ |tr| $stderr.puts "\t#{tr}" }
    exit 1
  end

  private

  def case_1
    return Benchmark.realtime do
      @secs.times do |i|
        @xml.css("entry").each do |e|
          title = e.css("title").first.text
        end
      end
    end
  rescue =&gt; e
    raise
  end

  def case_2
    return Benchmark.realtime do
      @secs.times do |i|
        @xml.search("entry").each do |e|
          title = e.search("title").first.text
        end
      end
    end
  rescue =&gt; e
    raise
  end

  def case_3
    return Benchmark.realtime do
      @secs.times do |i|
        @xml.search("//xmlns:entry").each do |e|
          title = e.search("./xmlns:title").first.text
        end
      end
    end
  rescue =&gt; e
    raise
  end

  def case_4
    return Benchmark.realtime do
      @secs.times do |i|
        (@xml/"entry").each do |e|
          title = (e/"title").first.text
        end
        # 以下でも同様。しかし、ごく少し遅い。
        #(@xml/:entry).each do |e|
        #  title = (e/:title).first.text
        #end
      end
    end
  rescue =&gt; e
    raise
  end

  def case_5
    return Benchmark.realtime do
      @secs.times do |i|
        (@xml/"//xmlns:entry").each do |e|
          title = (e/"./xmlns:title").first.text
        end
      end
    end
  rescue =&gt; e
    raise
  end

  def case_6
    return Benchmark.realtime do
      @secs.times do |i|
        @xml.xpath("//xmlns:entry").each do |e|
          title = e.xpath("xmlns:title").first.text
        end
      end
    end
  rescue =&gt; e
    raise
  end

  def case_7
    return Benchmark.realtime do
      @secs.times do |i|
        @xml.xpath("//a:entry", @ns).each do |e|
          title = e.xpath("a:title", @ns).first.text
        end
      end
    end
  rescue =&gt; e
    raise
  end
end

TestNokogiriXml.new.exec
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/1f737b67baba38213570" title="Gist - Ruby script to verify the speed of xml parsing by Nokogiri. ">Gist - Ruby script to verify the speed of xml parsing by Nokogiri. </a></li>
</ul>


<h3>3. Ruby スクリプトの実行</h3>

<pre><code class="text">$ ./test.rb
CASE-1: 2.3432 secs.
CASE-2: 2.4821 secs.
CASE-3: 2.0588 secs.
CASE-4: 2.4949 secs.
CASE-5: 2.0672 secs.
CASE-6: 1.7549 secs.
CASE-7: 1.5359 secs.
</code></pre>

<h3>4. 検証結果について</h3>

<ul>
<li>何回か実行してみたが、全て同じような結果となった。</li>
<li><code>xpath</code> メソッドは <code>css</code>, <code>search</code>, <code>/</code> メソッドより高速に解析することができる。</li>
<li><code>xpath</code> メソッドで厳密に名前空間を指定した方が、指定せずに解析するより高速である。</li>
<li>要は、XML を解析する際は <code>xpath</code> メソッドで名前空間を指定しましょう、ということ。</li>
<li>今回の検証結果が全てという訳ではない（場合によっては「一概には言えない」ということがあるかもしれない）</li>
</ul>


<hr />

<p>当方、以前は CSS セレクタを使用して XML 解析を行なっていた時期もありましたが、現在は XPath で厳密に名前空間を指定して解析を行うようにしています。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - dRuby でジョブキューサーバ構築！]]></title>
    <link href="http://komasaru.github.io/blog/2015/08/29/ruby-job-queue-server-construction-by-druby/"/>
    <updated>2015-08-29T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/08/29/ruby-job-queue-server-construction-by-druby</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>前回に引き続き、Ruby の分散オブジェクトプログラミングするためのライブラリ dRuby についての内容です。</p>

<p>今回は、 dRuby を利用してジョブキューサーバ＆クライアントを構築してみました。</p>

<p>要は、キューに順次プッシュした内容をクライアント側から順次ポップする仕組みのことです。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>Ruby 2.2.3-p173 での作業を想定。</li>
<li>本来は複数のマシンで実行することが多いと思うが、今回は１つのマシンでテストする。</li>
<li>dRuby の簡単な使用例は「<a href="/2015/08/25/ruby-distributed-processing-by-druby" title="Ruby - dRuby で分散処理！">Ruby - dRuby で分散処理！</a>」を参照。</li>
</ul>


<h3>1. サーバ側スクリプトの作成例</h3>

<p>Queue オブジェクトを生成して待ち受けるのみの簡単なスクリプト。</p>

<pre><code class="ruby queue_server.rb">#!/usr/local/bin/ruby
# codeing: utf-8
require 'drb/drb'

q = Queue.new
DRb.start_service("druby://localhost:8787", q, safe_level: 1)
DRb.thread.join
</code></pre>

<ul>
<li><code>start_service</code> の <code>safe_level</code> を <code>1</code> に設定しているのは、 <code>instance_eval</code> による危険性を防ぐための処置。</li>
</ul>


<h3>2. クライアント側 Pop スクリプトの作成例</h3>

<p>キューサーバから順次ポップして5秒後にコンソール出力するのみの簡単なスクリプト。（キューに溜め込まれるデータは時刻文字列を想定している）</p>

<pre><code class="ruby pop_client.rb">#!/usr/local/bin/ruby
# coding: utf-8
require 'drb/drb'

obj = DRbObject.new_with_uri("druby://localhost:8787")
loop do |a|
  tm = obj.pop
  sleep 5
  puts "Received at #{tm}."
end
</code></pre>

<h3>3. クライアント側 Push スクリプトの作成例</h3>

<p>キューサーバへ現在時刻の文字列をプッシュするのみの簡単なスクリプト。</p>

<pre><code class="ruby push_client.rb">#! /usr/local/bin/ruby
# coding: utf-8
require 'drb/drb'

obj = DRbObject.new_with_uri("druby://localhost:8787")
tm = Time.now.strftime("%Y-%m-%d %H:%M:%S")
obj.push tm
puts "Sended at #{tm}."
</code></pre>

<h3>4. 動作確認</h3>

<p>まず、１つ目の端末を立ち上げて、サーバ側スクリプトを実行する。</p>

<pre><code class="text">$ ./queue_server.rb
</code></pre>

<p>次に、２つ目の端末を立ち上げて、クライアント側 Pop スクリプトを実行する。</p>

<pre><code class="text">$ ./pop_client.rb
</code></pre>

<p>最後に、３つ目の端末を立ち上げて、クライアント側 Push スクリプトを何度も連続して実行してみる。</p>

<pre><code class="text">$ ./push_client.rb
Sended at 2015-07-28 23:34:02.
$ ./push_client.rb
Sended at 2015-07-28 23:34:03.
$ ./push_client.rb
Sended at 2015-07-28 23:34:03.
$ ./push_client.rb
Sended at 2015-07-28 23:34:04.
$ ./push_client.rb
Sended at 2015-07-28 23:34:04.
</code></pre>

<p>すると、２つ目の Pop クライアントの端末に５秒間隔で出力がなされるはずである。</p>

<pre><code class="text">$ ./pop_client.rb
Received at 2015-07-28 23:34:02.
Received at 2015-07-28 23:34:03.
Received at 2015-07-28 23:34:03.
Received at 2015-07-28 23:34:04.
Received at 2015-07-28 23:34:04.
</code></pre>

<h3>5. 注意</h3>

<ul>
<li>dRuby で構築したサーバをインターネットで外部に公開すべきではない。</li>
<li>ローカルで使用する際もセキュリティ面に注意する。</li>
</ul>


<h3>6. 参考サイト</h3>

<ul>
<li><a href="http://docs.ruby-lang.org/ja/2.2.0/library/drb.html" title="library drb(Ruby2.2.0)">library drb(Ruby2.2.0)</a></li>
</ul>


<hr />

<p>当方、一度に並列で処理をされては困るような場合に、この仕組みを応用して順次処理を行うようにしています。<br/>
（インターネット上からデータが配信されたら処理を行うようなシステムの場合に、データが集中的に配信されてもマシンに負荷をかけないようにするため）</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - dRuby で分散処理！]]></title>
    <link href="http://komasaru.github.io/blog/2015/08/25/ruby-distributed-processing-by-druby/"/>
    <updated>2015-08-25T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/08/25/ruby-distributed-processing-by-druby</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>dRuby とは、 Ruby で分散オブジェクトプログラミングするためのライブラリです。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>Ruby 2.2.3-p173 での作業を想定。</li>
<li>本来は複数のマシンで実行することが多いと思うが、今回は１つのマシンでテストする。</li>
<li>特に別途インストールの必要なライブラリ等はない。</li>
</ul>


<h3>1. サーバ側スクリプトの作成例</h3>

<p>日付・時刻の文字列を返すだけの簡単な例。</p>

<pre><code class="ruby druby_server.rb">#!/usr/local/bin/ruby
# coding: utf-8
require 'drb/drb'

# 通信を待ち受ける URI
URI="druby://localhost:8787"

class DrubyServer
  def get_cur_time
    cur_time = Time.now.strftime("%Y年%m月%d日 %H時%M分%S秒")
    msg = "ただいま #{cur_time} です。"
    puts msg
    return msg
  end
end

# リクエストを受け付けるオブジェクト
obj = DrubyServer.new
# サーバの起動
DRb.start_service(URI, obj, safe_level: 1)
# DRb スレッド終了の待ち受け
DRb.thread.join
</code></pre>

<ul>
<li><code>start_service</code> の <code>safe_level</code> を <code>1</code> に設定しているのは、 <code>instance_eval</code> による危険性を防ぐための処置。</li>
</ul>


<h3>2. クライアント側スクリプトの作成例</h3>

<p>サーバのメソットを呼び出す簡単な例。</p>

<pre><code class="ruby druby_client.rb">#!/usr/local/bin/ruby
# coding: utf-8
require 'drb/drb'

# 接続先 URI
URI="druby://localhost:8787"

# リモートオブジェクトの取得
obj = DRbObject.new_with_uri(URI)
# リモートメソッドの呼び出し
puts obj.get_cur_time
</code></pre>

<h3>3. 動作確認</h3>

<p>まず、１つ目の端末を立ち上げて、サーバ側スクリプトを実行する。</p>

<pre><code class="text">$ ./druby_server.rb
</code></pre>

<p>そして、もう１つ端末を立ち上げて、クライアント側スクリプトを実行する。</p>

<pre><code class="text">$ ./druby_client.rb
ただいま 2015年07月22日 24時31分16秒 です。
$ ./druby_client.rb
ただいま 2015年07月22日 24時32分30秒 です。
</code></pre>

<p>クライアント側スクリプトを実行する度にサーバ側で処理した結果が出力されるはずである。<br/>
また、この時サーバ側の端末にも同じ出力がされるはずである。</p>

<pre><code class="text">$ ./druby_server.rb
ただいま 2015年07月22日 24時31分16秒 です。
ただいま 2015年07月22日 24時32分30秒 です。
</code></pre>

<h3>4. 注意</h3>

<ul>
<li>dRuby で構築したサーバをインターネットで外部に公開すべきではない。</li>
<li>ローカルで使用する際もセキュリティ面に注意する。</li>
</ul>


<h3>5. 参考サイト</h3>

<ul>
<li><a href="http://docs.ruby-lang.org/ja/2.2.0/library/drb.html" title="library drb (Ruby 2.2.0)">library drb (Ruby 2.2.0)</a></li>
</ul>


<hr />

<p>この dRuby による分散処理をいろいろ応用できそうです。</p>

<p>実際、目論んでいることもありますし。</p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
