<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: サーバ構築 | mk-mode BLOG]]></title>
  <link href="http://komasaru.github.io/blog/categories/サーバ構築/atom.xml" rel="self"/>
  <link href="http://komasaru.github.io/"/>
  <updated>2015-10-03T00:36:23+09:00</updated>
  <id>http://komasaru.github.io/</id>
  <author>
    <name><![CDATA[mk-mode.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Postfix - メールキューの管理！]]></title>
    <link href="http://komasaru.github.io/blog/2015/09/17/postfix-management-of-mail-queue/"/>
    <updated>2015-09-17T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/09/17/postfix-management-of-mail-queue</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>SMTP サーバ Postfix でのメールキュー管理についての備忘録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Debian GNU/Linux 8.0(64bit) 上の Postfix 2.11.3-1,<br/>
CentOS 6.7(32bit) 上の Postfix 2.6.6.-2<br/>
での作業を想定。</li>
</ul>


<h3>1. 各種コマンド</h3>

<h4>1-1. メールキューの確認</h4>

<p>配送されずに溜まっているメールキューは &ldquo;/var/spool/postfix/deferred&rdquo; ディレクトリ内にある。<br/>
それらを確認するには以下のようにする。</p>

<pre><code class="text">$ postqueue -p
-Queue ID- --Size-- ----Arrival Time---- -Sender/Recipient-------
AF70A2C009D*    1504 Sat Aug 22 23:57:39 hoge@xxxxxxxxxx.com
                                         fuga@yyyyyyyyyy.com

-- 2 Kbytes in 1 Request.
</code></pre>

<p>もしくは、</p>

<pre><code class="text">$ mailq
</code></pre>

<h4>1-2. メール内容の確認</h4>

<pre><code class="text">$ postcat -q &lt;QueueID&gt;
</code></pre>

<h4>1-3. メールキュー配送の停止</h4>

<pre><code class="text">$ postsuper -h &lt;QueueID&gt;|ALL
</code></pre>

<h4>1-4. メールキューの削除</h4>

<pre><code class="text">$ postsuper -d &lt;QueueID&gt;|ALL
</code></pre>

<p>配送が遅れいているキュー全てを削除する場合は、</p>

<pre><code class="text">$ postsuper -d ALL deferred
</code></pre>

<h4>1-5. メールキューの再送</h4>

<pre><code class="text">$ postsuper -r &lt;QueueID&gt;|ALL
</code></pre>

<p>もしくは、</p>

<pre><code class="text">$ postfix flush
</code></pre>

<p>もしくは、</p>

<pre><code class="text">postqueue -f
</code></pre>

<p>もしくは、</p>

<pre><code class="text">sendmail -q
</code></pre>

<hr />

<p>時々使用するコマンドなので、忘れたときのために記録しておいた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MariaDB(MySQL) - XML ダンプ出力から HTML テーブル定義書生成！]]></title>
    <link href="http://komasaru.github.io/blog/2015/09/12/mariadb-table-definition-from-xmldump-to-html/"/>
    <updated>2015-09-12T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/09/12/mariadb-table-definition-from-xmldump-to-html</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>MariaDB(MySQL) のテーブル定義書を HTML で生成する方法についての記録です。</p>

<p>実際には、スキーマ（テーブル定義）を XML 出力し、それに XSL テンプレートを適用します。</p>

<p>（テーブル定義を行なってからテーブルを作成するのが本来の手順でしょうが）</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>MariaDB 10.0.21 サーバでの作業を想定。</li>
<li>HTML 生成に <code>xsltproc</code> コマンドを使用するので、未インストールならインストールしておく。</li>
</ul>


<h3>1. XML ダンプ出力</h3>

<p><code>mysqldump</code> コマンドを使用してスキーマ（テーブル定義）のみを XML フォーマットで出力する。<br/>
（以下は <code>test</code> というデータベースの <code>towns</code> というテーブルを &ldquo;test_towns.xml&rdquo; という XML ファイルに出力する例）</p>

<pre><code class="text">$ mysqldump -u username -p --xml --no-data test towns &gt; test_towns.xml
</code></pre>

<p>参考までに、今回出力された XML ファイルの内容は以下のとおり。</p>

<pre><code class="xml text.xml">&lt;?xml version="1.0"?&gt;
&lt;mysqldump xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"&gt;
&lt;database name="test"&gt;
  &lt;table_structure name="towns"&gt;
    &lt;field Field="id" Type="int(11)" Null="NO" Key="PRI" Extra="auto_increment" Comment="" /&gt;
    &lt;field Field="pref_code" Type="varchar(2)" Null="NO" Key="MUL" Default="" Extra="" Comment="" /&gt;
    &lt;field Field="city_code" Type="varchar(5)" Null="NO" Key="MUL" Default="" Extra="" Comment="" /&gt;
    &lt;field Field="town_code" Type="varchar(12)" Null="NO" Key="MUL" Default="" Extra="" Comment="" /&gt;
    &lt;field Field="latitude" Type="double" Null="YES" Key="" Default="0" Extra="" Comment="" /&gt;
    &lt;field Field="longitude" Type="double" Null="YES" Key="" Default="0" Extra="" Comment="" /&gt;
    &lt;field Field="upd_datetime" Type="datetime" Null="YES" Key="" Default="0000-00-00 00:00:00" Extra="" Comment="" /&gt;
    &lt;key Table="towns" Non_unique="0" Key_name="PRIMARY" Seq_in_index="1" Column_name="id" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" /&gt;
    &lt;key Table="towns" Non_unique="1" Key_name="idx_1" Seq_in_index="1" Column_name="pref_code" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" /&gt;
    &lt;key Table="towns" Non_unique="1" Key_name="idx_1" Seq_in_index="2" Column_name="city_code" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" /&gt;
    &lt;key Table="towns" Non_unique="1" Key_name="idx_1" Seq_in_index="3" Column_name="town_code" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" /&gt;
    &lt;key Table="towns" Non_unique="1" Key_name="idx_2" Seq_in_index="1" Column_name="city_code" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" /&gt;
    &lt;key Table="towns" Non_unique="1" Key_name="idx_2" Seq_in_index="2" Column_name="town_code" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" /&gt;
    &lt;key Table="towns" Non_unique="1" Key_name="idx_3" Seq_in_index="1" Column_name="town_code" Collation="A" Cardinality="0" Null="" Index_type="BTREE" Comment="" Index_comment="" /&gt;
    &lt;options Name="towns" Engine="InnoDB" Version="10" Row_format="Compact" Rows="0" Avg_row_length="0" Data_length="16384" Max_data_length="0" Index_length="49152" Data_free="0" Auto_increment="1" Create_time="2015-08-18 14:06:07" Collation="utf8_general_ci" Create_options="" Comment="" /&gt;
  &lt;/table_structure&gt;
&lt;/database&gt;
&lt;/mysqldump&gt;
</code></pre>

<p>ちなみに、今回使用しているテーブルの CREATE 文は以下のようになっている。</p>

<pre><code class="sql">CREATE TABLE `towns` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `pref_code` varchar(2) NOT NULL DEFAULT '',
  `city_code` varchar(5) NOT NULL DEFAULT '',
  `town_code` varchar(12) NOT NULL DEFAULT '',
  `latitude` double DEFAULT '0',
  `longitude` double DEFAULT '0',
  `upd_datetime` datetime DEFAULT '0000-00-00 00:00:00',
  PRIMARY KEY (`id`),
  KEY `idx_1` (`pref_code`,`city_code`,`town_code`),
  KEY `idx_2` (`city_code`,`town_code`),
  KEY `idx_3` (`town_code`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
</code></pre>

<h3>2. XSL テンプレートの作成</h3>

<p>以下のように XSL テンプレートを作成する。（あくまで一例。必要であれば適宜編集）</p>

<pre><code class="xml">&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;xsl:stylesheet
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
  version="1.0"&gt;

  &lt;xsl:output method="html" encoding="utf-8" version="1.0" /&gt;

  &lt;xsl:template match="mysqldump"&gt;
    &lt;html&gt;
    &lt;head&gt;
      &lt;title&gt;データベース・テーブル定義&lt;/title&gt;
      &lt;style type="text/css"&gt;
        h2 {
          background-color: #8fbc8f;
          padding:          5px;
        }
        h4 {
          color:            #666;
          margin-top:       5px;
          margin-bottom:    5px;
        }
        table {
          border-collapse:  separate;
          border-spacing:   0px;
          border-top:       1px solid #ccc;
          border-left:      1px solid #ccc;
          margin-bottom:    5px;
        }
        table th {
          text-align:       left;
          vertical-align:   top;
          color:            #444;
          background-color: #ccc;
          border-top:       1px solid #fff;
          border-left:      1px solid #fff;
          border-right:     1px solid #ccc;
          border-bottom:    1px solid #ccc;
          padding:          4px;
          white-space:      nowrap;
        }
        table td {
          background-color: #fafafa;
          border-right:     1px solid #ccc;
          border-bottom:    1px solid #ccc;
          padding:          4px;
          white-space:      nowrap;
        }
        .tbl-db-name {
          margin-bottom:    10px;
        }
        .th-db-title {
          background-color: #bdb76b;
          width:            200px;
        }
        .th-tbl-title {
          width:            200px;
        }
        .td-name {
          width:            200px;
        }
        .th-no {
          width:            50px;
          text-align:       right;
        }
        .th-field,
        .th-type,
        .th-extra,
        .th-default,
        .th-comment,
        .th-keyname {
          width:            200px;
        }
        .th-null,
        .th-key {
          width:            50px;
        }
        .th-columns {
          width:            400px;
        }
        .th-nonunique {
          width:            100px;
        }
        .td-no {
          text-align:       right;
        }
      &lt;/style&gt;
    &lt;/head&gt;
    &lt;body&gt;
      &lt;h2&gt;データベース・テーブル定義書&lt;/h2&gt;
      &lt;xsl:apply-templates select="database" /&gt;
    &lt;/body&gt;
    &lt;/html&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="database"&gt;
    &lt;table class="tbl-db-name"&gt;
      &lt;tr&gt;
        &lt;th class="th-db-title"&gt;データベース名&lt;/th&gt;
        &lt;td class="td-name"&gt;&lt;xsl:value-of select="@name" /&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
    &lt;xsl:apply-templates select="table_structure" /&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template match="table_structure"&gt;
    &lt;table&gt;
      &lt;tr&gt;
        &lt;th class="th-tbl-title"&gt;テーブル名&lt;/th&gt;
        &lt;td class="td-name"&gt;&lt;xsl:value-of select="@name" /&gt;&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;

    &lt;h4&gt;カラム情報&lt;/h4&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th class="th-no"     &gt;#&lt;/th&gt;
          &lt;th class="th-field"  &gt;フィールド名&lt;/th&gt;
          &lt;th class="th-type"   &gt;データ型&lt;/th&gt;
          &lt;th class="th-null"   &gt;Null&lt;/th&gt;
          &lt;th class="th-key"    &gt;キー&lt;/th&gt;
          &lt;th class="th-extra"  &gt;Extra&lt;/th&gt;
          &lt;th class="th-default"&gt;デフォルト&lt;/th&gt;
          &lt;th class="th-comment"&gt;備考&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;xsl:for-each select="field"&gt;
        &lt;tr&gt;
          &lt;td class="td-no"&gt;&lt;xsl:value-of select="position()"/&gt;&lt;/td&gt;
          &lt;td&gt;&lt;xsl:value-of select="@Field"   /&gt;&lt;/td&gt;
          &lt;td&gt;&lt;xsl:value-of select="@Type"    /&gt;&lt;/td&gt;
          &lt;td&gt;&lt;xsl:value-of select="@Null"    /&gt;&lt;/td&gt;
          &lt;td&gt;&lt;xsl:value-of select="@Key"     /&gt;&lt;/td&gt;
          &lt;td&gt;&lt;xsl:value-of select="@Extra"   /&gt;&lt;/td&gt;
          &lt;td&gt;&lt;xsl:value-of select="@Default" /&gt;&lt;/td&gt;
          &lt;td&gt;&lt;xsl:value-of select="@Comment" /&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;/xsl:for-each&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;h4&gt;インデックス情報&lt;/h4&gt;
    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th class="th-keyname"  &gt;インデックス名&lt;/th&gt;
          &lt;th class="th-columns"  &gt;カラムリスト&lt;/th&gt;
          &lt;th class="th-nonunique"&gt;ユニーク&lt;/th&gt;
          &lt;th class="th-comment"  &gt;備考&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;xsl:for-each select="key"&gt;
          &lt;xsl:variable name="key_name" select="@Key_name" /&gt;
          &lt;xsl:if test="not(preceding-sibling::key[@Key_name=$key_name])"&gt;
          &lt;tr&gt;
            &lt;td&gt;&lt;xsl:value-of select="$key_name" /&gt;&lt;/td&gt;
            &lt;td&gt;
              &lt;xsl:for-each select="../key[@Key_name=$key_name]"&gt;
                &lt;xsl:value-of select="@Column_name"/&gt;
                &lt;xsl:if test="position()!=last()"&gt;
                  &lt;xsl:text&gt;, &lt;/xsl:text&gt;
                &lt;/xsl:if&gt;
              &lt;/xsl:for-each&gt;
            &lt;/td&gt;
            &lt;td&gt;
              &lt;xsl:choose&gt;
                &lt;xsl:when test="@Non_unique='0'"&gt;1&lt;/xsl:when&gt;
                &lt;xsl:otherwise&gt;0&lt;/xsl:otherwise&gt;
              &lt;/xsl:choose&gt;
            &lt;/td&gt;
            &lt;td&gt;&lt;xsl:value-of select="@Comment"    /&gt;&lt;/td&gt;
          &lt;/tr&gt;
          &lt;/xsl:if&gt;
        &lt;/xsl:for-each&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/xsl:template&gt;

  &lt;xsl:template name="no_increment"&gt;
    &lt;xsl:param name="no" /&gt;

    &lt;xsl:value-of select="$no + 1" /&gt;
  &lt;/xsl:template&gt;

&lt;/xsl:stylesheet&gt;
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/ecce393eb6056d4c92a7" title="Gist - XSL template to generate a HTML from a XML of MariaDB(MySQL)'s table definition.">Gist - XSL template to generate a HTML from a XML of MariaDB(MySQL)&rsquo;s table definition.</a></li>
</ul>


<h3>3. HTML の生成</h3>

<p><code>xsltproc</code> コマンドを使用して HTML を生成する。</p>

<pre><code class="text">$ xsltproc --output test_towns.html table_definition.xsl test_towns.xml
</code></pre>

<h3>4. HTML の確認</h3>

<p>生成された HTML を確認してみる。</p>

<p>``` html test_towns.html
&lt;!DOCTYPE html PUBLIC &ldquo;-//W3C//DTD HTML 4.0 Transitional//EN&rdquo; &ldquo;<a href="http://www.w3.org/TR/REC-html40/loose.dtd">http://www.w3.org/TR/REC-html40/loose.dtd</a>&rdquo;>
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
<title>データベース・テーブル定義</title></p>



<p></head>
<body></p>

<h2>データベース・テーブル定義書</h2>


<table class="tbl-db-name"><tr>
<th class="th-db-title">データベース名</th>
<td class="td-name">test</td>
</tr></table>


<table><tr>
<th class="th-tbl-title">テーブル名</th>
<td class="td-name">towns</td>
</tr></table>


<h4>カラム情報</h4>


<table>
<thead><tr>
<th class="th-no">#</th>
<th class="th-field">フィールド名</th>
<th class="th-type">データ型</th>
<th class="th-null">Null</th>
<th class="th-key">キー</th>
<th class="th-extra">Extra</th>
<th class="th-default">デフォルト</th>
<th class="th-comment">備考</th>
</tr></thead>
<tbody>
<tr>
<td class="td-no">1</td>
<td>id</td>
<td>int(11)</td>
<td>NO</td>
<td>PRI</td>
<td>auto_increment</td>
<td></td>
<td></td>
</tr>
<tr>
<td class="td-no">2</td>
<td>pref_code</td>
<td>varchar(2)</td>
<td>NO</td>
<td>MUL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td class="td-no">3</td>
<td>city_code</td>
<td>varchar(5)</td>
<td>NO</td>
<td>MUL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td class="td-no">4</td>
<td>town_code</td>
<td>varchar(12)</td>
<td>NO</td>
<td>MUL</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td class="td-no">5</td>
<td>latitude</td>
<td>double</td>
<td>YES</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
</tr>
<tr>
<td class="td-no">6</td>
<td>longitude</td>
<td>double</td>
<td>YES</td>
<td></td>
<td></td>
<td>0</td>
<td></td>
</tr>
<tr>
<td class="td-no">7</td>
<td>upd_datetime</td>
<td>datetime</td>
<td>YES</td>
<td></td>
<td></td>
<td>0000-00-00 00:00:00</td>
<td></td>
</tr>
</tbody>
</table>


<h4>インデックス情報</h4>


<table>
<thead><tr>
<th class="th-keyname">インデックス名</th>
<th class="th-columns">カラムリスト</th>
<th class="th-nonunique">ユニーク</th>
<th class="th-comment">備考</th>
</tr></thead>
<tbody>
<tr>
<td>PRIMARY</td>
<td>id</td>
<td>1</td>
<td></td>
</tr>
<tr>
<td>idx_1</td>
<td>pref_code, city_code, town_code</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>idx_2</td>
<td>city_code, town_code</td>
<td>0</td>
<td></td>
</tr>
<tr>
<td>idx_3</td>
<td>town_code</td>
<td>0</td>
<td></td>
</tr>
</tbody>
</table>


<p></body>
</html>
```</p>

<p>さらに、 HTML ファイルをブラウザで開いて確認してみる。</p>

<p><img src="/images/2015/09/12/TABLE_DEF_HTML.png" title="TABLE_DEF_HTML" alt="TABLE_DEF_HTML" /></p>

<hr />

<p>大量にテーブル定義書を生成したければシェル化するのもよいでしょう。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MariaDB(MySQL) - インデックス名一覧取得！]]></title>
    <link href="http://komasaru.github.io/blog/2015/09/03/mariadb-index-list/"/>
    <updated>2015-09-03T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/09/03/mariadb-index-list</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>MariaDB(MySQL) で作成済みのインデックスの名称を確認したい場合、 <code>SHOW INDEX FROM table_name</code> を使用することが多いと思います。</p>

<p>しかし、一度に多数のテーブルについて確認したい場合に、テーブル単位で <code>SHOW INDEX FROM table_name</code> を実行するのは大変面倒です。</p>

<p>以下で、指定データベース内の全テーブルに作成済みのインデックスを一覧表示する SQL 等を紹介します。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>MariaDB 10.0.21 での作業を想定。（MySQL でも同様のはず）</li>
</ul>


<h3>1. SQL 作成</h3>

<pre><code class="sql">  SELECT DISTINCT TABLE_SCHEMA, TABLE_NAME, INDEX_NAME
    FROM information_schema.STATISTICS
   WHERE TABLE_SCHEMA = 'scheme_name' -- &lt;= 対象のデータベース名
     AND INDEX_NAME &lt;&gt; 'PRIMARY'
ORDER BY TABLE_SCHEMA, TABLE_NAME, INDEX_NAME;
</code></pre>

<p>ちなみに、インデックスに設定されているカラム名やその順番も確認したければ、以下のような SQL となる。</p>

<pre><code class="sql">  SELECT TABLE_SCHEMA, TABLE_NAME, INDEX_NAME, COLUMN_NAME, SEQ_IN_INDEX
    FROM information_schema.STATISTICS
   WHERE TABLE_SCHEMA = 'scheme_name' -- &lt;= 対象のデータベース名
     AND INDEX_NAME &lt;&gt; 'PRIMARY'
ORDER BY TABLE_SCHEMA, TABLE_NAME, INDEX_NAME, SEQ_IN_INDEX;
</code></pre>

<h3>2. 応用</h3>

<p>参考までに、前項で紹介した SQL を利用して、データベース内の全テーブルの全インデックス（プライマリキーを除く）を削除するストアドプロシージャを作成する。<br/>
※当方が過去に必要に迫られて作成したストアドプロシージャで、実際はこのストアドプロシージャ実行後にインデックスを一括作成するストアドプロシージャも実行している。</p>

<pre><code class="sql">CREATE DEFINER=`root`@`localhost` PROCEDURE `del_index_all`()
BEGIN
    -- 変数宣言
    DECLARE v_tbl_name VARCHAR(50) DEFAULT '';
    DECLARE v_idx_name VARCHAR(50) DEFAULT '';
    DECLARE v_done INT DEFAULT 0;
    -- カーソル宣言
    DECLARE v_cur CURSOR FOR
        SELECT
            DISTINCT TABLE_NAME, INDEX_NAME
        FROM
            information_schema.STATISTICS
        WHERE
            TABLE_SCHEMA = 'jmx'
        AND INDEX_NAME &lt;&gt; 'PRIMARY'
        ORDER BY
            TABLE_SCHEMA, TABLE_NAME, INDEX_NAME;
    -- 終了ステータス宣言
    DECLARE EXIT HANDLER FOR NOT FOUND SET v_done = 1;

    -- カーソル OPEN
    OPEN v_cur;

    -- LOOP 処理
    WHILE v_done != 1 DO
        -- カーソル FETCH
        FETCH v_cur INTO v_tbl_name, v_idx_name;

        -- 動的 SQL 実行
        SET @s = CONCAT('ALTER TABLE ', v_tbl_name, ' DROP INDEX ', v_idx_name);
        PREPARE stmt FROM @s;
        EXECUTE stmt;
    END WHILE;

    -- PREPARED STATEMENT 解放
    DEALLOCATE PREPARE stmt;

    -- カーソル CLOSE
    CLOSE v_cur;
END
</code></pre>

<p>本当は、動的に SQL を実行する(PREPARED STATEMENT)部分を以下のようにしたかったが、 <code>?</code> は MariaDB のストアドではサポートされてない模様。（<a href="https://mariadb.com/kb/en/mariadb/prepare-statement/" title="PREPARE Statement - MariaDB Knowledge Base">参考</a>）</p>

<pre><code class="sql">    --  :
    -- 省略
    --  :

    SET @s = 'ALTER TABLE ? DROP INDEX ?';
    PREPARE stmt FROM @s;

    OPEN v_cur;

    WHILE v_done != 1 DO
        FETCH v_cur INTO v_tbl_name, v_idx_name;

        SET @tbl_name = v_tbl_name;
        SET @idx_name = v_idx_name;

        EXECUTE stmt USING @tbl_name, @idx_name;
    END WHILE;

    DEALLOCATE PREPARE stmt;

    CLOSE v_cur;
</code></pre>

<hr />

<p>普段はあまり使用する機会はありませんが、大量のテーブルを再設計する際には有益でしょう。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MariaDB 10.0.x - Mroonga プラグインの有効化！]]></title>
    <link href="http://komasaru.github.io/blog/2015/08/21/mariadb-mroonga-installation/"/>
    <updated>2015-08-21T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/08/21/mariadb-mroonga-installation</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>全文検索エンジン Groonga をベースとした MySQL のストレージエンジン Mroonga を MariaDB で使用する方法についての簡単な記録です。</p>

<p>MariaDB 10.0.x では Mroonga のプラグインがバンドルされているので、 Mroonga を別途インストールする必要はありません。<br/>
プラグインを有効にすればすぐに使用できるようになります。（但し、バンドルされている Mroonga はバージョンが少し古いようなので、最新バージョンを使用したければ別途インストールする必要があります）</p>

<p>（Groonga, Mroonga については不勉強で疎いため、乱文ご容赦ください）</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>MariaDB 10.0.21 (on Linux Mint 17.2) での作業を想定。</li>
</ul>


<h3>1. プラグインの有効化</h3>

<p>以下の SQL を実行して、プラグインを有効にする。</p>

<pre><code class="text">&gt; INSTALL PLUGIN Mroonga SONAME 'ha_mroonga.so';
&gt; CREATE FUNCTION last_insert_grn_id RETURNS INTEGER SONAME 'ha_mroonga.so';
&gt; CREATE FUNCTION mroonga_snippet RETURNS STRING SONAME 'ha_mroonga.so';
&gt; CREATE FUNCTION mroonga_command RETURNS STRING SONAME 'ha_mroonga.so';
&gt; CREATE FUNCTION mroonga_escape RETURNS STRING SONAME 'ha_mroonga.so';
</code></pre>

<h3>2. プラグイン有効化の確認</h3>

<pre><code class="text">&gt; SHOW ENGINES;
+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+
| Engine             | Support | Comment                                                                    | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables                  | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                                         | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                                         | NO           | NO   | NO         |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears)             | NO           | NO   | NO         |
| MyISAM             | YES     | MyISAM storage engine                                                      | NO           | NO   | NO         |
| MRG_MyISAM         | YES     | Collection of identical MyISAM tables                                      | NO           | NO   | NO         |
| Mroonga            | YES     | CJK-ready fulltext search, column store                                    | NO           | NO   | NO         |
| FEDERATED          | YES     | FederatedX pluggable storage engine                                        | YES          | NO   | YES        |
| InnoDB             | DEFAULT | Percona-XtraDB, Supports transactions, row-level locking, and foreign keys | YES          | YES  | YES        |
| Aria               | YES     | Crash-safe tables with MyISAM heritage                                     | NO           | NO   | NO         |
| ARCHIVE            | YES     | Archive storage engine                                                     | NO           | NO   | NO         |
+--------------------+---------+----------------------------------------------------------------------------+--------------+------+------------+
11 rows in set (0.00 sec)
</code></pre>

<h3>3. テーブルの作成方法</h3>

<p>以下は、ストレージモードでテーブルを作成する場合で、 <code>col_name_2</code> に全文検索インデックスを張る例（トークナイザはデフォルトの &ldquo;TokenBigram"）。</p>

<pre><code class="text">&gt; CREATE TABLE table_name(
&gt;   id INT PRIMARY KEY AUTO_INCREMENT,
&gt;   col_name_1 VARCHAR(255),
&gt;   col_name_2 VARCHAR(255),
&gt;   FULLTEXT INDEX (col_name_2)
&gt; ) ENGINE = Mroonga DEFAULT CHARSET utf8;
</code></pre>

<p>以下は、ラッパーモード（元のストレージエンジンは InnoDB）でテーブルを作成する場合で、 <code>col_name_2</code> に全文検索インデックスを張る例（トークナイザはデフォルトの &ldquo;TokenBigram"）。</p>

<pre><code class="text">&gt; CREATE TABLE table_name (
&gt;   id INT PRIMARY KEY AUTO_INCREMENT,
&gt;   col_name_1 VARCHAR(255),
&gt;   col_name_2 VARCHAR(255),
&gt;   FULLTEXT INDEX (col_name_2)
&gt; ) ENGINE = Mroonga COMMENT = 'engine "InnoDB"' DEFAULT CHARSET utf8;
</code></pre>

<p>※但し、 MariaDB では <code>FULLTEXT INDEX</code> で設定しても <code>FULLTEXT KEY</code> で登録される。</p>

<p>ちなみに、テーブルデフォルトのトークナイザを MeCab に変更したい場合は以下のようにする。（設定ファイルで指定することも可能）</p>

<pre><code class="text">&gt; ) ENGINE = Mroonga COMMENT='default_tokenizer "TokenMecab"' DEFAULT CHARSET utf8;
</code></pre>

<p>FULLTEXT INDEX のパーサのみ変更したい場合は以下のようにする。</p>

<pre><code class="text">&gt;   FULLTEXT INDEX (col_name_2) COMMENT='parser "TokenMecab"'
</code></pre>

<h3>4. 検索例</h3>

<p>以下は、テーブル table_name の col_name_2 に「松江」を含み「出雲」を含まないレコードを検索する例。</p>

<pre><code class="sql">&gt; SELECT *, MATCH (col_name_2) AGAINST("+松江 -出雲" IN BOOLEAN MODE)
&gt;   FROM table_name
&gt;  WHERE MATCH (col_name_2) AGAINST("+松江 -出雲" IN BOOLEAN MODE);
</code></pre>

<ul>
<li><code>SELECT</code> 句内の <code>MATCH ... AGAINST ...</code> は、検索スコア。</li>
<li><code>IN BOOLEAN MODE</code> は、マッチ率の概念を省いて、単純にかつ機械的に検索するモード。</li>
</ul>


<p>ちなみに、当方で 30 万件ほどレコードのあるテーブルで同様に検索してみた結果、 <code>WHERE</code> 句を</p>

<pre><code class="sql">WHERE col_name_2 LIKE '%松江%' AND col_name_2 NOT LIKE '%出雲%'
</code></pre>

<p>にして検索するより約 100 倍高速に検索できました。さらに、レコード約 1,300 万件では 約 500 倍高速に検索できました。<br/>
（テーブルレイアウト、レコード数等にもよるでしょうが）</p>

<h3>5. 参考サイト</h3>

<ul>
<li><a href="http://mroonga.org/ja/" title="Mroonga - MySQLで高速全文検索">Mroonga - MySQLで高速全文検索</a></li>
</ul>


<p>中でも、Mroonga プラグインの有効については以下を参照。</p>

<ul>
<li><a href="http://mroonga.org/ja/blog/2015/04/29/release.html" title="Mroonga - Mroonga 5.02リリース！">Mroonga - Mroonga 5.02リリース！</a></li>
</ul>


<hr />

<p>検索の高速化を図るには必須の機能でしょう。</p>

<p>当方も InnoDB で構築している既存の DB の高速化を図ってみたいところです。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AMaViS - エラー(on Debian 8 Jessie)！]]></title>
    <link href="http://komasaru.github.io/blog/2015/07/27/debian-8-amavis-error/"/>
    <updated>2015-07-27T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/07/27/debian-8-amavis-error</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Debian GNU/Linux 8 Jessie で Postfix と AMaViS を連携してメールのウイルスチェックを行うようにしているのですが、メールログにエラーメッセージが出力されていたので、調査して対策を施しました。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Debian GNU/Linux 8.1 Jessie での作業を想定。</li>
<li>アンチウィルスソフト ClamAV を「<a href="/2015/05/29/debian-8-anti-virus-installation/" title="Debian 8 (Jessie) - アンチウィルスソフト導入！">Debian 8 (Jessie) - アンチウィルスソフト導入！</a>」の方法でインストールしていることを想定。</li>
<li>SMTP サーバ Postfix を「<a href="/2015/06/12/debian-8-postfix-installation/" title="Debian 8 (Jessie) - SMTP サーバ Postfix 構築！">Debian 8 (Jessie) - SMTP サーバ Postfix 構築！</a>」の方法でインストールしていることを想定。</li>
<li>Postfix と ClamAV の連携を「<a href="/2015/06/15/debian-8-postfix-cooperation-with-clamav/" title="Debian 8 (Jessie) - Postfix と ClamAV の連携！">Debian 8 (Jessie) - Postfix と ClamAV の連携！</a>」の方法で行なっていることを想定。</li>
</ul>


<h3>1. 現象</h3>

<p>メールログに以下のようなエラーメッセージが出力される。</p>

<pre><code class="text /var/log/mail.log">Jun  1 10:57:36 noah amavis[28256]: (28256-04-7) (!)run_av (ClamAV-clamd) FAILED - unexpected , output="/var/lib/amavis/tmp/amavis-20150601T105343-28256-JUnFx0XC/parts: lstat() failed: Permission denied. ERROR\n"
Jun  1 10:57:36 noah amavis[28256]: (28256-04-7) (!)ClamAV-clamd av-scanner FAILED: CODE(0x29c09b0) unexpected , output="/var/lib/amavis/tmp/amavis-20150601T105343-28256-JUnFx0XC/parts: lstat() failed: Permission denied. ERROR\n" at (eval 96) line 905.
Jun  1 10:57:36 noah amavis[28256]: (28256-04-7) (!)WARN: all primary virus scanners failed, considering backups
Jun  1 10:57:36 noah amavis[28256]: (28256-04-7) (!)run_av (ClamAV-clamscan) FAILED - unexpected exit 2, output="WARNING: Ignoring unsupported option --recursive (-r)\nWARNING: Ignoring unsupported option --tempdir\n/var/lib/amavis/tmp/amavis-20150601T105343-28256-JUnFx0XC/parts: lstat() failed: Permission denied. ERROR"
Jun  1 10:57:36 noah amavis[28256]: (28256-04-7) (!)ClamAV-clamscan av-scanner FAILED: /usr/bin/clamdscan unexpected exit 2, output="WARNING: Ignoring unsupported option --recursive (-r)\nWARNING: Ignoring unsupported option --tempdir\n/var/lib/amavis/tmp/amavis-20150601T105343-28256-JUnFx0XC/parts: lstat() failed: Permission denied. ERROR" at (eval 96) line 905.
Jun  1 10:57:36 noah amavis[28256]: (28256-04-7) (!!)AV: ALL VIRUS SCANNERS FAILED
</code></pre>

<h3>2. 原因</h3>

<p>エラーメッセージに出ているとおり、権限がおかしい。</p>

<h3>3. 対策</h3>

<p>3-1 の方法はよくある方法だが、今回注目したかったのは 3-2 の方法。</p>

<h4>3-1. ユーザ ID, グループ ID の確認</h4>

<p><code>id</code> コマンドで clamav, amavis のユーザ ID, グループ ID を確認する。</p>

<pre><code class="text"># id clamav
uid=108(clamav) gid=113(clamav) groups=113(clamav),123(amavis)

# id amavis
uid=115(amavis) gid=123(amavis) groups=123(amavis)
</code></pre>

<p>clamav ユーザが amavis グループに属していれば、それでよい。</p>

<p>clamav ユーザが amavis グループに属していなければ、以下のようにして amavis グループに追加する。（<code>-a</code> オプションは重要。このオプションを付け忘れると clamav ユーザが既に属していたグループから外れてしまう）</p>

<pre><code class="text"># usermod -a -G amavis clamav
</code></pre>

<p>clamav ユーザを amavis グループに追加した場合は、 clamav-daemon, amavis, postfix を再起動する。</p>

<pre><code class="text"># systemctl restart clamav-daemon
# systemctl restart amavis
# systemctl restart postfix
</code></pre>

<h4>3-2. clamd.conf の編集</h4>

<p>前項 3-1 の方法でもエラーが解消しない場合は、 ClamAV Daemon 設定ファイル &ldquo;clamd.conf&rdquo; の <code>AllowSupplementaryGroups</code> を確認してみる。</p>

<p><code>false</code> になっていた場合は <code>true</code>（グループ権限も移譲）に変更する。</p>

<pre><code class="bash /etc/clamav/clamd.conf">AllowSupplementaryGroups true  # &lt;= false を true に変更
</code></pre>

<p>そして、 clamav-daemon, amavis, postfix を再起動する。（起動順に注意すべき旨を紹介しているサイトもあるが、起動順が影響しているか否かは当方未確認）</p>

<pre><code class="text"># systemctl restart clamav-daemon
# systemctl restart amavis
# systemctl restart postfix
</code></pre>

<hr />

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
