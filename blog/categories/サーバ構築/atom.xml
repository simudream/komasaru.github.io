<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: サーバ構築 | mk-mode BLOG]]></title>
  <link href="http://komasaru.github.io/blog/categories/サーバ構築/atom.xml" rel="self"/>
  <link href="http://komasaru.github.io/"/>
  <updated>2016-02-26T00:04:57+09:00</updated>
  <id>http://komasaru.github.io/</id>
  <author>
    <name><![CDATA[mk-mode.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MySQL - コマンドラインでパスワード指定した場合の警告出力を抑止！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/26/mysql-insecure-warning-on-commandline/"/>
    <updated>2016-02-26T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/26/mysql-insecure-warning-on-commandline</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>最近の MySQL (5.6, 5.7)では、コマンドラインからの実行時にパスワードを指定すると、以下のような警告メッセージが出力されます。<br/>
cron で実行した場合は、この警告メッセージがメール送信されてしまったります。</p>

<pre><code class="text">mysql: [Warning] Using a password on the command line interface can be insecure.
</code></pre>

<p>コマンドラインでパスワードを使用するのは安全でない、という旨のメッセージですが、今回はこの警告メッセージの出力を抑止する方法について記録しておきます。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>MySQL 5.6.28, 5.7.10 サーバ・クライアントで動作確認。</li>
<li>以下ではリモートで接続することを考慮している。（<code>-h host_name</code> オプションを使用）</li>
</ul>


<h3>1. 事前情報</h3>

<p>パスワードを指定して実行したい場合、通常は以下のようにするだろう。</p>

<pre><code class="bash">$ mysql -h host_name -u user_name -ppassword db_shceme -e "SELECT * FROM table_name"
</code></pre>

<h3>2. 方法・その１</h3>

<p>環境変数を使用する方法。</p>

<pre><code class="bash">$ MYSQL_PWD=password mysql -h host_name -u user_name db_shceme -e "SELECT * FROM table_name"
</code></pre>

<p>ただし、この方法は安全性に問題があるので非推奨。（安全であることが確実な（スタンドアロン等の）環境なら、この方法が簡単でよいだろう）</p>

<h3>3. 方法・その２</h3>

<p>設定ファイルを使用する方法。</p>

<p>まず、以下のような設定ファイルを新規作成する。（安全性を考慮して、ファイル名先頭に <code>.</code> を付与）<br/>
（接続ユーザが一人だけなら、わざわざ新規作成せずに既存の &ldquo;/etc/my.cnf&rdquo; に記述してもよいだろう）</p>

<pre><code class="bash /etc/.my_hoge.conf">[client]
user     = user_name
password = password
hostname = host_name
</code></pre>

<p>次に、所有者以外がこの設定ファイルを読み書きできないよう権限設定を行う。</p>

<pre><code class="text">$ sudo chmod 600 /etc/.my_hoge.conf
</code></pre>

<p>そして、この設定ファイルを指定してコマンドラインから実行する。（ユーザ名・パスワード・ホスト名は指定しない）</p>

<pre><code class="bash">$ mysql --defaults-extra-file=/etc/.my_hoge.conf db_scheme -e "SELECT * FROM table_name"
</code></pre>

<p>警告メセージは出力されないはず。そして、方法・その１よりは安全だろう。<br/>
また、上記ではユーザ名・パスワード・ホスト名を設定ファイルに記述したが、パスワードのみを記述してコマンドラインでユーザ名・ホスト名を指定してもよい。</p>

<hr />

<p>これで、警告メッセージが出力されなくなりスッキリしました。（見た目にも、自身の気持ち的にも）</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - bash スクリプト二重起動チェック！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/21/linux-bash-check-double-start/"/>
    <updated>2016-02-21T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/21/linux-bash-check-double-start</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux で bash スクリプトを起動する際に既に起動されていたら起動しないようにするための方法、さらには cron で実行しても二重起動チェックが機能するかについての記録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>CentOS 6.7 での作業を想定。（他の環境でも問題ないはず）</li>
</ul>


<h3>1. 作成例（その１）</h3>

<p>自分自身のプロセスIDと起動済みのプロセスID（＝自分自身のプロセス名（相対パス）と同じプロセス名から取得）を比較する方法。</p>

<pre><code class="bash test_1.sh">#!/bin/sh

# 二重起動チェック
if [ $$ != `pgrep -fo $0` ]; then
  echo "Already running!" &gt;&amp;2
  exit 9
fi

# メイン処理
echo "[`date '+%Y/%m/%d %T'`] Sleep 10 seconds..."
sleep 10

exit 0
</code></pre>

<ul>
<li><code>$$</code> は、自分自身のプロセスID。</li>
<li><code>$0</code> は、自分自身のプロセス名（相対パス）。</li>
<li><code>pgrep -fo $0</code> は、自分自身のプロセスIDを取得。</li>
<li>メリット・デメリットについて

<ul>
<li><strong>メリットは、cron 実行しないのであればこれで充分である。</strong></li>
<li><strong>デメリットは、cron で実行された場合にチェックが効かない。</strong><br/>
理由は、<code>pgrep -fo $0</code> が cron で実行した際のプロセスIDとなってしまう（子プロセス（<code>$0</code>）のプロセスIDにならない）ため。</li>
</ul>
</li>
</ul>


<h3>2. 作成例（その２）</h3>

<p>自分自身のプロセスIDと起動済みのプロセスID（＝自分自身のプロセス名（パスを除いたファイル名）と同じプロセス名から取得）を比較する方法。</p>

<pre><code class="bash test_2.sh">#!/bin/sh

# 二重起動チェック
_pname=`basename $0`
if [ $$ != `pgrep -fo $_pname` ]; then
  echo "Already running!" &gt;&amp;2
  exit 9
fi

# メイン処理
echo "[`date '+%Y/%m/%d %T'`] Sleep 10 seconds..."
sleep 10

exit 0
</code></pre>

<ul>
<li>作例例（その１）と似ているが、<code>$0</code> からパスを除いてプロセスIDを取得している。</li>
<li>メリット・デメリットについて

<ul>
<li><strong>メリットは、cron 実行しないのであればこれで充分である。</strong></li>
<li><strong>デメリットは、cron で実行された場合にチェックが効かない。</strong><br/>
理由は、<code>pgrep -fo $0</code> が cron で実行した際のプロセスIDとなってしまう（子プロセス（<code>$0</code>）のプロセスIDにならない）ため。</li>
</ul>
</li>
</ul>


<h3>3. 作成例（その３）</h3>

<p>自分自身のプロセスIDと起動済みのプロセスID（＝自分自身のプロセス名（引数も含めたフルパス）と同じプロセス名から取得）を比較する方法。</p>

<pre><code class="bash test_3.sh">#!/bin/sh

# 二重起動チェック
CMDLINE=$(cat /proc/$$/cmdline | xargs --null)
if [[ $$ -ne $(pgrep -oxf "${CMDLINE}") ]]; then
  echo "Already running!" &gt;&amp;2
  exit 9
fi

# メイン処理
echo "[`date '+%Y/%m/%d %T'`] Sleep 10 seconds..."
sleep 10

exit 0
</code></pre>

<ul>
<li><code>$(cat /proc/$$/cmdline | xargs --null)</code> で起動時のコマンドラインを引数も含めてフルパスで取得。</li>
<li>メリット・デメリットについて

<ul>
<li><strong>メリットは、cron で実行された場合にもチェックが効く。</strong></li>
<li><strong>デメリットは、初見では理解しにくいかもしれない。</strong></li>
</ul>
</li>
</ul>


<h3>4. 作成例（その４）</h3>

<p>ロックファイルが存在しない場合にロックファイル（実際にはシンボリックリンク）を作成して処理を行い、処理終了後にロックファイルを削除する方法。</p>

<pre><code class="bash test_4.sh">#!/bin/sh

# 二重起動チェック
_lock="/tmp/`basename $0`.lock"
ln -s /dummy $_lock 2&gt; /dev/null
if [ $? -ne 0 ]; then
  echo "Already running!" &gt;&amp;2
  exit 9;
fi
# 上記の `ln` と `if ... fi` は以下のように１行にまとめてもよい
# ln -s /dummy $_lock 2&gt; /dev/null || { echo "Already running!" &gt;&amp;2; exit 9; }

# メイン処理
echo "[`date '+%Y/%m/%d %T'`] Sleep 10 seconds..."
sleep 10

rm -f $_lock
exit 0
</code></pre>

<ul>
<li>上記ではシンボリックリンクを作成しているが、<code>touch</code> コマンでロックファイルを作成してもよいだろう。（但し、問題があるかも？（問題があると説明しているサイトを見かけたが、当方は未確認））</li>
<li>メリット・デメリットについて

<ul>
<li><strong>メリットは、理解しやすいスクリプトである。</strong></li>
<li><strong>デメリットは、SIGKILL シグナルを受信して終了した場合にロックファイルが残ったままになり、次回起動時にロックファイルを削除する作業が必要になる。</strong><br/>
二重起動チェックの最後に <code>trap "rm $_lockfile; exit" 1 2 3 15</code> のように記述して SIGKILL シグナル<code>1</code>（HUP：再起動）、<code>2</code>（INT：割り込み）、<code>3</code>（QUIT：終了）、<code>15</code>（TERM：終了）を捕捉するような説明をしているページもあったが、シェルスクリプト内では <code>trap</code> できないはずなので無意味。</li>
</ul>
</li>
</ul>


<h3>5. 作成例（その５）</h3>

<p>cron 実行時に <code>flock</code> コマンドを使用する方法。（実際に実行する bash スクリプトは二重起動チェック機能を実装してないもの）</p>

<pre><code class="bash /etc/cron.d/test">* * * * * root /usr/bin/flock -n /tmp/test_5.lock test_5.sh &gt; /dev/null
</code></pre>

<ul>
<li><code>flock</code> コマンドの <code>-n</code> は、ロック中だった場合にロック解放を待たずにエラーにするオプション。</li>
<li>メリット・デメリットについて

<ul>
<li><strong>メリットは、cron で実行する際に既存の bash スクリプトを編集することなく二重起動の抑制が可能。</strong></li>
<li><strong>デメリットは、bash スクリプトを cron でなく手動で実行する場合に二重起動チェックが機能しない。</strong></li>
</ul>
</li>
</ul>


<h3>6. その他</h3>

<ul>
<li><code>pidof</code> コマンドを使用する方法も考えられるだろうが、当方は未確認。</li>
<li>当方は、手動実行も cron 実行も行うことが多いので、 cron 実行時に問題がない（少ない）上記の「作成例（その３）」の方法を主に使用している。</li>
</ul>


<hr />

<p>今回調査したことで、プロセスIDの取得方法や cron 実行時には親プロセス・子プロセスのことを考慮する必要があることが勉強になりました。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - rdiff-backup コマンドでリモートバックアップ！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/16/linux-rdiff-backup-remotely/"/>
    <updated>2016-02-16T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/16/linux-rdiff-backup-remotely</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>手軽にバックアップ作業の行える rdiff-backup コマンドについての記録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>以下の環境を想定。（他の環境でも同様）

<ul>
<li>バックアップ元：Linux Mint 17.2（一般ユーザでの作業）</li>
<li>バックアップ先：CentOS 6.7（root ユーザでの作業）<br/>
（RPMForge リポジトリを使用するので、導入済みであること。参考：<a href="/2013/12/13/centos-6-5-first-setting/" title="CentOS 6.5 - 初期設定！">CentOS 6.5 - 初期設定！</a>）</li>
<li>リモート接続に SSH 鍵認証を使用している。（参考：<a href="/2013/12/15/centos-6-5-ssh-connection-by-key-certificate/" title="CentOS 6.5 - SSH サーバ 鍵認証接続！">CentOS 6.5 - SSH サーバ 鍵認証接続！</a>）<br/>
（SSH 鍵認証でないのなら、以下に登場する <code>--remote-schema</code> オプションを無視して考えればよい）</li>
</ul>
</li>
</ul>


<h3>1. rdiff-backup コマンドのインストール</h3>

<p>バックアップ元(Linux Mint)側で以下を実行。</p>

<pre><code class="text">$ sudo apt-get install rdiff-backup
</code></pre>

<p>バックアップ先(CentOS)側で以下を実行。<br/>
（標準リポジトリには存在しないので、RPMForge リポジトリを使用）</p>

<pre><code class="text"># yum --enablerepo=rpmforge install rdiff-backup
</code></pre>

<h3>2. バックアップ除外リストの作成</h3>

<p>バックアップ対象のディレクトリ内から除外したいファイルやディレクトリがあれば、それ用の一覧ファイルを作成する。（以下は一例）</p>

<pre><code class="bash /path/to/exclude.lst">/home/hoge/path/to/data
/home/hoge/path/to/log
</code></pre>

<h3>3. リモートバックアップの実行</h3>

<p>以下のように実行する。<br/>
最初は SSH のパスワードを問われるので、応答する。（２回目以降は問われない）</p>

<pre><code class="text">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--exclude-filelist exclude.lst \
--print \
$HOME/path/to/source_dir 192.168.11.102::$HOME/path/to/remote_dir

--------------[ Session statistics ]--------------
StartTime 1452147922.00 (Thu Jan  7 23:25:22 2016)
EndTime 1452147923.72 (Thu Jan  7 23:25:23 2016)
ElapsedTime 1.72 (1.72 seconds)
SourceFiles 285
SourceFileSize 1610709 (1.54 MB)
MirrorFiles 1
MirrorFileSize 0 (0 bytes)
NewFiles 284
NewFileSize 1610709 (1.54 MB)
DeletedFiles 0
DeletedFileSize 0 (0 bytes)
ChangedFiles 1
ChangedSourceSize 0 (0 bytes)
ChangedMirrorSize 0 (0 bytes)
IncrementFiles 0
IncrementFileSize 0 (0 bytes)
TotalDestinationSizeChange 1610709 (1.54 MB)
Errors 0
--------------------------------------------------
</code></pre>

<ul>
<li>SSH 鍵ファイルが <code>$HOME/.ssh/id_rsa</code> で、バックアップ先の SSH ポートが <code>9999</code> であることを想定。</li>
<li>除外リストを使用しないのなら <code>--exclude-filelist exclude.lst</code> は不要。</li>
<li>除外したいファイルやディレクトリが少ないのなら、<code>--exclude-filelist</code> オプションを使用せずに <code>--exclude xxxx</code> で１つずつ指定してもよい。</li>
<li><code>--print</code> は処理終了時に結果を出力するオプション。</li>
</ul>


<p>バックアップが成功すると、バックアップ先にはコピーされたファイル・ディレクトリとは別に &ldquo;rdiff-backup-data&rdquo; というバックアップ履歴管理のディレクトリも作成される。</p>

<h3>4. バックアップの自動化</h3>

<p>このバックアップを自動化したければ、シェルスクリプトを作成して cron 登録すればよい。</p>

<p>まず、前項のコマンドをシェルスクリプトにする。（<code>--print</code> オプションは不要なので削除）</p>

<pre><code class="bash /home/hoge/rdiff_test.sh">#!/bin/bash
rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--exclude-filelist exclude.lst \
$HOME/path/to/source_dir 192.168.11.102::$HOME/path/to/remote_dir
</code></pre>

<p>そして、実行権限を付与する。</p>

<pre><code class="text">$ sudo chmod +x rdiff_test.sh
</code></pre>

<p>最後に cron に登録する。（以下は毎日午前２時に実行する例（エラー以外メール送信しない））</p>

<pre><code class="bash /etc/cron.d/rdiff_test">0 2 * * * root /home/hoge/rdiff_test.sh &gt; /dev/null
</code></pre>

<h3>5. リストアの実行</h3>

<p>最新の状態にリストアするなら以下のように <code>-r now</code> オプションを使用する。<br/>
（バックアップ時とディレクトリ指定の順番が逆であること、既存のディレクトリをリストア先に指定できないことに注意）</p>

<pre><code class="bash">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--exclude-filelist exclude.lst \
-r now \
192.168.11.102::$HOME/path/to/remote_dir $HOME/path/to/restore_dir
</code></pre>

<p>特定の時点の状態にリストアするなら、まず以下のように <code>-l</code> で確認する。</p>

<pre><code class="text">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
-l \
192.168.11.102::$HOME/work/disaster

Found 1 increments:
    increments.2016-01-07T23:25:22+09:00.dir   Thu Jan  7 23:25:22 2016
Current mirror: Thu Jan  7 23:48:57 2016
</code></pre>

<p>最新のバックアップが <code>Thu Jan  7 23:48:57 2016</code> で１つ前のバックアップが <code>Thu Jan  7 23:25:22 2016</code> であることが分かるので、以下のようにすることで１つ前の状態にリストアできる。</p>

<pre><code class="bash">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--exclude-filelist exclude.lst \
-r 2016-01-07T23:25:22+09:00 \
192.168.11.102::$HOME/path/to/remote_dir $HOME/path/to/restore_dir2
</code></pre>

<h3>6. 古いバックアップの削除</h3>

<p>古いバックアップを削除するには以下のようにする。（以下は１ケ月より古い履歴を削除する例。 単位は <code>s</code>, <code>m</code>, <code>h</code>, <code>D</code>, <code>W</code>, <code>M</code>, <code>Y</code> が指定可）</p>

<pre><code class="text">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--remove-older-than 1M 192.168.11.102::$HOME/path/to/remote_dir
</code></pre>

<p><code>--remove-older-than 2016-01-07T23:25:22+09:00</code> のように指定することも可能。</p>

<h3>7. 参考サイト</h3>

<ul>
<li><a href="http://www.nongnu.org/rdiff-backup/" title="rdiff-backup">rdiff-backup</a></li>
</ul>


<hr />

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - bash で古いファイルの削除！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/12/linux-bash-delete-old-files/"/>
    <updated>2016-02-12T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/12/linux-bash-delete-old-files</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>サーバを運用していると、日々ログファイルが作成され続けてディレクトリが肥大化することがあります。（ログローテションが使えないような場合等）</p>

<p>以下で、最終更新日から一定の日数を超えたファイルを削除する bash スクリプトを紹介します。（簡単すぎるので、記事にするほどのものでもないかも知れませんが）</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>CentOS 6.7, Linux Mint 17.2 での作業を想定。（他の環境でも問題ないはず）</li>
</ul>


<h3>1. bash スクリプトの作成</h3>

<pre><code class="bash del_oldlogs.sh">#!/bin/bash

DIR=/path/to/target_dir
DAYS=7

find $DIR -mtime +$DAYS -a -type f -exec rm -f {} \;
</code></pre>

<ul>
<li><code>-mtime</code> は更新日時を指定するオプション。（指定する値は「日」ベース）<br/>
そして、以下に注意。

<ul>
<li><code>-mtime 1</code> で更新日時が1日（24時間以上48時間以下）のファイルを検索。</li>
<li><code>-mtime +1</code> で更新日時が1日超（48時間超）のファイルを検索。</li>
<li><code>-mtime -1</code> で更新日時が1日未満（24時間未満）のファイルを検索。</li>
</ul>
</li>
<li><code>-type</code> はファイルタイプを指定するオプション。

<ul>
<li><code>-type f</code> でファイルを指定。</li>
<li><code>-type d</code> でディレクトリを指定。</li>
<li><code>-type l</code> でシンボリックリンクを指定。</li>
</ul>
</li>
<li><code>-a</code> は AND 条件を指定するオプション。</li>
<li><code>-exec</code> は以降に続くコマンドを実行するオプション。

<ul>
<li><code>{}</code> で検索結果を受け取る。</li>
</ul>
</li>
<li><code>\</code> は <code>-exec</code> の終端であることを表す記号。</li>
</ul>


<p>ちなみに、上記の <code>find ...</code> の部分は以下のように書き換えることも可能。</p>

<pre><code class="bash">find $DIR -mtime +$DAYS -a -type f | xargs rm -f;
</code></pre>

<h3>2. bash スクリプトの実行</h3>

<pre><code class="text">$ ./del_oldlogs.rb
</code></pre>

<h3>3. 実際の運用</h3>

<p>毎回手動で起動するのは面倒なので、実際には cron 登録して定期的に実行するようにする。</p>

<hr />

<p>後学のための備忘録でした。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint - Mroonga インストール（by ソースビルド）！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/02/linuxmint-mroonga-installation-by-src/"/>
    <updated>2016-02-02T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/02/linuxmint-mroonga-installation-by-src</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux Mint 上の MySQL 5.7 に全文検索エンジン Groonga の機能を実現するストレージエンジン Mroonga をソースをビルドしてインストールする方法についてです。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>当記事執筆時点で最新の Mroonga 5.10 をインストールする。</li>
<li>Groonga 5.1.0 がインストール済みであることを想定。<br/>
（参照「<a href="/2015/08/09/linux-mint-groonga-installation-by-src/" title="Linux Mint - Groonga インストール（by ソースビルド）！">Linux Mint - Groonga インストール（by ソースビルド）！</a>」）<br/>
※ソースビルでなく PPA リポジトリからインストールしてもよいだろう（参照「<a href="http://groonga.org/ja/docs/install/ubuntu.html" title="2.4. Ubuntu — Groonga v5.1.0ドキュメント">2.4. Ubuntu — Groonga v5.1.0ドキュメント</a>」）</li>
<li>MySQL 5.7.10 をソースをビルドしてインストールしていること。（Mroonga のビルドに MySQL のソースが必要なため）<br/>
（参照「<a href="" title="Linux Mint - MySQL 5.7 インストール（by ソースビルド）！">Linux Mint - MySQL 5.7 インストール（by ソースビルド）！</a>」）</li>
<li>MySQL 5.7.10 は &ldquo;/usr/local/mysql&rdquo; ディレクトリにインストールされていることを想定。</li>
<li>MySQL 5.7.10 のインストールに使用したソースは &ldquo;~/mysql-5.7.10&rdquo; ディレクトリに存在することを想定。</li>
<li>一般ユーザでの作業を想定。</li>
<li>環境の相違等のために以下の方法ではうまく行かないこともあるだろう。<br/>
ログを確認して適宜対処すること。</li>
</ul>


<h3>1. 必要ライブラリのインストール</h3>

<p>必要なライブラリ groonga-normalizer-mysql をインストールする。</p>

<pre><code class="text">$ sudo apt-get -y install software-properties-common
$ sudo add-apt-repository -y universe
$ sudo add-apt-repository -y ppa:groonga/ppa
$ sudo apt-get update
$ sudo apt-get -y install groonga-normalizer-mysql
</code></pre>

<p>（groonga-normalizer-mysql を Apt インストールするなら Groonga 自体も Apt インストールしてもよかったかもしれないが、当方は既に Groonga をソースビルドでインストール済み）</p>

<h3>2. ソースの取得</h3>

<p>アーカイブファイルを取得、展開後、ディレクトリを移動しておく。（ダウンロード先は一般ユーザホームディレクトリとする）</p>

<pre><code class="text">$ cd ~/
$ wget http://packages.groonga.org/source/mroonga/mroonga-5.10.tar.gz
$ tar zxvf mroonga-5.10.tar.gz
$ cd mroonga-5.10
</code></pre>

<h3>3. Makefile の生成</h3>

<pre><code class="text">$ ./configure \
--with-mysql-source=/home/masaru/mysql-5.7.10 \
--with-mysql-build=/home/masaru/mysql-5.7.10 \
--with-mysql-config=/usr/local/mysql/bin/mysql_config
</code></pre>

<h3>4. ビルド</h3>

<pre><code class="text">$ make
</code></pre>

<h3>5. インストール</h3>

<pre><code class="text">$ sudo make install
</code></pre>

<h3>6. MySQL への Mroonga プラグインの適用</h3>

<p>MySQL サーバが起動していることを確認してから以下を実行する。</p>

<pre><code class="text">$ mysql -u root -p &lt; /usr/local/share/mroonga/install.sql
</code></pre>

<p><code>... does not exist</code> のメッセージが出力されるかもしれないが問題ない。（おそらく）</p>

<h3>7. Mroonga 導入の確認</h3>

<p>MySQL サーバに root でログインして確認してみる。</p>

<pre><code class="text">mysql&gt; SHOW ENGINES;
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| Mroonga            | YES     | CJK-ready fulltext search, column store                        | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
10 rows in set (0.00 sec)
</code></pre>

<p><code>Mroonga</code> 行が存在することを確認する。</p>

<p>その他、 Mroonga の簡単な使用方法は以下の過去記事等を参照。</p>

<ul>
<li><a href="/2015/08/21/mariadb-mroonga-installation" title="MariaDB 10.0.x - Mroonga プラグインの有効化！">MariaDB 10.0.x - Mroonga プラグインの有効化！</a></li>
</ul>


<h3>8. 参考サイト</h3>

<ul>
<li><a href="http://mroonga.org/ja/docs/install/others.html" title="2.7. その他 — Mroonga v5.10 documentation">2.7. その他 — Mroonga v5.10 documentation</a></li>
</ul>


<hr />

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
