<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: サーバ構築 | mk-mode BLOG]]></title>
  <link href="http://komasaru.github.io/blog/categories/サーバ構築/atom.xml" rel="self"/>
  <link href="http://komasaru.github.io/"/>
  <updated>2016-02-16T00:06:46+09:00</updated>
  <id>http://komasaru.github.io/</id>
  <author>
    <name><![CDATA[mk-mode.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Linux - rdiff-backup コマンドでリモートバックアップ！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/16/linux-rdiff-backup-remotely/"/>
    <updated>2016-02-16T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/16/linux-rdiff-backup-remotely</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>手軽にバックアップ作業の行える rdiff-backup コマンドについての記録です。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>以下の環境を想定。（他の環境でも同様）

<ul>
<li>バックアップ元：Linux Mint 17.2（一般ユーザでの作業）</li>
<li>バックアップ先：CentOS 6.7（root ユーザでの作業）<br/>
（RPMForge リポジトリを使用するので、導入済みであること。参考：<a href="/2013/12/13/centos-6-5-first-setting/" title="CentOS 6.5 - 初期設定！">CentOS 6.5 - 初期設定！</a>）</li>
<li>リモート接続に SSH 鍵認証を使用している。（参考：<a href="/2013/12/15/centos-6-5-ssh-connection-by-key-certificate/" title="CentOS 6.5 - SSH サーバ 鍵認証接続！">CentOS 6.5 - SSH サーバ 鍵認証接続！</a>）<br/>
（SSH 鍵認証でないのなら、以下に登場する <code>--remote-schema</code> オプションを無視して考えればよい）</li>
</ul>
</li>
</ul>


<h3>1. rdiff-backup コマンドのインストール</h3>

<p>バックアップ元(Linux Mint)側で以下を実行。</p>

<pre><code class="text">$ sudo apt-get install rdiff-backup
</code></pre>

<p>バックアップ先(CentOS)側で以下を実行。<br/>
（標準リポジトリには存在しないので、RPMForge リポジトリを使用）</p>

<pre><code class="text"># yum --enablerepo=rpmforge install rdiff-backup
</code></pre>

<h3>2. バックアップ除外リストの作成</h3>

<p>バックアップ対象のディレクトリ内から除外したいファイルやディレクトリがあれば、それ用の一覧ファイルを作成する。（以下は一例）</p>

<pre><code class="bash /path/to/exclude.lst">/home/hoge/path/to/data
/home/hoge/path/to/log
</code></pre>

<h3>3. リモートバックアップの実行</h3>

<p>以下のように実行する。<br/>
最初は SSH のパスワードを問われるので、応答する。（２回目以降は問われない）</p>

<pre><code class="text">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--exclude-filelist exclude.lst \
--print \
$HOME/path/to/source_dir 192.168.11.102::$HOME/path/to/remote_dir

--------------[ Session statistics ]--------------
StartTime 1452147922.00 (Thu Jan  7 23:25:22 2016)
EndTime 1452147923.72 (Thu Jan  7 23:25:23 2016)
ElapsedTime 1.72 (1.72 seconds)
SourceFiles 285
SourceFileSize 1610709 (1.54 MB)
MirrorFiles 1
MirrorFileSize 0 (0 bytes)
NewFiles 284
NewFileSize 1610709 (1.54 MB)
DeletedFiles 0
DeletedFileSize 0 (0 bytes)
ChangedFiles 1
ChangedSourceSize 0 (0 bytes)
ChangedMirrorSize 0 (0 bytes)
IncrementFiles 0
IncrementFileSize 0 (0 bytes)
TotalDestinationSizeChange 1610709 (1.54 MB)
Errors 0
--------------------------------------------------
</code></pre>

<ul>
<li>SSH 鍵ファイルが <code>$HOME/.ssh/id_rsa</code> で、バックアップ先の SSH ポートが <code>9999</code> であることを想定。</li>
<li>除外リストを使用しないのなら <code>--exclude-filelist exclude.lst</code> は不要。</li>
<li>除外したいファイルやディレクトリが少ないのなら、<code>--exclude-filelist</code> オプションを使用せずに <code>--exclude xxxx</code> で１つずつ指定してもよい。</li>
<li><code>--print</code> は処理終了時に結果を出力するオプション。</li>
</ul>


<p>バックアップが成功すると、バックアップ先にはコピーされたファイル・ディレクトリとは別に &ldquo;rdiff-backup-data&rdquo; というバックアップ履歴管理のディレクトリも作成される。</p>

<h3>4. バックアップの自動化</h3>

<p>このバックアップを自動化したければ、シェルスクリプトを作成して cron 登録すればよい。</p>

<p>まず、前項のコマンドをシェルスクリプトにする。（<code>--print</code> オプションは不要なので削除）</p>

<pre><code class="bash /home/hoge/rdiff_test.sh">#!/bin/bash
rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--exclude-filelist exclude.lst \
$HOME/path/to/source_dir 192.168.11.102::$HOME/path/to/remote_dir
</code></pre>

<p>そして、実行権限を付与する。</p>

<pre><code class="text">$ sudo chmod +x rdiff_test.sh
</code></pre>

<p>最後に cron に登録する。（以下は毎日午前２時に実行する例（エラー以外メール送信しない））</p>

<pre><code class="bash /etc/cron.d/rdiff_test">0 2 * * * root /home/hoge/rdiff_test.sh &gt; /dev/null
</code></pre>

<h3>5. リストアの実行</h3>

<p>最新の状態にリストアするなら以下のように <code>-r now</code> オプションを使用する。<br/>
（バックアップ時とディレクトリ指定の順番が逆であること、既存のディレクトリをリストア先に指定できないことに注意）</p>

<pre><code class="bash">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--exclude-filelist exclude.lst \
-r now \
192.168.11.102::$HOME/path/to/remote_dir $HOME/path/to/restore_dir
</code></pre>

<p>特定の時点の状態にリストアするなら、まず以下のように <code>-l</code> で確認する。</p>

<pre><code class="text">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
-l \
192.168.11.102::$HOME/work/disaster

Found 1 increments:
    increments.2016-01-07T23:25:22+09:00.dir   Thu Jan  7 23:25:22 2016
Current mirror: Thu Jan  7 23:48:57 2016
</code></pre>

<p>最新のバックアップが <code>Thu Jan  7 23:48:57 2016</code> で１つ前のバックアップが <code>Thu Jan  7 23:25:22 2016</code> であることが分かるので、以下のようにすることで１つ前の状態にリストアできる。</p>

<pre><code class="bash">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--exclude-filelist exclude.lst \
-r 2016-01-07T23:25:22+09:00 \
192.168.11.102::$HOME/path/to/remote_dir $HOME/path/to/restore_dir2
</code></pre>

<h3>6. 古いバックアップの削除</h3>

<p>古いバックアップを削除するには以下のようにする。（以下は１ケ月より古い履歴を削除する例。 単位は <code>s</code>, <code>m</code>, <code>h</code>, <code>D</code>, <code>W</code>, <code>M</code>, <code>Y</code> が指定可）</p>

<pre><code class="text">$ rdiff-backup \
--remote-schema 'ssh -i $HOME/.ssh/id_rsa -p 9999 -C %s rdiff-backup --server' \
--remove-older-than 1M 192.168.11.102::$HOME/path/to/remote_dir
</code></pre>

<p><code>--remove-older-than 2016-01-07T23:25:22+09:00</code> のように指定することも可能。</p>

<h3>7. 参考サイト</h3>

<ul>
<li><a href="http://www.nongnu.org/rdiff-backup/" title="rdiff-backup">rdiff-backup</a></li>
</ul>


<hr />

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux - bash で古いファイルの削除！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/12/linux-bash-delete-old-files/"/>
    <updated>2016-02-12T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/12/linux-bash-delete-old-files</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>サーバを運用していると、日々ログファイルが作成され続けてディレクトリが肥大化することがあります。（ログローテションが使えないような場合等）</p>

<p>以下で、最終更新日から一定の日数を超えたファイルを削除する bash スクリプトを紹介します。（簡単すぎるので、記事にするほどのものでもないかも知れませんが）</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>CentOS 6.7, Linux Mint 17.2 での作業を想定。（他の環境でも問題ないはず）</li>
</ul>


<h3>1. bash スクリプトの作成</h3>

<pre><code class="bash del_oldlogs.sh">#!/bin/bash

DIR=/path/to/target_dir
DAYS=7

find $DIR -mtime +$DAYS -a -type f -exec rm -f {} \;
</code></pre>

<ul>
<li><code>-mtime</code> は更新日時を指定するオプション。（指定する値は「日」ベース）<br/>
そして、以下に注意。

<ul>
<li><code>-mtime 1</code> で更新日時が1日（24時間以上48時間以下）のファイルを検索。</li>
<li><code>-mtime +1</code> で更新日時が1日超（48時間超）のファイルを検索。</li>
<li><code>-mtime -1</code> で更新日時が1日未満（24時間未満）のファイルを検索。</li>
</ul>
</li>
<li><code>-type</code> はファイルタイプを指定するオプション。

<ul>
<li><code>-type f</code> でファイルを指定。</li>
<li><code>-type d</code> でディレクトリを指定。</li>
<li><code>-type l</code> でシンボリックリンクを指定。</li>
</ul>
</li>
<li><code>-a</code> は AND 条件を指定するオプション。</li>
<li><code>-exec</code> は以降に続くコマンドを実行するオプション。

<ul>
<li><code>{}</code> で検索結果を受け取る。</li>
</ul>
</li>
<li><code>\</code> は <code>-exec</code> の終端であることを表す記号。</li>
</ul>


<p>ちなみに、上記の <code>find ...</code> の部分は以下のように書き換えることも可能。</p>

<pre><code class="bash">find $DIR -mtime +$DAYS -a -type f | xargs rm -f;
</code></pre>

<h3>2. bash スクリプトの実行</h3>

<pre><code class="text">$ ./del_oldlogs.rb
</code></pre>

<h3>3. 実際の運用</h3>

<p>毎回手動で起動するのは面倒なので、実際には cron 登録して定期的に実行するようにする。</p>

<hr />

<p>後学のための備忘録でした。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint - Mroonga インストール（by ソースビルド）！]]></title>
    <link href="http://komasaru.github.io/blog/2016/02/02/linuxmint-mroonga-installation-by-src/"/>
    <updated>2016-02-02T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/02/02/linuxmint-mroonga-installation-by-src</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Linux Mint 上の MySQL 5.7 に全文検索エンジン Groonga の機能を実現するストレージエンジン Mroonga をソースをビルドしてインストールする方法についてです。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>当記事執筆時点で最新の Mroonga 5.10 をインストールする。</li>
<li>Groonga 5.1.0 がインストール済みであることを想定。<br/>
（参照「<a href="/2015/08/09/linux-mint-groonga-installation-by-src/" title="Linux Mint - Groonga インストール（by ソースビルド）！">Linux Mint - Groonga インストール（by ソースビルド）！</a>」）<br/>
※ソースビルでなく PPA リポジトリからインストールしてもよいだろう（参照「<a href="http://groonga.org/ja/docs/install/ubuntu.html" title="2.4. Ubuntu — Groonga v5.1.0ドキュメント">2.4. Ubuntu — Groonga v5.1.0ドキュメント</a>」）</li>
<li>MySQL 5.7.10 をソースをビルドしてインストールしていること。（Mroonga のビルドに MySQL のソースが必要なため）<br/>
（参照「<a href="" title="Linux Mint - MySQL 5.7 インストール（by ソースビルド）！">Linux Mint - MySQL 5.7 インストール（by ソースビルド）！</a>」）</li>
<li>MySQL 5.7.10 は &ldquo;/usr/local/mysql&rdquo; ディレクトリにインストールされていることを想定。</li>
<li>MySQL 5.7.10 のインストールに使用したソースは &ldquo;~/mysql-5.7.10&rdquo; ディレクトリに存在することを想定。</li>
<li>一般ユーザでの作業を想定。</li>
<li>環境の相違等のために以下の方法ではうまく行かないこともあるだろう。<br/>
ログを確認して適宜対処すること。</li>
</ul>


<h3>1. 必要ライブラリのインストール</h3>

<p>必要なライブラリ groonga-normalizer-mysql をインストールする。</p>

<pre><code class="text">$ sudo apt-get -y install software-properties-common
$ sudo add-apt-repository -y universe
$ sudo add-apt-repository -y ppa:groonga/ppa
$ sudo apt-get update
$ sudo apt-get -y install groonga-normalizer-mysql
</code></pre>

<p>（groonga-normalizer-mysql を Apt インストールするなら Groonga 自体も Apt インストールしてもよかったかもしれないが、当方は既に Groonga をソースビルドでインストール済み）</p>

<h3>2. ソースの取得</h3>

<p>アーカイブファイルを取得、展開後、ディレクトリを移動しておく。（ダウンロード先は一般ユーザホームディレクトリとする）</p>

<pre><code class="text">$ cd ~/
$ wget http://packages.groonga.org/source/mroonga/mroonga-5.10.tar.gz
$ tar zxvf mroonga-5.10.tar.gz
$ cd mroonga-5.10
</code></pre>

<h3>3. Makefile の生成</h3>

<pre><code class="text">$ ./configure \
--with-mysql-source=/home/masaru/mysql-5.7.10 \
--with-mysql-build=/home/masaru/mysql-5.7.10 \
--with-mysql-config=/usr/local/mysql/bin/mysql_config
</code></pre>

<h3>4. ビルド</h3>

<pre><code class="text">$ make
</code></pre>

<h3>5. インストール</h3>

<pre><code class="text">$ sudo make install
</code></pre>

<h3>6. MySQL への Mroonga プラグインの適用</h3>

<p>MySQL サーバが起動していることを確認してから以下を実行する。</p>

<pre><code class="text">$ mysql -u root -p &lt; /usr/local/share/mroonga/install.sql
</code></pre>

<p><code>... does not exist</code> のメッセージが出力されるかもしれないが問題ない。（おそらく）</p>

<h3>7. Mroonga 導入の確認</h3>

<p>MySQL サーバに root でログインして確認してみる。</p>

<pre><code class="text">mysql&gt; SHOW ENGINES;
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| Mroonga            | YES     | CJK-ready fulltext search, column store                        | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
10 rows in set (0.00 sec)
</code></pre>

<p><code>Mroonga</code> 行が存在することを確認する。</p>

<p>その他、 Mroonga の簡単な使用方法は以下の過去記事等を参照。</p>

<ul>
<li><a href="/2015/08/21/mariadb-mroonga-installation" title="MariaDB 10.0.x - Mroonga プラグインの有効化！">MariaDB 10.0.x - Mroonga プラグインの有効化！</a></li>
</ul>


<h3>8. 参考サイト</h3>

<ul>
<li><a href="http://mroonga.org/ja/docs/install/others.html" title="2.7. その他 — Mroonga v5.10 documentation">2.7. その他 — Mroonga v5.10 documentation</a></li>
</ul>


<hr />

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux Mint - MySQL 5.7 インストール（by ソースビルド）！]]></title>
    <link href="http://komasaru.github.io/blog/2016/01/28/linuxmint-mysql-57-installation-by-src/"/>
    <updated>2016-01-28T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/01/28/linuxmint-mysql-57-installation-by-src</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>MySQL 5.7 系の最新版をソースをビルドして Linux Mint 17.2 にインストールする方法についてです。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.2(64bit) での作業を想定。</li>
<li>当記事執筆時点で最新の MySQL 5.7.10 をソースをビルドしてインストールする。</li>
<li>マシン搭載メモリは 4GB を想定。</li>
<li>一般ユーザでの作業を想定。</li>
<li>環境の相違等のために以下の方法ではうまく行かないこともあるだろう。<br/>
ログを確認して適宜対処すること。</li>
</ul>


<h3>1. 必要パッケージの準備</h3>

<p>以下の必要なパッケージが未インストールならインストールしておく。</p>

<pre><code class="text">$ sudo apt-get install wget cmake g++ bison libncurses5-dev
</code></pre>

<h3>2. MySQL ユーザ・グループの作成</h3>

<pre><code class="text">$ sudo groupadd mysql
$ sudo useradd -r -g mysql -s /bin/false mysql
</code></pre>

<ul>
<li><code>useradd</code> コマンドの <code>-r</code> は、システムアカウントを作成するオプション。</li>
<li><code>useradd</code> コマンドの <code>-s /bin/false</code> は、ログインシェルを無効にするオプション。</li>
</ul>


<h3>3. ソースの取得</h3>

<p>アーカイブファイルを取得、展開後、ディレクトリを移動しておく。（ダウンロード先は一般ユーザホームディレクトリとする）</p>

<pre><code>$ cd ~/
$ wget http://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-5.7.10.tar.gz
$ tar zxvf mysql-5.7.10.tar.gz
$ cd mysql-5.7.10
</code></pre>

<h3>4. Makefile の生成</h3>

<p><code>cmake</code> コマンドで Makefile を生成する。（よくある <code>configure</code> コマンドと同様の位置付け）</p>

<p>オプションは、デフォルト値とが異なる値を設定したいものだけを指定する。<br/>
（MySQL 5.7 からは C++ Boost ライブラリが必要なので <code>DOWNLOAD_BOOST</code> と <code>WITH_BOOST</code> は必須）<br/>
※デフォルト値は<a href="http://dev.mysql.com/doc/refman/5.7/en/source-configuration-options.html" title="MySQL :: MySQL 5.7 Reference Manual :: 2.9.4 MySQL Source-Configuration Options">こちら</a>を参照。</p>

<pre><code class="text">$ sudo cmake . \
 -DMYSQL_UNIX_ADDR=/var/lib/mysql/mysqld.sock \
 -DMYSQL_DATADIR=/var/lib/mysql \
 -DDEFAULT_CHARSET=utf8 \
 -DDEFAULT_COLLATION=utf8_general_ci \
 -DDOWNLOAD_BOOST=1 \
 -DWITH_BOOST=/usr/local/mysql
</code></pre>

<p><code>cmake</code> が途中で失敗した等の理由で <code>cmake</code> を再実行する場合は、キャッシュをクリアしてから再実行する。</p>

<pre><code class="text">$ sudo rm CMakeCache.txt
</code></pre>

<h3>5. ビルド</h3>

<pre><code class="text">$ sudo make
</code></pre>

<p>（時間がかかる）</p>

<h3>6. インストール</h3>

<pre><code class="text">$ sudo make install
</code></pre>

<h3>7. 環境変数 PATH の設定</h3>

<p>（当方は、 &ldquo;~/.profile&rdquo; で設定）</p>

<p><code>bash ~/.profile
PATH=$PATH:/usr/local/mysql/bin
export PATH
</code></p>

<p>そして、即時反映。</p>

<pre><code class="text">$ source ~/.profile
</code></pre>

<h3>8. インストールの確認</h3>

<p>MySQL サーバとクライアントのバージョンを確認してみる。</p>

<pre><code class="text">$ mysqld --version
mysqld  Ver 5.7.10 for Linux on x86_64 (Source distribution)

$ mysql --version
mysql  Ver 14.14 Distrib 5.7.10, for Linux (x86_64) using  EditLine wrapper
</code></pre>

<h3>9. 設定ファイルの編集</h3>

<p>環境に合わせて、 &ldquo;/etc/my.cnf&rdquo; を編集する。（サンプルは &ldquo;/usr/local/mysql/support-files&rdquo; ディレクトリ内にある）<br/>
（以下は当方の取り急ぎの例。<strong>実際に運用する際は綿密に検討して設定すること</strong>）</p>

<pre><code class="bash /etc/my.cnf"># For advice on how to change settings please see
# http://dev.mysql.com/doc/refman/5.7/en/server-configuration-defaults.html

[mysqld]
# ==== Basis
server-id                 = 1  # レプリケーション時に使用 (1 〜 2^32 - 1)
user                      = mysql
datadir                   = /var/lib/mysql
socket                    = /var/lib/mysql/mysql.sock
pid-file                  = /var/run/mysqld/mysqld.pid
performance_schema        = OFF     # Default: ON
skip_external_locking
sql_mode                  = STRICT_TRANS_TABLES,NO_ZERO_DATE,NO_ZERO_IN_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION
character_set_server      = utf8mb4
collation-server          = utf8mb4_general_ci
skip-character-set-client-handshake
default_storage_engine    = InnoDB  # Default: InnoDB
default_password_lifetime = 3650    # Default: 360
lc_messages               = en_US   # Default: en_US
lc_messages_dir           = /usr/local/mysql/share

# ==== Network, Connection
port                 = 3306
bind-address         = 0.0.0.0   # 127.0.0.1
max_connections      = 100       # Default: 151
max_connect_errors   = 100       # Default: 100
max_user_connections = 0         # Default: 0
wait_timeout         = 3600      # Default: 28800 (通常時:300, データインポート時:3600程度)
interactive_timeout  = 3600      # Default: 28800
connect_timeout      = 30        # Default: 10

# ==== Buffer
max_allowed_packet      = 32M    # Default: 1M (通常時:32M程度, データインポート時:128M程度)
thread_cache_size       = 40     # Default: 0 (max_connections の 1/3 程度?)
table_open_cache        = 400    # Default: 400 (同時接続数 * テーブル数?)
table_definition_cache  = 400    # Default: -1:autosized = 400 + (table_open_cache / 2)
tmp_table_size          = 16M    # Default: System 依存 (for Memory, &lt;= max_heap_table_size)
max_heap_table_size     = 32M    # Default: 16M         (for Memory, &gt;= tmp_table_size)
sort_buffer_size        = 4M     # Default: 2M (通常時:4M, ALTER TABLE 時:64M)
read_buffer_size        = 4M     # Default: 128K
read_rnd_buffer_size    = 4M     # Default: 256K
join_buffer_size        = 4M     # Default: 128K
query_cache_size        = 32M    # Default: 0 (通常時: 32M, データインポート時: 0)
query_cache_limit       = 16M    # Default: 1M
thread_stack            = 192K   # Default: 192K(32bit), 288K(64bit)

# ==== MyISAM
key_buffer_size         = 8M     # Default: 8M (for MyISAM)
myisam_sort_buffer_size = 8M     # Default: 8M (for MyISAM)

# ==== Binary Log
log_bin          = mysql-bin     # データインポート時はコメントアウト
expire_logs_days = 10
max_binlog_size  = 100M
binlog_format    = MIXED
log_bin_trust_function_creators = 1  # Default: 0 (for TRIGGER)

# ==== InnoDB
innodb_data_file_path           = ibdata1:1G  #:autoextend
innodb_autoextend_increment     = 64          # Default: 64
innodb_file_per_table           = 1
innodb_file_format              = Barracuda   # Default: Antelope
innodb_file_format_max          = Barracuda   # Default: Antelope
innodb_large_prefix             = 1           # Default: 0
innodb_buffer_pool_size         = 1024M       # Default: 128M (innodb_log_files_in_group * innodb_log_file_size &lt; innodb_buffer_pool_size)
#innodb_buffer_pool_instances    = 8           # Default: autosized(32bit), 8(64bit) (innodb_buffer_pool_size &gt;= 1G の場合にのみ有効)
innodb_sort_buffer_size         = 2M          # Default: 1M (通常時:2M, ALTER TABLE 時:64M)
innodb_write_io_threads         = 4           # Default: 4 (1 - 64)
innodb_read_io_threads          = 4           # Default: 4 (1 - 64)
innodb_log_buffer_size          = 32M         # Default: 8M (通常時:32M, データインポート時:128M程度)
innodb_log_group_home_dir       = /var/lib/mysql
innodb_log_files_in_group       = 2           # Default: 2   (変更注意!)
innodb_log_file_size            = 256M        # Default: 48M (変更注意!)
# &lt;= innodb_log_files_in_group * innodb_log_file_size &lt; innodb_buffer_pool_size
#    [変更方法](http://dev.mysql.com/doc/refman/5.6/ja/innodb-data-log-reconfiguration.html)
innodb_max_dirty_pages_pct      = 90          # Default: 75(%)
# &lt;= 小さい値：低速＆安定、大きい値：高速＆不安定(?)
innodb_io_capacity              = 100         # Default: 200 (100 - 2^64-1)
innodb_io_capacity_max          = 200         # Default: 200 (100 - 2^64-1)
innodb_lru_scan_depth           = 100         # Default: 1024 (100 - 2^32-1(32bit))
innodb_flush_method             = O_DIRECT    # Default: Not set
innodb_flush_log_at_trx_commit  = 1           # Default: 1 (データインポート時: 2 or 0)
innodb_doublewrite              = 1           # Default: 1 (データインポート時: 0)

# ==== Log
log_output          = FILE  # Default: FILE
log_warnings        = 1     # Default: 1
log-error           = /var/log/mysql/error.log
#general_log_file    = /var/log/mysql/mysql.log  # デバッグ時に有効化
#general_log         = 1                         # デバッグ時に有効化
#slow_query_log_file = /var/log/mysql/slow.log   # デバッグ時に有効化
#slow_query_log      = 1                         # デバッグ時に有効化
#long_query_time     = 30                        # デバッグ時に有効化

# ==== Event Scheduler
event_scheduler = 1  # Default: 0

[client]
port   = 3306
socket = /var/lib/mysql/mysql.sock
default-character-set = utf8mb4

[mysqld_safe]
socket = /var/lib/mysql/mysql.sock
nice   = 0

[mysqldump]
quick
quote-names
max_allowed_packet = 32M

[mysql]
default-character-set = utf8mb4
no-auto-rehash
show-warnings
prompt=\u@\h:\d\_\R:\m:\\s&gt;\_
pager="less -n -i -F -X -E"

[isamchk]
key_buffer = 16M

[myisamchk]
key_buffer_size  = 128M
sort_buffer_size = 128M
read_buffer      = 2M
write_buffer     = 2M

[mysqlhotcopy]
interactive-timeout

[mysqladmin]
user     = root
password = xxxxxxxx
</code></pre>

<h3>10. 所有者・所有グループの設定</h3>

<pre><code class="text">$ cd /usr/local/mysql
$ sudo chown -R mysql. .
</code></pre>

<h3>11. ログディレクトリの作成</h3>

<p>ログ用ディレクトリを作成し、所有者・グループを設定しておく。</p>

<pre><code class="text">$ sudo mkdir /var/log/mysql
$ sudo chown -R mysql. /var/log/mysql
</code></pre>

<h3>12. PID ディレクトリの作成</h3>

<pre><code class="text">$ sudo mkdir /var/run/mysqld
$ sudo chown -R mysql. /var/run/mysqld
</code></pre>

<h3>13. 初期設定</h3>

<pre><code class="text">$ sudo bin/mysqld --initialize --user=mysql
$ sudo bin/mysql_ssl_rsa_setup
$ sudo chown -R mysql. /var/lib/mysql
</code></pre>

<h3>14. 起動スクリプトの作成</h3>

<pre><code class="text">$ sudo cp support-files/mysql.server /etc/init.d/mysqld
$ sudo chown root:root /etc//init.d/mysqld
$ sudo chmod 755 /etc/init.d/mysqld
</code></pre>

<p>そして、編集する。</p>

<pre><code class="bash /etc/init.d/mysqld">if [ ! -d /var/run/mysqld ]; then
  mkdir /var/run/mysqld &amp;&amp; chown -R mysql. /var/run/mysqld
fi

basedir=/usr/local/mysql
datadir=/var/lib/mysql
</code></pre>

<ul>
<li>上記の <code>if ... mkdir ... fi</code> の部分について
&ldquo;/var/run&rdquo; ディレクトリは tmpfs であるため、マシンの電源を落とすと &ldquo;/var/run/mysqld&rdquo; ディレクトリが消滅してしまう。<br/>
その対策として、サービス起動時に &ldquo;/var/run/mysqld&rdquo; ディレクトリが存在しなければ作成し、所有者を設定している。<br/>
（過去、MySQL サーバ構築時にこのような対策をしたことはなかったけども。。。）</li>
</ul>


<h3>15. MySQL サーバの起動</h3>

<pre><code class="text">$ sudo /etc/init.d/mysqld start
</code></pre>

<h3>16. 自動起動の設定</h3>

<p>マシン起動時に MySQL サーバを自動起動するようにしたければ、以下のようにする。</p>

<pre><code class="text">$ sudo update-rc.d mysqld defaults
 Adding system startup for /etc/init.d/mysqld ...
   /etc/rc0.d/K20mysqld -&gt; ../init.d/mysqld
   /etc/rc1.d/K20mysqld -&gt; ../init.d/mysqld
   /etc/rc6.d/K20mysqld -&gt; ../init.d/mysqld
   /etc/rc2.d/S20mysqld -&gt; ../init.d/mysqld
   /etc/rc3.d/S20mysqld -&gt; ../init.d/mysqld
   /etc/rc4.d/S20mysqld -&gt; ../init.d/mysqld
   /etc/rc5.d/S20mysqld -&gt; ../init.d/mysqld

$ sudo sysv-rc-conf --list | grep mysqld  # &lt;= 2,3,4,5 が on であることを確認
mysqld       0:off      1:off   2:on    3:on    4:on    5:on    6:off
</code></pre>

<h3>17. root 初期パスワードの確認</h3>

<p>（記録されているログファイルは環境により異なる）</p>

<pre><code class="text">$ sudo grep 'temporary password' /var/log/mysql/error.log
2015-12-10T07:42:55.685053Z 1 [Note] A temporary password is generated for root@localhost: O&lt;ZeyQmcX5wQ
</code></pre>

<h3>18. MySQL の安全化</h3>

<p>root パスワードの設定等を行う。（説明は後述）</p>

<pre><code class="text">$ mysql_secure_installation
mysql_secure_installation: [ERROR] unknown variable 'default-character-set=utf8'

Securing the MySQL server deployment.

Enter password for user root:

The existing password for the user account root has expired. Please set a new password.

New password:

Re-enter new password:

VALIDATE PASSWORD PLUGIN can be used to test passwords
and improve security. It checks the strength of password
and allows the users to set only those passwords which are
secure enough. Would you like to setup VALIDATE PASSWORD plugin?

Press y|Y for Yes, any other key for No: n
Using existing password for root.
Change the password for root ? ((Press y|Y for Yes, any other key for No) : n

 ... skipping.
By default, a MySQL installation has an anonymous user,
allowing anyone to log into MySQL without having to have
a user account created for them. This is intended only for
testing, and to make the installation go a bit smoother.
You should remove them before moving into a production
environment.

Remove anonymous users? (Press y|Y for Yes, any other key for No) : y
Success.


Normally, root should only be allowed to connect from
'localhost'. This ensures that someone cannot guess at
the root password from the network.

Disallow root login remotely? (Press y|Y for Yes, any other key for No) : n

 ... skipping.
By default, MySQL comes with a database named 'test' that
anyone can access. This is also intended only for testing,
and should be removed before moving into a production
environment.


Remove test database and access to it? (Press y|Y for Yes, any other key for No) : y
 - Dropping test database...
Success.

 - Removing privileges on test database...
Success.

Reloading the privilege tables will ensure that all changes
made so far will take effect immediately.

Reload privilege tables now? (Press y|Y for Yes, any other key for No) : y
Success.

All done!
</code></pre>

<ol>
<li><code>Enter password for user root:</code> で root の初期パスワードを入力する。</li>
<li><code>New password:</code> で root の新しいパスワードを設定する。<br/>
（パスワードに使用する文字は数字・英小文字・英大文字・記号を混在させること。そうしなければポリシー違反でエラーになる）</li>
<li><code>VALIDATE PASSWORD PLUGIN ... Press y|Y for Yes, any other key for No:</code> でパスワード検証プラグインの設定を行うか問われるが、今回は行わないので <code>n</code> で応答する。</li>
<li><code>Change the password for root ? ((Press y|Y for Yes, any other key for No) :</code> で root のパスワードを変更するか問われるが、先ほど設定したの <code>n</code> で応答する。</li>
<li><code>Remove anonymous users?</code> で匿名ユーザを削除するために <code>y</code> で応答する。</li>
<li><code>Disallow root login remotely?</code> で root のリモート接続を拒否するか問われるが、リモート接続したいので <code>n</code> で応答する。（当然 <code>y</code> でもよい）</li>
<li><code>Remove test database and access to it?</code> でテストデータベースを削除するか問われるので、 <code>y</code> で応答する。</li>
<li><code>Reload privilege tables now?</code> で権限テーブルを即時リロードするか問われるので、 <code>y</code> で応答する。</li>
</ol>


<h3>19. 動作確認</h3>

<p>MySQL サーバにログインしてみる。</p>

<pre><code class="text"># mysql -u root -p
Enter password:
Welcome to the MySQL monitor.  Commands end with ; or \g.
Your MySQL connection id is 6
Server version: 5.7.10 Source distribution

Copyright (c) 2000, 2015, Oracle and/or its affiliates. All rights reserved.

Oracle is a registered trademark of Oracle Corporation and/or its
affiliates. Other names may be trademarks of their respective
owners.

Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

root@localhost:(none) 16:52:28&gt;
</code></pre>

<p>その他、各種操作を試してみる。</p>

<h3>20. その他</h3>

<ul>
<li>設定ファイルは &ldquo;/etc/my.cnf&rdquo; なので、実際に運用する際には綿密に検討して設定する。</li>
<li>パスワードの有効期限がデフォルトでは「360 日」に設定されている。<br/>
必要なら、システム変数 <code>default_password_lifetime</code> を編集する。</li>
</ul>


<h3>21. 参考サイト</h3>

<ul>
<li><a href="http://dev.mysql.com/doc/refman/5.7/en/source-installation.html" title="MySQL :: MySQL 5.7 Reference Manual :: 2.9 Installing MySQL from Source">MySQL :: MySQL 5.7 Reference Manual :: 2.9 Installing MySQL from Source</a></li>
</ul>


<hr />

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS - Mroonga インストール（by ソースビルド）！]]></title>
    <link href="http://komasaru.github.io/blog/2016/01/08/centos-mroonga-installation-by-src/"/>
    <updated>2016-01-08T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/01/08/centos-mroonga-installation-by-src</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>MySQL 5.7 に全文検索エンジン Groonga の機能を実現するストレージエンジン Mroonga をソースをビルドしてインストールする方法についてです。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>CentOS 6.7(32bit) での作業を想定。</li>
<li>当記事執筆時点で最新の Mroonga 5.10 をインストールする。</li>
<li>Groonga 5.1.0 がインストール済みであることを想定。<br/>
（参照：<a href="/2016/01/04/centos-groonga-installation-by-yum" title="CentOS - Groonga インストール（by yum パッケージ）！">CentOS - Groonga インストール（by yum パッケージ）！</a>）</li>
<li>MySQL 5.7.9 をソースをビルドしてインストールしていること。（Mroonga のビルドに MySQL のソースが必要なため）<br/>
（参照：<a href="/2015/12/20/centos-mysql-57-installation-by-src" title="CentOS - MySQL 5.7 インストール（ソースビルド）！">CentOS - MySQL 5.7 インストール（ソースビルド）！</a>）</li>
<li>MySQL 5.7.9 は &ldquo;/usr/local/mysql&rdquo; ディレクトリにインストールされていることを想定。</li>
<li>MySQL 5.7.9 のインストールに使用したソースは &ldquo;/usr/local/src/mysql-5.7.9&rdquo; ディレクトリに存在することを想定。</li>
</ul>


<h3>1. 必要ライブラリのインストール</h3>

<pre><code class="text"># yum -y install groonga-devel groonga-normalizer-mysql
</code></pre>

<p>形態素解析エンジン MeCab をトークナイザとして使用するなら MeCab もインストールする。（groonga-tokenizer-mecab を yum インストールしていれば、依存性の関係でインストールされているはず）</p>

<p>その他、ビルドに必要な <code>make</code> 等も未インストールならインストールしておく。</p>

<h3>2. ソースの取得</h3>

<p>アーカイブを取得・展開し、ディレクトリを移動する。</p>

<pre><code class="text"># /usr/local/src
# wget http://packages.groonga.org/source/mroonga/mroonga-5.10.tar.gz
# tar zxvf mroonga-5.10.tar.gz
# cd mroonga-5.10
</code></pre>

<h3>3. Makefile の生成</h3>

<pre><code class="text"># ./configure \
--with-mysql-source=/usr/local/src/mysql-5.7.9 \
--with-mysql-build=/usr/local/src/mysql-5.7.9 \
--with-mysql-config=/usr/local/mysql/bin/mysql_config
</code></pre>

<h3>4. ビルド</h3>

<pre><code class="text"># make
</code></pre>

<h3>5. インストール</h3>

<pre><code class="text"># make install
</code></pre>

<h3>6. MySQL への Mroonga プラグインの適用</h3>

<p>MySQL サーバが起動していることを確認してから以下を実行する。</p>

<pre><code class="text"># mysql -u root &lt; /usr/local/share/mroonga/install.sql
</code></pre>

<p><code>... does not exist</code> のメッセージが出力されるかもしれないが問題ない。（おそらく）</p>

<h3>7. Mroonga 導入の確認</h3>

<p>MySQL サーバに root でログインして確認してみる。</p>

<pre><code class="text">mysql&gt; SHOW ENGINES;
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| Engine             | Support | Comment                                                        | Transactions | XA   | Savepoints |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
| InnoDB             | DEFAULT | Supports transactions, row-level locking, and foreign keys     | YES          | YES  | YES        |
| MRG_MYISAM         | YES     | Collection of identical MyISAM tables                          | NO           | NO   | NO         |
| PERFORMANCE_SCHEMA | YES     | Performance Schema                                             | NO           | NO   | NO         |
| BLACKHOLE          | YES     | /dev/null storage engine (anything you write to it disappears) | NO           | NO   | NO         |
| MEMORY             | YES     | Hash based, stored in memory, useful for temporary tables      | NO           | NO   | NO         |
| CSV                | YES     | CSV storage engine                                             | NO           | NO   | NO         |
| Mroonga            | YES     | CJK-ready fulltext search, column store                        | NO           | NO   | NO         |
| MyISAM             | YES     | MyISAM storage engine                                          | NO           | NO   | NO         |
| FEDERATED          | NO      | Federated MySQL storage engine                                 | NULL         | NULL | NULL       |
| ARCHIVE            | YES     | Archive storage engine                                         | NO           | NO   | NO         |
+--------------------+---------+----------------------------------------------------------------+--------------+------+------------+
10 rows in set (0.01 sec)
</code></pre>

<p><code>Mroonga</code> 行が存在することを確認する。</p>

<p>その他、 Mroonga の簡単な使用方法は以下の過去記事等を参照。</p>

<ul>
<li><a href="/2015/08/21/mariadb-mroonga-installation" title="MariaDB 10.0.x - Mroonga プラグインの有効化！">MariaDB 10.0.x - Mroonga プラグインの有効化！</a></li>
</ul>


<h3>8. 参考サイト</h3>

<ul>
<li><a href="http://mroonga.org/ja/docs/install/others.html" title="2.7. その他 — Mroonga v5.10 documentation">2.7. その他 — Mroonga v5.10 documentation</a></li>
</ul>


<hr />

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
