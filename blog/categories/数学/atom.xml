<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 数学 | mk-mode BLOG]]></title>
  <link href="http://komasaru.github.io/blog/categories/数学/atom.xml" rel="self"/>
  <link href="http://komasaru.github.io/"/>
  <updated>2016-02-26T00:04:57+09:00</updated>
  <id>http://komasaru.github.io/</id>
  <author>
    <name><![CDATA[mk-mode.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Ruby - ３次スプライン補間！]]></title>
    <link href="http://komasaru.github.io/blog/2016/01/12/ruby-spline-interpolation/"/>
    <updated>2016-01-12T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2016/01/12/ruby-spline-interpolation</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>過去に「ラグランジュ補間」や「ニュートン補間」を C++ や Ruby で実装したことがありました。</p>

<ul>
<li><a href="/2013/03/10/cpp-interpolate-lagrange/" title="C++ - ラグランジュ補間！ - mk-mode BLOG">C++ - ラグランジュ補間！ - mk-mode BLOG</a></li>
<li><a href="/2013/03/11/ruby-interpolate-lagrange/" title="Ruby - ラグランジュ補間！ - mk-mode BLOG">Ruby - ラグランジュ補間！ - mk-mode BLOG</a></li>
<li><a href="/2013/03/13/cpp-interpolate-newton/" title="C++ - ニュートン補間！ - mk-mode BLOG">C++ - ニュートン補間！ - mk-mode BLOG</a></li>
<li><a href="/2013/03/14/ruby-interpolate-newton/" title="Ruby - ニュートン補間！ - mk-mode BLOG">Ruby - ニュートン補間！ - mk-mode BLOG</a></li>
</ul>


<p>今回は「３次スプライン補間」を Ruby で実装してみました。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Ruby 2.2.3-p173 での作業を想定。</li>
<li>グラフも描画するので、RubyGems ライブラリの gnuplot をインストールしておく。</li>
</ul>


<h3>1. ３次スプライン補間について</h3>

<p><a href="http://akita-nct.jp/yamamoto/lecture/2007/5E_comp_app/interpolation/interpolation_html/node3.html" title="3 スプライン補間">こちらの内容</a>を自分なりに理解して以下のようにまとめた。</p>

<p>（数式が多いので別途 <script type="math/tex">\LaTeX</script> で記載した文書を貼り付け）</p>

<p><img src="/images/2016/01/12/SPLINE_INTERPOLATION_1.png" title="SPLINE_INTERPOLATION_1" alt="SPLINE_INTERPOLATION_1" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_2.png" title="SPLINE_INTERPOLATION_2" alt="SPLINE_INTERPOLATION_2" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_3.png" title="SPLINE_INTERPOLATION_3" alt="SPLINE_INTERPOLATION_3" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_4.png" title="SPLINE_INTERPOLATION_4" alt="SPLINE_INTERPOLATION_4" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_5.png" title="SPLINE_INTERPOLATION_5" alt="SPLINE_INTERPOLATION_5" />
<img src="/images/2016/01/12/SPLINE_INTERPOLATION_6.png" title="SPLINE_INTERPOLATION_6" alt="SPLINE_INTERPOLATION_6" /></p>

<p>（上記文書の PDF は<a href="http://www.mk-mode.com/rails/docs/INTERPOLATION_SPLINE.pdf" title="３次スプライン補間.pdf（Ａ４・４ページ）">こちら</a>）</p>

<h3>2. Ruby スクリプトの作成</h3>

<p>以下のような Ruby スクリプトを作成する。<br/>
ロジックは前項の説明（アルゴリズム）どおりなので説明しない。（ただ、連立一次方程式の解法には「<a href="/2013/09/21/ruby-simultaneous-equation-by-gauss-jorden/" title="Ruby - 連立方程式解法（ガウス・ジョルダン法）！">ガウス・ジョルダン法</a>」を使用した）</p>

<pre><code class="ruby spline_interpolation.rb">#!/usr/local/bin/ruby
# coding: utf-8
#*********************************************
# ３次スプライン補間
# （gnuplot によるグラフ描画付き）
#*********************************************
#
require 'gnuplot'

# N + 1 個の点
X = [0.0, 2.0, 3.0, 5.0, 7.0, 8.0]
Y = [0.8, 3.2, 2.8, 4.5, 2.5, 1.9]

class SplineInterpolation
  def initialize
    @x, @y = X, Y
    @n = @x.size - 1
    h = calc_h
    w = calc_w(h)
    matrix = gen_matrix(h, w)
    v = [0, gauss_jordan(matrix), 0].flatten
    @b = calc_b(v)
    @a = calc_a(v)
    @d = calc_d(v)
    @c = calc_c(v)
  end

  def interpolate(t)
    i = search_i(t)
    s  = @a[i] * (t - @x[i]) ** 3
    s += @b[i] * (t - @x[i]) ** 2
    s += @c[i] * (t - @x[i])
    s += @d[i]
    return s
  rescue =&gt; e
    $stderr.puts "[#{e.class}] #{e.message}"
    exit 1
  end

  private

  def calc_h
    h = Array.new
    0.upto(@n - 1) { |i| h &lt;&lt; @x[i + 1] - @x[i] }
    return h
  end

  def calc_w(h)
    w = Array.new
    1.upto(@n - 1) do |i|
      w &lt;&lt; 6 * ((@y[i + 1] - @y[i]) / h[i] - (@y[i] - @y[i - 1]) / h[i - 1])
    end
    return w
  end

  def gen_matrix(h, w)
    matrix = Array.new(@n - 1).map { Array.new(@n, 0) }
    0.upto(@n - 2) do |i|
      matrix[i][i]     = 2 * (h[i] + h[i + 1])
      matrix[i][-1]    = w[i]
      next if i == 0
      matrix[i - 1][i] = h[i]
      matrix[i][i - 1] = h[i]
      matrix[i][i - 1] = h[i]
    end
    return matrix
  end

  def gauss_jordan(matrix)
    v = Array.new
    n = @n - 1
    0.upto(n - 1) do |k|
      p = matrix[k][k]
      k.upto(n) { |j| matrix[k][j] = matrix[k][j] / p.to_f }
      0.upto(n - 1) do |i|
        unless i == k
          d = matrix[i][k]
          k.upto(n) { |j| matrix[i][j] = matrix[i][j] - d * matrix[k][j] }
        end
      end
    end
    matrix.each { |row| v &lt;&lt; row[-1] }
    return v
  end

  def calc_a(v)
    a = Array.new
    0.upto(@n - 1) { |i| a &lt;&lt; (v[i + 1] - v[i]) / (6 * (@x[i + 1] - @x[i])) }
    return a
  end

  def calc_b(v)
    b = Array.new
    0.upto(@n - 1) { |i| b &lt;&lt; v[i] / 2.0 }
    return b
  end

  def calc_c(v)
    c = Array.new
    0.upto(@n - 1) do |i|
      c &lt;&lt; (@y[i + 1] - @y[i]) / (@x[i + 1] - @x[i]) \
         - (@x[i + 1] - @x[i]) * (2 * v[i] + v[i + 1]) / 6
    end
    return c
  end

  def calc_d(v)
    return @y[0..-1]
  end

  def search_i(t)
    i, j = 0, j = @x.size - 1
    while i &lt; j
      k = (i + j) / 2
      if @x[k] &lt; t
        i = k + 1
      else
        j = k
      end
    end
    i -= 1 if i &gt; 0
    return i
  end
end

class Graph
  def initialize(x_g, y_g)
    @x_g, @y_g, @x, @y = x_g, y_g, X, Y
  end

  def plot
    Gnuplot.open do |gp|
      Gnuplot::Plot.new(gp) do |plot|
        plot.terminal "png enhanced font 'IPA P ゴシック' fontscale 1.2"
        plot.output   "spline_interpolation.png"
        plot.title    "スプライン補間"
        plot.xlabel   "x"
        plot.ylabel   "y"
        plot.grid

        # 計算によって得られた点
        plot.data &lt;&lt; Gnuplot::DataSet.new([@x_g, @y_g]) do |ds|
          ds.with      = "points"
          ds.linewidth = 2
          ds.linecolor = 3
          ds.notitle
        end

        # 予め与えらた点
        plot.data &lt;&lt; Gnuplot::DataSet.new([@x, @y]) do |ds|
          ds.with      = "points"
          ds.linewidth = 2
          ds.linecolor = 1
          ds.notitle
        end
      end
    end
  rescue =&gt; e
    $stderr.puts "[#{e.class}] #{e.message}"
    exit 1
  end
end

# グラフ用配列
x_g, y_g = Array.new, Array.new

# ３次スプライン補間
obj = SplineInterpolation.new
X[0].step(X[-1], 0.1) do |x|
  y = obj.interpolate(x)
  printf("%8.4f, %8.4f\r\n", x, y)
  x_g &lt;&lt; x
  y_g &lt;&lt; y
end

# グラフ描画
Graph.new(x_g, y_g).plot
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/01b9a98af2a6cae0a5df" title="Gist - Ruby script to calc 3D-Spline-Interpolation.">Gist - Ruby script to calc 3D-Spline-Interpolation.</a></li>
</ul>


<h3>3. Ruby スクリプトの実行</h3>

<pre><code class="text">$ ./spline_interpolation.rb
  0.0000,   0.8000
  0.1000,   0.9861
  0.2000,   1.1713
  0.3000,   1.3544
  0.4000,   1.5346
  0.5000,   1.7108
  0.6000,   1.8820
  0.7000,   2.0473
  0.8000,   2.2056
  0.9000,   2.3559
  1.0000,   2.4973
  1.1000,   2.6287
  1.2000,   2.7492
  1.3000,   2.8578
  1.4000,   2.9534
  1.5000,   3.0351
  1.6000,   3.1019
  1.7000,   3.1528
  1.8000,   3.1868
  1.9000,   3.2028
  2.0000,   3.2000
  2.1000,   3.1782
     :         :
====&lt; 途中省略&gt;====
     :         :
  7.5000,   2.1279
  7.6000,   2.0754
  7.7000,   2.0275
  7.8000,   1.9831
  7.9000,   1.9410
  8.0000,   1.9000
</code></pre>

<h3>4. グラフ確認</h3>

<p>Ruby スクリプトと同じディレクトリ内に &ldquo;spline_interpolation.png&rdquo; という画像ファイルが存在するはずなので、確認してみる。<br/>
（赤色の <code>x</code> が予め与えられた点、水色の <code>+</code> が補間された点）</p>

<p><img src="/images/2016/01/12/spline_interpolation.png" title="SPLINE_INTERPOLATION" alt="SPLINE_INTERPOLATION" /></p>

<h3>5. 参考サイト</h3>

<ul>
<li><a href="http://akita-nct.jp/yamamoto/lecture/2007/5E_comp_app/interpolation/interpolation_html/node3.html" title="3 スプライン補間">スプライン補間</a></li>
<li><a href="/2013/09/21/ruby-simultaneous-equation-by-gauss-jorden/" title="Ruby - 連立方程式解法（ガウス・ジョルダン法）！">ガウス・ジョルダン法</a></li>
</ul>


<hr />

<p>スプライン補間ができないと先に進めない（私的な）事案があったために今回まとめてみた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - 円周率計算（BBP の公式使用）！]]></title>
    <link href="http://komasaru.github.io/blog/2015/05/19/ruby-pi-computation-by-bbp/"/>
    <updated>2015-05-19T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/05/19/ruby-pi-computation-by-bbp</id>
    <content type="html"><![CDATA[<p>こんにちは。</p>

<p>前回、 BBP(Bailey, Borwein, Plouffe) の公式を使用して任意の桁の円周率を16進で計算するアルゴリズムを C++ で実装しました。</p>

<ul>
<li><a href="/2015/05/17/cpp-pi-computation-by-bbp/" title="C++ - 円周率計算（BBP の公式使用）！">C++ - 円周率計算（BBP の公式使用）！</a></li>
</ul>


<p>今回は、同じアルゴリズムを Ruby で実装してみました。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.1(64bit) での作業を想定。</li>
<li>ruby 2.2.2-p95 での作業を想定。</li>
<li>計算に使用したマシンは CPU: Intel Core2Duo E8500 ( 3.16GHz ), MEM: 3.9GiB</li>
</ul>


<h3>1. BBP の公式を使用した円周率計算について</h3>

<p>前回の記事を参照。</p>

<ul>
<li><a href="/2015/05/17/cpp-pi-computation-by-bbp/" title="C++ - 円周率計算（BBP の公式使用）！">C++ - 円周率計算（BBP の公式使用）！</a></li>
</ul>


<h3>2. Ruby スクリプトの作成</h3>

<p>第1引数で計算を開始する桁を指定し、その桁から 10 桁を出力する仕様。（べき剰余の演算も自前で実装。「<a href="/2015/05/15/ruby-implementation-of-modular-exponentiation" title="Ruby - べき剰余アルゴリズムの実装！">Ruby - べき剰余アルゴリズムの実装！</a>」参照）</p>

<pre><code class="ruby pi_bbp.rb">#!/usr/local/bin/ruby
#=======================================
# Computation of pi by BBP algorithm.
#=======================================
require 'benchmark'

class PiBbp
  EPS = 1.0e-17  # Loop-exit accuration of the right summation

  def comp_pi(d)
    d -= 1
    pi = (4 * s(1, d) - 2 * s(4, d) - s(5, d) - s(6, d)) % 1.0
    printf("FRACTION  : %.15f\n", pi)
    printf("HEX DIGITS: %10x\n", (pi * 16 ** 10).truncate)
  end

  def s(j, d)
    # Left sum
    s = 0.0
    k = 0
    while k &lt;= d
      r = 8 * k + j
      t = mod_exp(16, d - k, r)
      t /= r.to_f
      s += t % 1.0
      s %= 1.0
      k += 1
    end

    # Right sum
    loop do
      r = 8 * k + j
      t = 16.0 ** (d - k) / r
      break if t &lt; EPS
      s += t
      s %= 1.0
      k += 1
    end

    return s
  end

  def mod_exp(b, e, m)
    return 1 if e == 0
    ans = mod_exp(b, e / 2, m)
    ans = (ans * ans) % m
    ans = (ans * b) % m if e % 2 == 1
    return ans
  end
end

exit unless __FILE__ == $0
exit unless ARGV[0]
obj = PiBbp.new
res = Benchmark.realtime do
  obj.comp_pi(ARGV[0].to_i)
end
puts "( TIME: #{res} seconds )"
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/a091c46595cdbc8d276a" title="Gist - Ruby script code to compute pi with BBP formula.">Gist - Ruby script to compute pi with BBP formula.</a></li>
</ul>


<h3>3. 動作確認</h3>

<p><code>HEX DIGITS</code> が求める円周率（16進）。（但し、計算公式の特性上、後半の桁の値は保証されない）</p>

<pre><code class="text">$ ./pi_bbp.rb 1
FRACTION  : 0.141592653589793
HEX DIGITS: 243f6a8885
TIME: 0.00012832199718104675 seconds )

$ ./pi_bbp.rb 91
FRACTION  : 0.910345837630448
HEX DIGITS: e90c6cc0ac
TIME: 0.0006358680002449546 seconds )

$ ./pi_bbp.rb 991
FRACTION  : 0.284592623548894
HEX DIGITS: 48db0fead3
TIME: 0.008182067002053373 seconds )

$ ./pi_bbp.rb 9991
FRACTION  : 0.151042259944499
HEX DIGITS: 26aab49ec6
( TIME: 0.10906490000343183 seconds )

$ ./pi_bbp.rb 99991
FRACTION  : 0.633399233605157
HEX DIGITS: a22673c1a5
( TIME: 1.3719816630000423 seconds )

$ ./pi_bbp.rb 999991
FRACTION  : 0.624957331312628
HEX DIGITS: 9ffd342362
( TIME: 14.838047453999025 seconds )

$ ./pi_bbp.rb 9999991
FRACTION  : 0.756411434763846
HEX DIGITS: c1a42e06a1
TIME: 177.62035008599923 seconds
</code></pre>

<p>（99,999,991桁目からの10桁（1億桁目まで）は計算していないが、当方の環境では30分少しかかりそう）</p>

<h3>4. 計算結果の検証</h3>

<p>&ldquo;<a href="http://bellard.org/pi/pi2700e9/pidigits.html" title="Pi Digits">Pi Digits</a>&rdquo; の計算結果と比較し、任意のあらゆる部分が一致することを確認した。</p>

<h3>5. 参考サイト</h3>

<ul>
<li><a href="http://xn--w6q13e505b.jp/" title="円周率.jp">円周率.jp</a></li>
<li><a href="http://www.experimentalmath.info/bbp-codes/" title="BBP Code Directory">BBP Code Directory</a></li>
<li><a href="http://bellard.org/pi/pi2700e9/announce.html" title="Pi Computation Record">Pi Computation Record</a></li>
</ul>


<hr />

<p>当然ながら同じアルゴリズムを C++ に実装した場合と比べると随分と速度が遅いです。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ - 円周率計算（BBP の公式使用）！]]></title>
    <link href="http://komasaru.github.io/blog/2015/05/17/cpp-pi-computation-by-bbp/"/>
    <updated>2015-05-17T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/05/17/cpp-pi-computation-by-bbp</id>
    <content type="html"><![CDATA[<p>こんにちは。</p>

<p>円周率を計算する際、小数点以下1桁目から希望の桁までを全て計算する方法以外に、希望の桁だけを計算する方法もあります。</p>

<p>小数点以下1桁目から希望の桁までを全て計算した後、任意の桁の値が正しいかどうかを検証するために使用したりします。</p>

<p>今回は BBP(Bailey, Borwein, Plouffe ) の公式を使用して任意の桁の円周率を16進で計算するアルゴリズムを、C++ で実装してみました。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.1(64bit) での作業を想定。</li>
<li>計算に使用したマシンは CPU: Intel Core2Duo E8500 ( 3.16GHz ), MEM: 3.9GiB</li>
</ul>


<h3>1. BBP の公式を使用した円周率計算について</h3>

<p>（数式が多いので <script type="math/tex">\LaTeX</script> で作成した文書を貼り付け）（PDF ファイルは「<a href="http://www.mk-mode.com/rails/archive#arc-math" title="mk-mode SITE: アーカイブ">mk-mode SITE: アーカイブ</a>」に置いた）</p>

<p><img src="/images/2015/05/17/PI_BBP.png" title="PI_BBP" alt="PI_BBP" /></p>

<h3>2. C++ ソースコードの作成</h3>

<p>第1引数で計算を開始する桁を指定し、その桁から 14 桁ほど計算後に先頭 10 桁を出力する仕様。（べき剰余の演算も自前で実装。「<a href="/2015/05/13/cpp-implementation-of-modular-exponentiation" title="C++ - べき剰余アルゴリズムの実装！">C++ - べき剰余アルゴリズムの実装！</a>」参照）</p>

<pre><code class="c pi_bbp.cpp">/***************************************************************
 * Computing pi with BBP formula.
 **************************************************************/
#include &lt;math.h&gt;
#include &lt;iostream&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

using namespace std;

class Bbp
{
    // Declaration
    int     d;                          // Digits to compute
    double  pi;                         // Pi
    char    pi_hex[14];                 // Pi(Hex)
    clock_t t0, t1;                     // Time
    double  S(int);                     // Compute S
    long    compModExp(int, int, int);  // Computer Modular Exponentiation
    void    convHex(double, char[]);    // Convert Pi to Hex-string

public:
    Bbp(int);            // Constructor
    void compPi();       // Compute PI
};

/*
 * Constructor
 */
Bbp::Bbp(int d)
{
    cout &lt;&lt; "**** PI Computation ( digit: " &lt;&lt; d &lt;&lt; " )" &lt;&lt; endl;
    this-&gt;d = d - 1;
}

/*
 * Compute PI
 */
void Bbp::compPi()
{
    // Time (start)
    t0 = clock();

    // Compute Pi
    pi = 4.0 * S(1) - 2.0 * S(4) - S(5) - S(6);
    pi = pi - (int)pi + 1.0;
    convHex(pi, pi_hex);
    printf("FRACTION  : %.15f\n",   pi);
    printf("HEX DIGITS: %10.10s\n", pi_hex);

    // Time (end of computation)
    t1 = clock();
    cout &lt;&lt; "( TIME: " &lt;&lt; (double)(t1 - t0) / CLOCKS_PER_SEC
         &lt;&lt; " seconds )" &lt;&lt; endl;
}

/*
 * Compute S
 */
double Bbp::S(int j)
{
    double s = 0.0;        // Summation of Total, Left
    double t;              // Each term of right summation
    int    r;              // Denominator
    int    k;              // Loop index
    double EPS = 1.0e-17;  // Loop-exit accuration of the right summation

    // Left Sum (0 ... d)
    for (k = 0; k &lt;= d; k++) {
        r = 8 * k + j;
        t = (double)compModExp(16, d - k, r);
        t /= r;
        s += t - (int)t;
        s -= (int)s;
    }

    // Right sum (d + 1 ...)
    while (1) {
        r = 8 * k + j;
        t = pow(16.0, (double)(d - k));
        t /= (double)r;
        if (t &lt; EPS) break;
        s += t;
        s -= (int)s;
        k ++;
    }

    return s;
}

/*
 * Compute Modular Exponentiation
 */
long Bbp::compModExp(int b, int e, int m)
{
    long ans;

    if (e == 0) return 1;

    ans = compModExp(b, e / 2, m);
    ans = (ans * ans) % m;
    if ((e % 2) == 1) ans = (ans * b) % m;

    return ans;
}

/*
 * Convert Pi to Hex-strings
 */
void Bbp::convHex(double x, char chx[]) {
    double y;
    int i;
    const char hx[] = "0123456789ABCDEF";

    y = fabs(x);
    for (i = 0; i &lt; 16; i++) {
        y = 16.0 * (y - floor(y));
        chx[i] = hx[(int)(y)];
    }
}

int main(int argc, char** argv)
{
    try
    {
        // Getting arguments
        if (argc == 1) {
            cout &lt;&lt; "Please input a digit to compute!" &lt;&lt; endl;
            return EXIT_FAILURE;
        }
        int d = atoi(argv[1]);

        // Instantiation
        Bbp objMain(d);

        // Compute PI
        objMain.compPi();
    }
    catch (...) {
        cout &lt;&lt; "ERROR!" &lt;&lt; endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/9e418eb666ab649ef589" title="Gist - C++ source code to compute pi with BBP formula.">Gist - C++ source code to compute pi with BBP formula.</a></li>
</ul>


<h3>3. C++ ソースコードのコンパイル</h3>

<p>作成した C++ ソースコードを以下のようにコンパイル。<br/>
（<code>-Wall</code> 警告も出力するオプション、<code>-O2</code> 最適化のオプション）</p>

<pre><code class="text">$ g++ -Wall -O2 -o pi_bbp pi_bbp.cpp
</code></pre>

<h3>4. 動作確認</h3>

<p><code>HEX DIGITS</code> が求める円周率（16進）。（但し、計算公式の特性上、後半の桁の値は保証されない）</p>

<pre><code class="text">$ ./pi_bbp 1
**** PI Computation ( digit: 1 )
FRACTION  : 0.141592653589793
HEX DIGITS: 243F6A8885
( TIME: 5.1e-05 seconds )

$ ./pi_bbp 91
**** PI Computation ( digit: 91 )
FRACTION  : 0.910345837630448
HEX DIGITS: E90C6CC0AC
( TIME: 0.0001 seconds )

$ ./pi_bbp 991
**** PI Computation ( digit: 991 )
FRACTION  : 0.284592623548894
HEX DIGITS: 48DB0FEAD3
( TIME: 0.001648 seconds )

$ ./pi_bbp 9991
**** PI Computation ( digit: 9991 )
FRACTION  : 1.151042259944499
HEX DIGITS: 26AAB49EC6
( TIME: 0.015286 seconds )

$ ./pi_bbp 99991
**** PI Computation ( digit: 99991 )
FRACTION  : 1.633399233605157
HEX DIGITS: A22673C1A5
( TIME: 0.173048 seconds )

$ ./pi_bbp 999991
**** PI Computation ( digit: 999991 )
FRACTION  : 1.624957331312628
HEX DIGITS: 9FFD342362
( TIME: 2.06615 seconds )

$ ./pi_bbp 9999991
**** PI Computation ( digit: 9999991 )
FRACTION  : 0.756411434763846
HEX DIGITS: C1A42E06A1
( TIME: 24.2591 seconds )

$ ./pi_bbp 99999991
**** PI Computation ( digit: 99999991 )
FRACTION  : 0.610248188412270
HEX DIGITS: 9C3939ABAC
( TIME: 280.681 seconds )
</code></pre>

<h3>5. 計算結果検証</h3>

<p>&ldquo;<a href="http://bellard.org/pi/pi2700e9/pidigits.html" title="Pi Digits">Pi Digits</a>&rdquo; の計算結果と比較し、任意のあらゆる部分が一致することを確認した。</p>

<h3>6. 参考サイト</h3>

<ul>
<li><a href="http://xn--w6q13e505b.jp/" title="円周率.jp">円周率.jp</a></li>
<li><a href="http://www.experimentalmath.info/bbp-codes/" title="BBP Code Directory">BBP Code Directory</a></li>
<li><a href="http://bellard.org/pi/pi2700e9/announce.html" title="Pi Computation Record">Pi Computation Record</a></li>
</ul>


<hr />

<p>Chudnovsky の公式を使用して小数点以下1桁目から1億桁目まで計算するのと、 BBP の公式を使用して1億桁目（但し、16進）を計算するのとではあまり計算時間に差がないようなので、円周率の任意の桁の値を検証するのにそれほどストレスを感じないでしょう。（当然、環境にもよるでしょうが）</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby - べき剰余アルゴリズムの実装！]]></title>
    <link href="http://komasaru.github.io/blog/2015/05/15/ruby-implementation-of-modular-exponentiation/"/>
    <updated>2015-05-15T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/05/15/ruby-implementation-of-modular-exponentiation</id>
    <content type="html"><![CDATA[<p>こんにちは。</p>

<p>前回 C++ で「べき剰余」のアルゴリズムを実装しました。</p>

<ul>
<li><a href="/2015/05/13/cpp-implementation-of-modular-exponentiation" title="C++ - べき剰余アルゴリズムの実装！">C++ - べき剰余アルゴリズムの実装！</a></li>
</ul>


<p>今回は Ruby で実装してみました。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.1(64bit) での作業を想定。</li>
<li>Ruby 2.2.2-p95 での作業を想定。</li>
</ul>


<h3>1. べき剰余、べき剰余演算アルゴリズムについて</h3>

<p>前回の記事を参照。</p>

<ul>
<li><a href="/2015/05/13/cpp-implementation-of-modular-exponentiation" title="C++ - べき剰余アルゴリズムの実装！">C++ - べき剰余アルゴリズムの実装！</a></li>
</ul>


<h3>2. Ruby スクリプトの作成</h3>

<p>まず、非再帰的な記述方法で作成。</p>

<pre><code class="ruby modular_exponentiation_1.rb">#!/usr/local/bin/ruby
#*************************************
# Modular Exponentiation (iterative). 
#*************************************
class ModularExponentiation
  def comp_mod_exp(b, e, m)
    ans = 1
    while e &gt; 0
      ans = (ans * b) % m if (e &amp; 1) == 1
      e &gt;&gt;= 1
      b = (b * b) % m
    end
    return ans
  rescue =&gt; e
    raise
  end
end

exit unless __FILE__ == $0

begin
  # me = b^e mod m
  b, e, m = 12345, 6789, 4567
  obj = ModularExponentiation.new
  me = obj.comp_mod_exp(b, e, m)
  puts "#{b}^#{e} mod #{m} = #{me}"
rescue =&gt; e
  puts "[#{e.class}] #{e.message}"
  e.backtrace.each{ |bt| puts "\t#{bt}" }
  exit 1
end
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/bcbd785acda1bc2abb69" title="Gist - Ruby script to compute modular-exponentiation iteratively.">Gist - Ruby script to compute modular-exponentiation iteratively.</a></li>
</ul>


<p>次に、再帰的な記述方法で作成。(<code>comp_mod_exp</code> メソッドの内容が異なるだけ）</p>

<pre><code class="ruby modular_exponentiation_2.rb">#!/usr/local/bin/ruby
#*************************************
# Modular Exponentiation (recursive). 
#*************************************
class ModularExponentiation
  def comp_mod_exp(b, e, m)
    return 1 if e == 0
    ans = comp_mod_exp(b, e / 2, m)
    ans = (ans * ans) % m
    ans = (ans * b) % m if e % 2 == 1
    return ans
  rescue =&gt; e
    raise
  end
end

exit unless __FILE__ == $0

begin
  # me = b^e mod m
  b, e, m = 12345, 6789, 4567
  obj = ModularExponentiation.new
  me = obj.comp_mod_exp(b, e, m)
  puts "#{b}^#{e} mod #{m} = #{me}"
rescue =&gt; e
  puts "[#{e.class}] #{e.message}"
  e.backtrace.each{ |bt| puts "\t#{bt}" }
  exit 1
end
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/3b68332a54f297a66016" title="Gist - Ruby script to compute modular-exponentiation recursively.">Gist - Ruby script to compute modular-exponentiation recursively.</a></li>
</ul>


<h3>3. 動作確認</h3>

<pre><code class="text">$ ./modular_exponentiation_1
12345^6789 mod 4567 = 62

$ ./modular_exponentiation_2
12345^6789 mod 4567 = 62
</code></pre>

<h3>6. 参考サイト</h3>

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E5%86%AA%E5%89%B0%E4%BD%99" title="冪剰余 - Wikipedia">冪剰余 - Wikipedia</a></li>
</ul>


<hr />

<p>Ruby で「べき剰余」を計算する際に役立ちます。（実際、個人的にべき剰余の計算が必要な局面があるので）</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++ - べき剰余アルゴリズムの実装！]]></title>
    <link href="http://komasaru.github.io/blog/2015/05/13/cpp-implementation-of-modular-exponentiation/"/>
    <updated>2015-05-13T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/05/13/cpp-implementation-of-modular-exponentiation</id>
    <content type="html"><![CDATA[<p>こんにちは。</p>

<p>C++ に「べき剰余アルゴリズム」を実装したい事案があったので、記録しておきます。</p>

<!--more-->


<h3>0. 前提条件</h3>

<ul>
<li>Linux Mint 17.1(64bit) での作業を想定。</li>
<li>G++ 4.8.2, 4.9.1 での作業を想定。（特別なことはしていないので、他のバージョンでも問題ないはず）</li>
</ul>


<h3>1. べき剰余について</h3>

<p>その名のとおり、べき乗の剰余のことである。</p>

<p>底を <script type="math/tex">b(\in\mathbb{Z})</script> 、べき指数を <script type="math/tex">e(\in\mathbb{Z})</script> 、剰余を <script type="math/tex">m(\in\mathbb{Z})</script> とすると、べき剰余 <script type="math/tex">c</script> は次のように表される。</p>

<p><script type="math/tex; mode=display">
c \equiv b<sup>e</sup> \pmod m
</script></p>

<h3>2. べき剰余演算アルゴリズムについて</h3>

<p>当然単純にべき乗後に剰余を計算してもよいが、計算機ではべき乗時にすぐにオーバーフローしてしまうことは目に見えている。（この場合の計算量は、 <script type="math/tex">O(\log(e))</script>回の乗算と最後の剰余１回となる）<br/>
そこで、計算機での計算に都合のいいように計算しなければならない。</p>

<p>たとえば、<script type="math/tex">a, b (\in\mathbb{Z})</script> があるとき、</p>

<p><script type="math/tex; mode=display">
(a \times b)\pmod m \equiv ((a\pmod m) \times (b\pmod m))\pmod m
</script></p>

<p>と変形できる。このアルゴリズムを使用すると、剰余計算が<script type="math/tex">O(\log(e))</script>回に増えるが乗算それぞれの計算コストは低くなるため、計算機にとってはパフォーマンスが良くなる。</p>

<p>また、プログラミングで実装する際、</p>

<p><script type="math/tex; mode=display">
b<sup>e</sup> =
\begin{cases}
    b \, ( b^{2})^{\frac{e - 1}{2}} &amp; \mbox{( } e \mbox{ ：奇数)} \
    (b^{2})^{\frac{e}{2}} &amp; \mbox{( } e \mbox{ ：偶数)}
\end{cases}
</script></p>

<p>であることを再帰的に利用するとパフォーマンスがよくなるだろう。</p>

<h3>3. C++ ソースコードの作成</h3>

<p>まず、比較のために非再帰的な記述方法で作成。</p>

<pre><code class="c ModularExponentiation1.cpp">/***************************************************************
 * Modular Exponentiation (iterative).
 **************************************************************/
#include &lt;iostream&gt;
#include &lt;stdlib.h&gt;

using namespace std;

class ModularExponentiation
{
    int ans;                    // Answer
public:
    int compME(int, int, int);  // Compute Modular Exponentiation
};

/*
 * Compute Modular Exponentiation
 */
int ModularExponentiation::compME(int b, int e, int m)
{
    ans = 1;

    while (e &gt; 0) {
       if ((e &amp; 1) == 1) ans = (ans * b) % m;
       e &gt;&gt;= 1;
       b = (b * b) % m;
    }

    return ans;
}

int main()
{
    try
    {
        // Declaration
        int b, e, m, me;  // me = b^e mod m
        b = 12345; e = 6789; m = 4567;

        // Instantiation
        ModularExponentiation objMain;

        // Modular Exponentiation Computation
        me = objMain.compME(b, e, m);

        // Display
        cout &lt;&lt; b &lt;&lt; "^" &lt;&lt; e &lt;&lt; " mod " &lt;&lt; m &lt;&lt; " = "
             &lt;&lt; me &lt;&lt; endl;
    }
    catch (...) {
        cout &lt;&lt; "ERROR!" &lt;&lt; endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/573f949235ef5d57ea2f" title="Gist - C++ source code to compute modular exponetiation iteratively.">Gist - C++ source code to compute modular exponetiation iteratively.</a></li>
</ul>


<p>次に、再帰的な記述方法で作成。(<code>compME</code> 関数の内容が異なるだけ）</p>

<pre><code class="c ModularExponentiation2.cpp">/***************************************************************
 * Modular Exponentiation (recursive).
 **************************************************************/
#include &lt;iostream&gt;
#include &lt;stdlib.h&gt;

using namespace std;

class ModularExponentiation
{
    int ans;                    // Answer
public:
    int compME(int, int, int);  // Compute Modular Exponentiation
};

/*
 * Compute Modular Exponentiation
 */
int ModularExponentiation::compME(int b, int e, int m)
{
    if (e == 0) return 1;

    ans = compME(b, e / 2, m);
    ans = (ans * ans) % m;
    if (e % 2 == 1) ans = (ans * b) % m;

    return ans;
}

int main()
{
    try
    {
        int b, e, m, me;  // me = b^e mod m
        b = 12345; e = 6789; m = 4567;

        // Instantiation
        ModularExponentiation objMain;

        // Compute Modular Exponentiation
        me = objMain.compME(b, e, m);

        // Display
        cout &lt;&lt; b &lt;&lt; "^" &lt;&lt; e &lt;&lt; " mod " &lt;&lt; m &lt;&lt; " = "
             &lt;&lt; me &lt;&lt; endl;
    }
    catch (...) {
        cout &lt;&lt; "ERROR!" &lt;&lt; endl;
        return EXIT_FAILURE;
    }

    return EXIT_SUCCESS;
}
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/03c42ccb8ea0eda3722e" title="Gist - C++ source code to compute modular exponetiation recursively.">Gist - C++ source code to compute modular exponetiation recursively.</a></li>
</ul>


<h3>4. C++ ソースコードのコンパイル</h3>

<p>作成した C++ ソースコードを以下のようにコンパイル。<br/>
（<code>-Wall</code> 警告も出力するオプション、<code>-O2</code> 最適化のオプション）</p>

<pre><code class="text">$ g++ -Wall -O2 -o ModularExponentiation1 ModularExponentiation1.cpp
$ g++ -Wall -O2 -o ModularExponentiation2 ModularExponentiation2.cpp
</code></pre>

<h3>5. 動作確認</h3>

<pre><code class="text">$ ./ModularExponentiation1
12345^6789 mod 4567 = 62

$ ./ModularExponentiation2
12345^6789 mod 4567 = 62
</code></pre>

<h3>6. 参考サイト</h3>

<ul>
<li><a href="http://ja.wikipedia.org/wiki/%E5%86%AA%E5%89%B0%E4%BD%99" title="冪剰余 - Wikipedia">冪剰余 - Wikipedia</a></li>
</ul>


<hr />

<p>べき乗の計算だけで莫大な桁数になるものが、整数型の範囲内でコストをかけずに瞬時に計算できるのはよいですね。</p>

<p>プログラミングで実装する際のアルゴリズム考察は重要であると再認識した次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
</feed>
