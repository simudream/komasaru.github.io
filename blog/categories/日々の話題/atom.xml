<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 日々の話題 | mk-mode BLOG]]></title>
  <link href="http://komasaru.github.io/blog/categories/日々の話題/atom.xml" rel="self"/>
  <link href="http://komasaru.github.io/"/>
  <updated>2016-01-18T00:07:17+09:00</updated>
  <id>http://komasaru.github.io/</id>
  <author>
    <name><![CDATA[mk-mode.com]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[海面校正気圧等の計算！]]></title>
    <link href="http://komasaru.github.io/blog/2015/01/23/calculate-pressures/"/>
    <updated>2015-01-23T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2015/01/23/calculate-pressures</id>
    <content type="html"><![CDATA[<p>こんにちは。</p>

<p>天気図に表示される等圧線は標高 0m での気圧に校正した値を使用してます。当然、標高により気圧が変化するからです。<br/>
（「海面校正」は「海面更正」と表現することもあるが、気象庁は「海面校正」を使用）</p>

<p>以下は、その計算式と計算するための簡単な Ruby スクリプトです。<br/>
（「海面校正気圧」の他に、「標高から気圧」、「気圧から標高」、」目的地の気温」の計算式・Ruby スクリプトも掲載）</p>

<!--more-->


<h3>1. 各種計算式</h3>

<p>数式が多いので、<script type="math/tex">\LaTeX</script>で作成した文書のハードコピーを掲載。</p>

<p><img src="/images/2015/01/23/CALC_PRES_ETC.png" title="CALC_PRES_ETC" alt="CALC_PRES_ETC" /></p>

<h3>2. Ruby スクリプト</h3>

<pre><code class="ruby calc_pressure.rb">#! /usr/local/bin/ruby
# coding: utf-8
#*********************************************
# Ruby script to calculate values about pressure.
#*********************************************
#
class CalcPressure
  # Constants
  C_1 = 0.0065
  C_2 = 273.15
  C_3 = 5.257

  # Calculate a sealevel pressure.
  def calc_sealevel(p, t, h)
    v   = 1 - (C_1 * h) / (t + C_1 * h + C_2)
    v **= C_3
    return p / v
  end

  # Calculate a pressure from a height above sea level.
  def calc_h2p(p, t, h)
    v   = 1 - (C_1 * h) / (t + C_1 * h + C_2)
    v **= C_3
    return p * v
  end

  # Calculate a height above sea level from a pressure.
  def calc_p2h(p_0, p, t)
    v  = (p_0 / p.to_f) ** (1 / C_3) - 1
    v *= t + C_2
    return v / C_1
  end

  # Calculate a temperature at the destination.
  def calc_temp_dest(t_a, h_a, h)
    return t_a - C_1 * (h - h_a)
  end
end

exit unless __FILE__ == $0

obj = CalcPressure.new

# Calculate a sealevel pressure.
p, t, h = 850, 15, 1729
p_0 = obj.calc_sealevel(p, t, h)
puts "P = #{p}, T = #{t}, h = #{h}"
puts "P_0 = #{p_0}"
puts "---"

# Calculate a pressure from a height above sea level.
p_0, t, h = 1015.25, 5, 1729
p = obj.calc_h2p(p_0, t, h)
puts "P_0 = #{p_0}, T = #{t}, h = #{h}"
puts "P = #{p}"
puts "---"

# Calculate a height above sea level from a pressure.
p_0, p, t = 1005.75, 900, 15
h = obj.calc_p2h(p_0, p, t)
puts "P_0 = #{p_0}, p = #{p}, T = #{t}"
puts "h = #{h}"
puts "---"

# Calculate a temperature at the destination.
t_a, h_a, h = 15, 1729, 0
t = obj.calc_temp_dest(t_a, h_a, h)
puts "T_a = #{t_a}, h_a = #{h_a}, h = #{h}"
puts "T = #{t}"
</code></pre>

<ul>
<li><a href="https://gist.github.com/komasaru/d77a4d42ae10d15e4c9f" title="Gist - Ruby script to calculate values about pressure.">Gist - Ruby script to calculate values about pressure.</a></li>
</ul>


<h3>3. Ruby スクリプト実行</h3>

<pre><code class="text">$ ./calc_pressure
P = 850, T = 15, h = 1729
P_0 = 1039.3739217322998
---
P_0 = 1015.25, T = 5, h = 1729
P = 824.4057447728877
---
P_0 = 1005.75, p = 900, T = 15
h = 946.7930161358183
---
T_a = 15, h_a = 1729, h = 0
T = 26.238500000000002
</code></pre>

<hr />

<p>簡単な計算式・スクリプトですが、何かときに役に立つでしょう。</p>

<p>ちなみに、例の標高 1,729m は中国地方の最高峰大山（剣ヶ峰）の標高です。<br/>
標高 0m 地点の気圧が 1015.25hPa で気温が 5℃ の場合、大山頂上の気圧は 824hPa になるようです。気圧だけで見ると、いわゆるスーパー台風よりもはるかに低いです。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[測地系について！]]></title>
    <link href="http://komasaru.github.io/blog/2014/03/21/about-datum/"/>
    <updated>2014-03-21T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2014/03/21/about-datum</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>今日は「測地系」についての個人的な備忘録です。</p>

<!--more-->


<h3>1. 測地系とは</h3>

<ul>
<li>「緯度経度の座標軸を使って、地図画面上の特定の位置を示す際の基準となる前提条件」のことである。</li>
<li>「異なる測地系の間では、同じ『経度・緯度』でも地図上で示す位置が異なる」ということ。</li>
</ul>


<h3>2. 各測地系について</h3>

<p>主な測地系について。</p>

<ul>
<li>WGS84

<ul>
<li>アメリカ国防総省策定の「世界測地系（"World Geodetic System"）」であり、（非公式だが）事実上の世界標準である。</li>
<li>楕円体：WGS-84、座標系：WGS84</li>
<li>GPS に使用されている。</li>
<li>Google マップが採用している。</li>
</ul>
</li>
<li>世界測地系（＝日本測地系2011（JGD2011, Japanese Geodetic Datum 2011）

<ul>
<li>2011年10月21日（測量法改正時）からの日本の公式測地系であり、実質は世界測地系のうち日本が構築した部分のこと。</li>
<li>2011年3月の東日本大震災により大規模な地殻変動が発生しため、 JGD2000 から改定された。</li>
<li>楕円体：GRS-80、座標系：ITRF2008</li>
<li>学術的には「日本測地系2011」、法令上は「世界測地系」と呼ぶ。</li>
<li>WGS84 と JGD2011 の誤差はほとんどない（なくなってきた）。</li>
<li>国土地理院で正式に採用されている。（実際は JGD2000 に補正パラメータでパッチを当てて対応している？）</li>
<li>日本で「世界測地系」と言えばこの JGD2011 のことである。JGD2000 や WGS84 と混同しないこと。</li>
</ul>
</li>
<li>日本測地系2000（JGD2000, Japanese Geodetic Datum 2000）

<ul>
<li>2011年10月20日までの日本の公式測地系であった。</li>
<li>楕円体：GRS-80、座標系：ITRF94</li>
<li>学術的には「日本測地系2000」と呼ぶ。</li>
<li>国土地理院等で正式に採用されている。</li>
</ul>
</li>
<li>日本測地系

<ul>
<li>2002年3月までの日本の公式測地系であり、"Tokyo Datum" と呼ばれる。</li>
<li>楕円体：Bessel、座標系：日本独自</li>
<li>現在でも日本国内の各種地図情報サイトで採用されている。</li>
<li>「世界測地系（日本測地系2000）」との間で、東京付近で約 450m も誤差がある。</li>
</ul>
</li>
</ul>


<h3>3. 楕円体について</h3>

<p>各測地系で扱われる楕円体は以下のように定義されている。</p>

<table class="common">
  <tr>
    <th class="center">楕円体</th>
    <th class="center">年代</th>
    <th class="center">長半径（赤道半径）</th>
    <th class="center">扁平率の逆数</th>
    <th class="center">短半径（極半径）</th>
  </tr>
  <tr>
    <td>Bessel</td>
    <td class="center">1841年</td>
    <td class="right">6,377,397.155000 m</td>
    <td class="right">299.152813000</td>
    <td class="right">6,356,078.963000 m</td>
  </tr>
  <tr>
    <td>GRS-80</td>
    <td class="center">1980年</td>
    <td class="right">6,378,137.000000 m</td>
    <td class="right">298.257222101</td>
    <td class="right">6,356,752.314140 m</td>
  </tr>
  <tr>
    <td>WGS-84</td>
    <td class="center">1984年</td>
    <td class="right">6,378,137.000000 m</td>
    <td class="right">298.257223563</td>
    <td class="right">6,356,752.314245 m</td>
  </tr>
</table>


<p>ちなみに、実際は、Bessel（1841年）とGRS 80（1980年）の間に、クラーク（1880年）、ヘルマート楕円体（1907年）、ヘイフォード（1909年）、クラソフスキー（1943年）もある。</p>

<h3>4. その他</h3>

<p>「日本測地系」をかつての「世界測地系（日本測地系2000）」に変換したり、その逆の変換をする以下のような簡易計算式がある。</p>

<pre><code class="text"># 日本測地系 =&gt; 世界測地系（単位は「度」）
緯度(世界測地系) = 緯度(日本測地系) - 0.00010695  * 緯度(日本測地系)
                 + 0.000017464 * 経度(日本測地系) + 0.0046017
経度(世界測地系) = 経度(日本測地系) - 0.000046038 * 緯度(日本測地系)
                 - 0.000083043 * 経度(日本測地系) + 0.010040

# 世界測地系 =&gt; 日本測地系（単位は「度」）
緯度(日本測地系) = 緯度(世界測地系) + 緯度(世界測地系) * 0.00010696
                 - 経度(世界測地系) * 0.000017467 - 0.0046020
経度(日本測地系) = 経度(世界測地系) + 緯度(世界測地系) * 0.000046047
                 + 経度(世界測地系) * 0.000083049 - 0.010041
</code></pre>

<p>あくまでも「簡易」なので誤差が発生する。また、Web 上に公開されている数多の変換ツールはかなりの（100% に近い）確率でこの「簡易計算式」を使用しているので、誤差が発生することを理解しておく。</p>

<p>もし「日本測地系」をかつての「世界測地系（日本測地系2000）」や現在の「世界測地系」に「正確」に変換したければ、国土地理院提供のデータ（座標変換パラメータ）を使用して詳細に計算（メッシュコード算出、バイリニア補完等）しないといけない。</p>

<h3>5. 参考サイト</h3>

<ul>
<li><a href="http://www.gsi.go.jp/LAW/G2000-g2000.htm" title="世界測地系移行の概要｜国土地理院">世界測地系移行の概要｜国土地理院</a></li>
<li><a href="http://www.atmarkit.co.jp/ait/articles/0902/12/news135.html" title="位置情報を使ってみよう（1）：位置情報を取得する仕組み - ＠IT">位置情報を使ってみよう（1）：位置情報を取得する仕組み - ＠IT</a></li>
</ul>


<hr />

<p>日本測地系と世界測地系（日本測地系2000）との間の誤差を計算してみようと思い、「測地系」について再調査してみた次第です。</p>

<p>以上。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[* Ruby - 地球上の2点間の距離をほぼ正確に計算！]]></title>
    <link href="http://komasaru.github.io/blog/2011/10/28/28002050/"/>
    <updated>2011-10-28T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2011/10/28/28002050</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>最近、 Ruby での UNIX MBOX メールヘッダの検証をやってきましたが、今回は気分転換に違った話題です。</p>

<p>それは「Rubyを使って地球上の2点間の距離を出来るだけ正確に計算してみよう」というものです。
※きっかけは、地元の原子力発電所と自宅の距離を正確に知りたかったから。</p>

<p>ご存知のように地球は完全な球体ではありません。
赤道方向の半径が極方向の半径より若干大きいです。</p>

<!--more-->


<p>地球が完全な球体なら、高校数学程度の知識で計算できます。
ちなみに、球面三角法による算出方法は以下のとおり。</p>

<p><a href="http://komasaru.github.io/images/2011/10/DISTANCE_EARTH_11.jpg"><img src="http://komasaru.github.io/images/2011/10/DISTANCE_EARTH_11.jpg" alt="DISTANCE_EARTH_1" title="DISTANCE_EARTH_1" width="434" height="160" class="alignnone size-full wp-image-5722" /></a></p>

<p>正確に計算するには、まず正確な赤道半径・極半径が必要になります。
<a href="http://ja.wikipedia.org/wiki/%E6%B8%AC%E5%9C%B0%E5%AD%A6" title="測地学 - Wikipedia">測地学 - Wikipedia</a>、<a href="http://ja.wikipedia.org/wiki/%E6%B8%AC%E5%9C%B0%E7%B3%BB" title="測地系 - Wikipedia">測地系 - Wikipedia</a> によると以下の3種類の測地系（測量の前提になる考え方）というものが存在し、それぞれに長半径（赤道半径）・短半径（極半径）が設定されています。</p>

<table class="common">
  <tr>
    <th>測地系</th>
    <th align="center">長半径（赤道半径）</th>
    <th align="center">短半径（極半径）</th>
  </tr>
  <tr>
    <td>Bessel</td>
    <td align="right">6377397.155 m</td>
    <td align="right">6356079.000000 m</td>
  </tr>
  <tr>
    <td>GRS 80</td>
    <td align="right">6378137.000 m</td>
    <td align="right">6356752.314140 m</td>
  </tr>
  <tr>
    <td>WGS 84</td>
    <td align="right">6378137.000 m</td>
    <td align="right">6356752.314245 m</td>
  </tr>
</table>


<p>これらの測地系のうち、「GRS 80」と「WGS 84」が歴史も新しく精度も良いようで、中でも「GRS 80」が一番精度が良いようです。
（と言っても、それぞれの誤差はわずかなものです）</p>

<p>次に、計算方法ですが一番正確な方法は国土地理院のサイトに掲載の方法のような気がします。</p>

<ul>
<li><a href="http://vldb.gsi.go.jp/sokuchi/surveycalc/surveycalc/algorithm/bl2st/bl2st.htm" title="距離と方位角の計算 計算式">距離と方位角の計算 計算式</a></li>
</ul>


<p>しかし、非常に複雑で簡単に実現できそうな気がしません。</p>

<p>そこで、さらに調べてみると「ヒュベニの公式」というものが存在することが判明。</p>

<ul>
<li><a href="http://www.kashmir3d.com/kash/manual/std_siki.htm" title="カシミール / 計算式">カシミール / 計算式</a></li>
</ul>


<p>詳しくはここでは説明しません（できません）が、他のサイト等も参考にしてまとめると以下のような公式になります。</p>

<p><a href="http://komasaru.github.io/images/2011/10/DISTANCE_EARTH_21.jpg"><img src="http://komasaru.github.io/images/2011/10/DISTANCE_EARTH_21.jpg" alt="DISTANCE_EARTH_2" title="DISTANCE_EARTH_2" width="421" height="354" class="alignnone size-full wp-image-5723" /></a></p>

<p>参考までに、以下にこの公式を利用した距離計算のRubyスクリプトを掲載しておきます。</p>

<h4>Ruby スクリプト</h4>

<p>ご利用の環境によっては微修正が必要かもしれません。</p>

<pre><code class="ruby calc_dist.rb"># -*- coding: utf-8 -*-
# 
# ２地点間の距離を計算（２地点の緯度・経度から）
#
# date          name            version
# 2011.10.22    mk-mode.com     1.00 新規作成
#
# Copyright(C)2011 mk-mode.com All Rights Reserved.
#---------------------------------------------------------------------------------
# 引数 : [第１] 測地系 ( 0:BESSEL , 1:GRS80 , 2:WGS84 )
#        [第２] 緯度１ (  -90.00000000 ～  90.00000000 )
#        [第３] 経度１ ( -180.00000000 ～ 180.00000000 )
#        [第４] 緯度２ (  -90.00000000 ～  90.00000000 )
#        [第５] 経度２ ( -180.00000000 ～ 180.00000000 )
#---------------------------------------------------------------------------------
# 備考 : 1:GRS80 が最も正確
#        島根原発１号機 ( 35.5382 132.9998 )
#        自宅           ( 99.9999 179.9999 )
#      : 完全な球だと想定すると
#        D = R * acos( sin(y1) * sin(y2) + cos(y1) * cos(y2) * cos(x2-x1) )
#++

class CalcDist
  # 使用方法
  USAGE =  "USAGE : ruby calc_disk.rb Type Lat1 Lon1 Lat2 Lon2\n"
  USAGE &lt;&lt; "Type       : 0:BESSEL, 1:GRS80, 2:WGS84\n"
  USAGE &lt;&lt; "Lat1, Lat2 :  -90.00000000 -  [+]90.00000000\n"
  USAGE &lt;&lt; "Lon1, Lon2 : -180.00000000 - [+]180.00000000"

  # 定数 ( ベッセル楕円体 ( 旧日本測地系 ) )
  BESSEL_R_X  = 6377397.155000 # 赤道半径
  BESSEL_R_Y  = 6356079.000000 # 極半径

  # 定数 ( GRS80 ( 世界測地系 ) )
  GRS80_R_X   = 6378137.000000 # 赤道半径
  GRS80_R_Y   = 6356752.314140 # 極半径

  # 定数 ( WGS84 ( GPS ) )
  WGS84_R_X   = 6378137.000000 # 赤道半径
  WGS84_R_Y   = 6356752.314245 # 極半径

  # 定数 ( 測地系 )
  MODE = [ "BESSEL", "GRS-80", "WGS-84" ]

  # [CLASS] 引数
  class Arg
    # 引数チェック
    def check_arg()
      begin
        # 存在チェック
        return false unless ARGV.length == 5

        # 測地系タイプチェック
        unless ARGV[0] =~ /^[012]$/
          return false
        end

        # 緯度チェック
        unless ARGV[1] =~ /^[+|-]?(\d|[1-8]\d|90)(\.\d{1,8})?$/ &amp;&amp;
               ARGV[3] =~ /^[+|-]?(\d|[1-8]\d|90)(\.\d{1,8})?$/
          return false
        end

        # 経度チェック
        unless ARGV[2] =~ /^[+|-]?(\d{1,2}|1[0-7]\d|180)(\.\d{1,8})?$/ &amp;&amp;
               ARGV[4] =~ /^[+|-]?(\d{1,2}|1[0-7]\d|180)(\.\d{1,8})?$/
          return false
        end

        return true
      rescue =&gt; e
        # エラーメッセージ
        str_msg = "[EXCEPTION][" + self.class.name + ".check_arg] " + e.to_s
        STDERR.puts( str_msg )
        exit! 1
      end
    end
  end

  # [CLASS] 計算
  class Calc
    def initialize(mode, lat_1, lon_1, lat_2, lon_2)
      @mode  = mode
      @lat_1 = lat_1
      @lon_1 = lon_1
      @lat_2 = lat_2
      @lon_2 = lon_2
    end

    # 距離計算
    def calc_dist
      begin
        # 指定測地系の赤道半径・極半径を設定
        case @mode
          when 0
            r_x = BESSEL_R_X
            r_y = BESSEL_R_Y
          when 1
            r_x = GRS80_R_X
            r_y = GRS80_R_Y
          when 2
            r_x = WGS84_R_X
            r_y = WGS84_R_Y
        end

        # 2点の経度の差を計算 ( ラジアン )
        a_x = @lon_1 * Math::PI / 180.0 - @lon_2 * Math::PI / 180.0

        # 2点の緯度の差を計算 ( ラジアン )
        a_y = @lat_1 * Math::PI / 180.0 - @lat_2 * Math::PI / 180.0

        # 2点の緯度の平均を計算
        p = ( @lat_1 * Math::PI / 180.0 + @lat_2 * Math::PI / 180.0 ) / 2.0

        # 離心率を計算
        e = Math::sqrt( ( r_x ** 2 - r_y ** 2 ) / ( r_x ** 2 ).to_f )

        # 子午線・卯酉線曲率半径の分母Wを計算
        w = Math::sqrt( 1 - ( e ** 2 ) * ( ( Math::sin( p ) ) ** 2 ) )

        # 子午線曲率半径を計算
        m = r_x * ( 1 - e ** 2 ) / ( w ** 3 ).to_f

        # 卯酉線曲率半径を計算
        n = r_x / w.to_f

        # 距離を計算
        d  = ( a_y * m ) ** 2
        d += ( a_x * n * Math.cos( p ) ) ** 2
        d  = Math::sqrt( d )

        # 地球を完全な球とみなした場合
        # ( 球面三角法 )
        # D = R * acos( sin(y1) * sin(y2) + cos(y1) * cos(y2) * cos(x2-x1) )
        d_1  = Math::sin( @lat_1 * Math::PI / 180.0 ) 
        d_1 *= Math::sin( @lat_2 * Math::PI / 180.0 )
        d_2  = Math::cos( @lat_1 * Math::PI / 180.0 )
        d_2 *= Math::cos( @lat_2 * Math::PI / 180.0 )
        d_2 *= Math::cos( @lon_2 * Math::PI / 180.0 - @lon_1 * Math::PI / 180.0 )
        d_0  = r_x * Math::acos( d_1 + d_2 ).to_f

        return [ d, d_0 ]
      rescue =&gt; e
        # エラーメッセージ
        str_msg = "[EXCEPTION][" + self.class.name + ".calc_dist] " + e.to_s
        STDERR.puts( str_msg )
        exit 1
      end
    end
  end

  #### MAIN ####
  if __FILE__ == $0
    # 引数チェック( エラーなら終了 )
    obj_arg = Arg.new
    unless obj_arg.check_arg
      # エラーの場合、終了
      puts USAGE
      exit!
    end

    # 引数取得
    mode  = ARGV[0].to_i
    lat_1 = ARGV[1].to_f
    lon_1 = ARGV[2].to_f
    lat_2 = ARGV[3].to_f
    lon_2 = ARGV[4].to_f

    # 距離計算
    obj_calc = Calc.new( mode, lat_1, lon_1, lat_2, lon_2 )
    dist = obj_calc.calc_dist

    # 結果出力
    puts "Mode        : #{MODE[mode]}"
    puts "Latitude (1): #{sprintf("%13.8f",lat_1)} degrees"
    puts "Longitude(1): #{sprintf("%13.8f",lon_1)} degrees"
    puts "Latitude (2): #{sprintf("%13.8f",lat_2)} degrees"
    puts "Longitude(2): #{sprintf("%13.8f",lon_2)} degrees"
    puts "Distance = #{dist[0]} m ( #{dist[1]} m )"
  end
end
</code></pre>

<h4>使用例</h4>

<p>上記のスクリプトに測地系(0:Bessel, 1:GRS80, 2:WGS84 )と地点１の緯度・経度、地点２の緯度・経度を引数に指定して実行します。（1:GRS80 が一番精度が高いと思います。）</p>

<ul>
<li>緯度・経度は度で指定。
Ａ度Ｂ分Ｃ秒は度に変換して指定。( A + B / 60 + C / 3600 )</li>
<li>南緯・西経はマイナスで指定。</li>
<li>小数点以下は8桁まで指定可能。</li>
</ul>


<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;blockquote>&lt;p>ruby calc_dist.rb 1 35.5382 132.9998 35.47222 133.050556
</span><span class='line'>Mode        : GRS-80
</span><span class='line'>Latitude (1):   35.53820000 degrees
</span><span class='line'>Longitude(1):  132.99980000 degrees
</span><span class='line'>Latitude (2):   35.47222000 degrees
</span><span class='line'>Longitude(2):  133.05055600 degrees
</span><span class='line'>Distance = 8648.30331225593 m ( 8666.19473153661 m )</span></code></pre></td></tr></table></div></figure></p></blockquote>

<p>※上記は、島根原子力発電所１号機の位置（Googleマップより取得）と島根県庁の位置の距離です。<br/>
※計算結果の ( )内の数値は、地球が測地系の長半径を半径とする完全な球体とみなした場合の球面三角法による計算結果。</p>

<p>このように、地球が完全な球体であると仮定した場合との差は、今回の場合 18 メートル位となります。</p>

<hr />

<p>ちなみに、島根原子力発電所１号機と自宅の距離は 8082.850806768164 mでした。
※緯度・経度は自宅がばれるので公開しません。距離から自宅がある円周上に存在することは判明しますが・・・</p>

<p>以上。</p>

<hr />

<p>※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[* 旧暦の月日から六曜を求める方法！]]></title>
    <link href="http://komasaru.github.io/blog/2011/09/30/30002016/"/>
    <updated>2011-09-30T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2011/09/30/30002016</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>旧暦の考え方の中に「六曜」というものがあります。
「先勝・友引・先負・仏滅・大安・赤口」というおなじみのものです。
各六曜の意味は以下のとおりです。</p>

<!--more-->


<table>
  <tr>
    <th>六曜</th>
    <th>読み(一例)</th>
    <th>簡単な意味</th>
    <th>備考</th>
  </tr>
  <tr>
    <td>先勝</td>
    <td>せんがち</td>
    <td>急ぐことは良い</td>
    <td>午前吉、午後凶</td>
  </tr>
  <tr>
    <td>友引</td>
    <td>ともびき</td>
    <td>祝い事は良い、葬式は忌む</td>
    <td>朝夕吉、正午凶</td>
  </tr>
  <tr>
    <td>先負</td>
    <td>せんまけ</td>
    <td>控えめに平静が良い</td>
    <td>午前凶、午後吉</td>
  </tr>
  <tr>
    <td>仏滅</td>
    <td>ぶつめつ</td>
    <td>すべて悪い、葬式・法事は良い</td>
    <td>終日凶</td>
  </tr>
  <tr>
    <td>大安</td>
    <td>たいあん</td>
    <td>すべて良い、特に婚礼に良い</td>
    <td>終日吉</td>
  </tr>
  <tr>
    <td>赤口</td>
    <td>しゃっこう</td>
    <td>祝い事に悪い</td>
    <td>朝夕凶、正午吉</td>
  </tr>
</table>


<p>この六曜は旧暦の月と日がわかれば、簡単に計算可能です。
旧暦の各月の１日の六曜が決まっていてあとは月末で繰り返すのです。</p>

<p>各月１日の六曜</p>

<table>
  <tr>
    <th>月</th>
    <th>六曜</th>
  </tr>
  <tr>
    <td>１・７月</td>
    <td>先勝</td>
  </tr>
  <tr>
    <td>２・８月</td>
    <td>友引</td>
  </tr>
  <tr>
    <td>３・９月</td>
    <td>先負</td>
  </tr>
  <tr>
    <td>４・１０月</td>
    <td>仏滅</td>
  </tr>
  <tr>
    <td>５・１１月</td>
    <td>大安</td>
  </tr>
  <tr>
    <td>６・１２月</td>
    <td>赤口</td>
  </tr>
</table>


<p>ですから結局のところ、旧暦の月と日をたした数を６で割った余りによって六曜を決定することができます。
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>( 旧暦の月 ＋ 旧暦の日 ) ÷ 6 ＝ 商 ・・・ 余り
</span><span class='line'>余り 0 : 大安
</span><span class='line'>　　 1 : 赤口
</span><span class='line'>　　 2 : 先勝
</span><span class='line'>　　 3 : 友引
</span><span class='line'>　　 4 : 先負
</span><span class='line'>　　 5 : 仏滅</span></code></pre></td></tr></table></div></figure></p>

<p>ちなみに私は六曜の順番を「かち（先勝）ひき（友引）ふ（先負）めつ（仏滅）たい（大安）こう（赤口）」と覚えています。</p>

<p>以上が六曜についての簡単な説明でしたが、この六曜を求めるのに必要な旧暦の求め方が非常にややこしいのです。
旧暦の求め方は簡単にまとめられません。過去に作成したRubyスクリプトをご参照ください。</p>

<ul>
<li><a href="/2011/09/10/10002053/" title="Ruby - 旧暦カレンダー作成スクリプト！">Ruby - 旧暦カレンダー作成スクリプト！</a></li>
</ul>


<p>以上。</p>

<hr />

<p>※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[* 日数計算の方法！]]></title>
    <link href="http://komasaru.github.io/blog/2011/09/22/22002000/"/>
    <updated>2011-09-22T00:20:00+09:00</updated>
    <id>http://komasaru.github.io/blog/2011/09/22/22002000</id>
    <content type="html"><![CDATA[<p>こんばんは。</p>

<p>Ａ年Ｂ月Ｃ日はＤ年Ｅ月Ｆ日から何日経過しているのか計算したくなることがよくあると思います。</p>

<p>簡単なものなら表計算ソフトで関数を使用して計算すると思います。</p>

<p>今日は表計算ソフト等を使用せずに計算する方法を紹介します。</p>

<!--more-->


<p>それは、２つの日付（グレゴリオ暦）の「修正ユリウス日」というものを計算し、それらの差を求めるというものです。
（グレゴリオ暦とは現在の日付表現方法のことです）</p>

<p>「ユリウス日」とは世界標準時の紀元前4713年1月1日正午からの経過日数で、日付や時刻等の暦関連の計算では必ず使用します。
「ユリウス日」では数字が大きすぎるし、正午から計算日数のため午前０時だと端数の &ldquo;.5&rdquo; が付いてしまうので、「ユリウス通日」から 2400000.5日 を引いた「修正ユリウス日」というものを使用します。</p>

<p>そこで、「修正ユリウス日」の計算方法ですが、幸いなことに計算式があります。
「フリーゲルの公式」というものです。グレゴリオ暦の西暦年・月・日から「修正ユリウス日」が計算できます。</p>

<h4>フリーゲルの公式</h4>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>「修正ユリウス日」 = floor( 365.25y )
</span><span class='line'>　　　　　　　　　 + floor( y / 400 )
</span><span class='line'>　　　　　　　　　 - floor( y / 100 )
</span><span class='line'>　　　　　　　　　 + floor( 30.59 ( m - 2 ) )
</span><span class='line'>　　　　　　　　　 + d
</span><span class='line'>　　　　　　　　　 - 678912</span></code></pre></td></tr></table></div></figure></p>

<p>※ y：西暦年、m：月、d：日
　 ( 但し、1月・2月は「前年」の13月・14月とする )
※ floor(x)とは x 以下の最大の整数を表します。
※ 365.25 は1年の平均日数(単純に4年に1回の閏年の場合)
※ 100で割り切れる年は閏年でなく、400で割り切れる年は閏年。
※ 30.59 は月の日数配分から巧妙に算出された定数。
※ 「修正ユリウス日」でなく「ユリウス日」を求める場合は、-678912 に 2400000.5 を加算します。</p>

<h4>計算例</h4>

<p>例として、1972年1月24日 から 2011年9月22日 までの経過日数を計算してみます。<br/>
・1972年1月24日
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>「修正ユリウス日」 = floor( 365.25 * 1971 )
</span><span class='line'>　　　　　　　　　 + floor( 1971 / 400 )
</span><span class='line'>　　　　　　　　　 - floor( 1971 / 100 )
</span><span class='line'>　　　　　　　　　 + floor( 30.59 ( 13 - 2 ) )
</span><span class='line'>　　　　　　　　　 + 24
</span><span class='line'>　　　　　　　　　 - 678912
</span><span class='line'>　　　　　　　　　 = 719907 + 4 - 19 + 336 + 24 - 678912
</span><span class='line'>　　　　　　　　　 = 41340</span></code></pre></td></tr></table></div></figure></p>

<p>・2011年9月22日
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>「修正ユリウス日」 = floor( 365.25 * 2011 )
</span><span class='line'>　　　　　　　　　 + floor( 2011 / 400 )
</span><span class='line'>　　　　　　　　　 - floor( 2011 / 100 )
</span><span class='line'>　　　　　　　　　 + floor( 30.59 ( 9 - 2 ) )
</span><span class='line'>　　　　　　　　　 + 22
</span><span class='line'>　　　　　　　　　 - 678912
</span><span class='line'>　　　　　　　　　 = 734517 + 5 - 20 + 214 + 22 - 678912
</span><span class='line'>　　　　　　　　　 = 55826</span></code></pre></td></tr></table></div></figure></p>

<p>・経過日数
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>「経過日数」=「修正ユリウス日(2011年9月22日)」-「修正ユリウス日(1972年1月24日)」
</span><span class='line'>　　　　　　= 55826 - 41340
</span><span class='line'>　　　　　　= 14486</span></code></pre></td></tr></table></div></figure></p>

<p>ということで、2011年9月22日 は 1972年1月24日 から 14486日後 となります。</p>

<hr />

<p>「修正ユリウス日」もしくは「ユリウス日」を使用することで、さまざまな暦関連の計算が出来ます。
※旧暦などは太陽・月と地球の位置関係（三角関数）の計算も必要になりますが。。。</p>

<p>以上。</p>

<hr />

<p>※この記事は WordPress に投稿した記事を変換したものです。一部不自然な表示があるかも知れません。ご了承ください。また、記事タイトル先頭の * は WordPress から移行した記事である印です。</p>
]]></content>
  </entry>
  
</feed>
